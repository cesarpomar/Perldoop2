/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.Token;
import perldoop.sintactico.Parser;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VAR = 2;
  public static final int FUN = 4;
  public static final int PD = 6;
  public static final int IGNORAR = 8;
  public static final int DELIMITADOR = 10;
  public static final int DELIMITADOR_DOBLE = 12;
  public static final int ANALISIS = 14;
  public static final int ANALISIS_VAR = 16;
  public static final int ANALISIS_ACCESO = 18;
  public static final int ANALISIS_ACCESO_INDEX = 20;
  public static final int REX_T = 22;
  public static final int REX_MOD = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\101\1\40\1\42\1\42\1\41\22\0\1\101\1\63\1\50"+
    "\1\31\1\43\1\45\1\55\1\47\1\65\1\66\1\56\1\13\1\73"+
    "\1\14\1\11\1\57\1\2\1\10\6\6\2\3\1\46\1\75\1\15"+
    "\1\64\1\25\1\74\1\44\1\5\1\7\2\5\1\12\1\5\21\1"+
    "\1\4\2\1\1\67\1\76\1\70\1\62\1\1\1\51\1\33\1\26"+
    "\1\27\1\103\1\23\1\103\1\17\1\102\1\16\1\32\1\30\1\24"+
    "\1\35\1\20\1\21\1\36\1\52\1\22\1\77\1\37\1\102\1\34"+
    "\1\53\1\54\1\100\1\102\1\71\1\60\1\72\1\61\6\0\1\42"+
    "\32\0\1\101\u15df\0\1\101\u097f\0\13\101\35\0\1\42\1\42\5\0"+
    "\1\101\57\0\1\101\u0fa0\0\1\101\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\1\1\2"+
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\2"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\12\1\45\1\46\1\47\1\45\1\50"+
    "\2\51\1\52\1\12\1\53\1\54\2\55\2\56\1\57"+
    "\1\60\1\61\2\3\1\62\1\63\1\61\1\64\1\65"+
    "\1\1\1\66\1\67\1\70\1\71\1\72\1\73\1\3"+
    "\3\0\1\74\1\0\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\0\1\12"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\2\0\1\3\3\0"+
    "\1\74\1\0\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\0\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\5\0\1\55\1\135\3\3\1\74"+
    "\1\0\1\136\1\137\1\140\2\0\1\141\1\142\1\143"+
    "\1\144\1\0\2\3\1\74\1\0\1\136\1\137\1\140"+
    "\2\0\1\141\1\142\1\143\1\144\1\145\3\0\1\146"+
    "\13\0\1\147\66\0\1\150\3\0\1\150\6\0\1\150"+
    "\2\0\1\151\1\0\1\151\1\150\1\152\2\153\1\151"+
    "\1\150\1\151\1\150\1\151\1\150\1\151\1\150\1\151"+
    "\1\150\1\151\1\150\1\151\1\150\1\151\1\150\1\151"+
    "\1\150\1\151\1\150\1\151\1\150\2\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u03b8\0\u03b8\0\u03b8\0\u0660\0\u06a4\0\u03b8\0\u03b8\0\u03b8"+
    "\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4"+
    "\0\u0908\0\u094c\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8"+
    "\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0990\0\u0990"+
    "\0\u0c38\0\u0c7c\0\u0990\0\u0990\0\u0990\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0990"+
    "\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990"+
    "\0\u0990\0\u0990\0\u03b8\0\u0f68\0\u03b8\0\u06a4\0\u0fac\0\u03b8"+
    "\0\u0ff0\0\u03b8\0\u1034\0\u03b8\0\u03b8\0\u1078\0\u10bc\0\u03b8"+
    "\0\u06a4\0\u03b8\0\u03b8\0\u03b8\0\u1100\0\u1144\0\u03b8\0\u03b8"+
    "\0\u06a4\0\u03b8\0\u03b8\0\u1188\0\u03b8\0\u03b8\0\u03b8\0\u03b8"+
    "\0\u03b8\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u13a8"+
    "\0\u13ec\0\u1430\0\u03b8\0\u1474\0\u14b8\0\u03b8\0\u03b8\0\u03fc"+
    "\0\u03fc\0\u03fc\0\u03fc\0\u03b8\0\u14fc\0\u03b8\0\u1540\0\u03b8"+
    "\0\u1584\0\u03b8\0\u15c8\0\u03b8\0\u03b8\0\u03b8\0\u03b8\0\u03b8"+
    "\0\u03b8\0\u03b8\0\u0990\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990\0\u0990"+
    "\0\u0990\0\u17e8\0\u182c\0\u1870\0\u0990\0\u18b4\0\u0990\0\u0990"+
    "\0\u09d4\0\u09d4\0\u09d4\0\u09d4\0\u0990\0\u18f8\0\u0990\0\u193c"+
    "\0\u0990\0\u1980\0\u0990\0\u19c4\0\u0990\0\u0990\0\u0990\0\u0990"+
    "\0\u0990\0\u0990\0\u0990\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u03b8\0\u03b8\0\u1b5c\0\u1298\0\u12dc\0\u1ba0\0\u1be4\0\u03b8"+
    "\0\u03b8\0\u03b8\0\u1c28\0\u1c6c\0\u03b8\0\u03b8\0\u03b8\0\u03b8"+
    "\0\u1cb0\0\u16d8\0\u171c\0\u1cf4\0\u1d38\0\u0990\0\u0990\0\u0990"+
    "\0\u1d7c\0\u1dc0\0\u0990\0\u0990\0\u0990\0\u0990\0\u03b8\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u03b8\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u03b8\0\u21bc"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c"+
    "\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u03b8\0\u0990\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\2\20\1\22\1\20\1\22"+
    "\1\23\1\20\1\24\1\25\1\26\7\20\1\27\3\20"+
    "\1\30\6\20\3\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\20\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\2\20"+
    "\1\31\2\20\1\65\1\66\1\67\1\70\2\66\1\70"+
    "\1\66\1\70\1\71\1\66\1\72\1\73\1\74\7\66"+
    "\1\75\3\66\1\76\6\66\3\31\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\66\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\2\66\1\132\2\66\1\133\1\134\2\133\2\134"+
    "\1\133\1\134\2\133\1\134\3\133\7\134\1\133\3\134"+
    "\1\135\6\134\6\133\1\136\3\133\3\134\22\133\2\134"+
    "\1\133\2\134\1\133\1\137\2\133\2\137\1\133\1\137"+
    "\2\133\1\137\3\133\7\137\1\133\3\137\1\133\6\137"+
    "\6\133\1\136\3\133\3\137\22\133\2\137\1\133\2\137"+
    "\15\140\1\141\22\140\1\142\1\31\42\140\15\31\1\143"+
    "\66\31\40\144\3\31\36\144\1\31\2\144\104\145\76\146"+
    "\1\147\5\146\1\150\1\134\2\150\2\134\1\150\1\134"+
    "\2\150\1\134\3\150\7\134\1\150\3\134\1\135\6\134"+
    "\6\150\1\151\3\150\3\134\12\150\1\152\1\150\1\152"+
    "\5\150\2\134\1\150\2\134\67\150\1\153\1\150\1\153"+
    "\12\150\1\154\1\134\1\155\1\156\2\134\1\156\1\134"+
    "\1\156\1\154\1\134\3\154\7\134\1\154\3\134\1\135"+
    "\6\134\3\31\1\157\1\160\1\154\1\161\3\154\3\134"+
    "\13\154\1\162\1\154\1\162\4\154\2\134\1\31\2\134"+
    "\35\17\1\163\1\17\1\164\3\31\5\17\1\165\6\17"+
    "\1\166\17\17\1\167\1\170\1\31\2\17\16\171\7\172"+
    "\1\171\3\172\1\171\6\172\12\171\3\172\22\171\2\172"+
    "\1\171\2\172\105\0\10\20\1\0\1\20\3\0\7\20"+
    "\1\0\3\20\1\0\6\20\12\0\3\20\22\0\2\20"+
    "\1\0\2\20\2\0\1\173\1\174\1\175\1\0\1\173"+
    "\1\176\1\173\1\177\14\0\1\176\25\0\1\175\31\0"+
    "\2\22\2\0\1\22\1\0\1\22\1\177\1\200\10\0"+
    "\1\200\62\0\2\177\2\0\1\177\1\0\1\177\1\201"+
    "\52\0\1\202\32\0\1\203\50\0\1\204\33\0\1\205"+
    "\10\0\1\206\36\0\1\207\34\0\1\210\46\0\1\211"+
    "\44\0\1\212\36\0\1\213\34\0\1\214\45\0\1\215"+
    "\104\0\1\216\65\0\1\217\36\0\10\20\1\0\1\20"+
    "\3\0\4\20\1\220\2\20\1\0\3\20\1\0\6\20"+
    "\12\0\1\221\1\222\1\223\22\0\2\20\1\0\2\20"+
    "\1\0\10\20\1\0\1\20\3\0\7\20\1\0\3\20"+
    "\1\0\6\20\12\0\3\20\7\0\1\224\12\0\2\20"+
    "\1\0\2\20\55\0\1\225\6\0\1\226\75\0\1\227"+
    "\5\0\1\230\76\0\1\231\4\0\1\232\77\0\1\233"+
    "\3\0\1\234\100\0\1\235\106\0\1\236\100\0\1\237"+
    "\2\0\1\240\44\0\1\61\33\0\1\241\2\0\1\242"+
    "\17\0\31\243\1\244\6\243\3\0\42\243\10\66\1\243"+
    "\1\66\3\243\7\66\1\243\3\66\1\244\6\66\3\0"+
    "\7\243\3\66\22\243\2\66\1\243\2\66\2\243\1\245"+
    "\1\246\1\247\1\243\1\245\1\250\1\245\1\251\14\243"+
    "\1\250\2\243\1\244\6\243\3\0\11\243\1\247\31\243"+
    "\2\70\2\243\1\70\1\243\1\70\1\251\1\252\10\243"+
    "\1\252\5\243\1\244\6\243\3\0\43\243\2\251\2\243"+
    "\1\251\1\243\1\251\1\253\17\243\1\244\6\243\3\0"+
    "\21\243\1\254\32\243\1\255\15\243\1\244\6\243\3\0"+
    "\21\243\1\256\33\243\1\257\10\243\1\260\3\243\1\244"+
    "\6\243\3\0\21\243\1\261\34\243\1\262\13\243\1\244"+
    "\6\243\3\0\21\243\1\263\44\243\1\264\3\243\1\244"+
    "\6\243\3\0\21\243\1\265\34\243\1\266\13\243\1\244"+
    "\6\243\3\0\20\243\1\215\51\243\1\244\6\243\3\0"+
    "\21\243\1\267\50\243\1\244\6\243\3\0\3\243\1\270"+
    "\36\243\10\66\1\243\1\66\3\243\4\66\1\271\2\66"+
    "\1\243\3\66\1\244\6\66\3\0\7\243\1\272\1\273"+
    "\1\274\22\243\2\66\1\243\2\66\1\243\10\66\1\243"+
    "\1\66\3\243\7\66\1\243\3\66\1\244\6\66\3\0"+
    "\7\243\3\66\7\243\1\275\12\243\2\66\1\243\2\66"+
    "\31\243\1\244\6\243\3\0\12\243\1\276\6\243\1\277"+
    "\50\243\1\244\6\243\3\0\13\243\1\300\5\243\1\301"+
    "\50\243\1\244\6\243\3\0\14\243\1\302\4\243\1\303"+
    "\50\243\1\244\6\243\3\0\15\243\1\304\3\243\1\305"+
    "\50\243\1\244\6\243\3\0\16\243\1\306\53\243\1\244"+
    "\6\243\3\0\21\243\1\307\50\243\1\244\6\243\3\0"+
    "\16\243\1\310\2\243\1\311\44\243\1\126\3\243\1\244"+
    "\6\243\3\0\16\243\1\312\2\243\1\313\17\243\1\0"+
    "\10\134\1\0\1\134\3\0\7\134\1\0\3\134\1\0"+
    "\6\134\12\0\3\134\22\0\2\134\1\0\2\134\1\0"+
    "\10\137\1\0\1\137\3\0\7\137\1\0\3\137\1\0"+
    "\6\137\12\0\3\137\22\0\2\137\1\0\2\137\1\0"+
    "\1\314\1\315\1\316\2\314\1\316\1\314\1\316\1\0"+
    "\1\314\3\0\7\314\1\0\3\314\1\0\6\314\3\0"+
    "\3\317\4\0\3\314\22\0\2\314\1\0\2\314\16\0"+
    "\1\320\65\0\40\321\3\0\41\321\104\322\2\0\1\323"+
    "\1\0\1\175\1\0\1\323\1\176\1\323\15\0\1\176"+
    "\25\0\1\175\31\0\2\156\2\0\1\156\1\0\1\156"+
    "\115\0\1\170\77\0\7\172\1\0\3\172\1\0\6\172"+
    "\12\0\3\172\22\0\2\172\1\0\2\172\2\0\1\173"+
    "\1\174\2\0\1\173\1\0\1\173\1\177\74\0\2\174"+
    "\2\0\1\174\1\0\1\174\1\177\74\0\2\324\1\0"+
    "\4\324\1\0\1\324\10\0\1\324\2\0\2\324\3\0"+
    "\1\324\47\0\1\324\2\0\1\325\5\0\1\325\75\0"+
    "\2\177\2\0\1\177\1\0\1\177\1\0\1\200\10\0"+
    "\1\200\63\0\1\326\2\0\1\326\1\0\1\326\2\0"+
    "\1\327\154\0\1\330\44\0\1\331\142\0\1\332\35\0"+
    "\1\333\13\0\1\334\51\0\40\215\3\0\41\215\64\0"+
    "\1\335\103\0\1\336\103\0\1\337\103\0\1\340\17\0"+
    "\15\243\1\341\13\243\1\244\6\243\3\0\43\243\1\245"+
    "\1\246\2\243\1\245\1\243\1\245\1\251\17\243\1\244"+
    "\6\243\3\0\43\243\2\246\2\243\1\246\1\243\1\246"+
    "\1\251\17\243\1\244\6\243\3\0\43\243\2\342\1\243"+
    "\4\342\1\243\1\342\10\243\1\342\2\243\2\342\1\243"+
    "\1\244\1\243\1\342\4\243\3\0\40\243\1\342\2\243"+
    "\1\343\5\243\1\343\20\243\1\244\6\243\3\0\43\243"+
    "\2\251\2\243\1\251\1\243\1\251\1\243\1\252\10\243"+
    "\1\252\5\243\1\244\6\243\3\0\44\243\1\344\2\243"+
    "\1\344\1\243\1\344\2\243\1\345\15\243\1\244\6\243"+
    "\3\0\72\243\1\244\6\243\3\0\21\243\1\346\44\243"+
    "\1\347\3\243\1\244\6\243\3\0\72\243\1\244\6\243"+
    "\3\0\21\243\1\350\35\243\1\351\12\243\1\244\1\352"+
    "\5\243\3\0\72\243\1\244\6\243\3\0\21\243\1\353"+
    "\50\243\1\244\6\243\3\0\21\243\1\354\50\243\1\244"+
    "\6\243\3\0\21\243\1\355\50\243\1\244\6\243\3\0"+
    "\21\243\1\356\17\243\1\0\10\314\1\0\1\314\3\0"+
    "\7\314\1\357\3\314\1\0\6\314\12\0\3\314\22\0"+
    "\2\314\1\0\2\314\2\0\1\360\1\0\1\361\1\0"+
    "\1\360\1\362\1\360\14\0\1\363\1\362\25\0\1\361"+
    "\31\0\2\316\2\0\1\316\1\0\1\316\14\0\1\363"+
    "\57\0\1\364\2\0\2\364\1\0\1\364\2\0\1\364"+
    "\3\0\7\364\1\0\3\364\1\0\6\364\12\0\3\364"+
    "\22\0\2\364\1\0\2\364\17\0\1\365\66\0\1\323"+
    "\3\0\1\323\1\0\1\323\75\0\2\326\2\0\1\326"+
    "\1\0\1\326\107\0\1\366\106\0\1\367\117\0\1\370"+
    "\50\0\16\243\1\371\12\243\1\244\6\243\3\0\43\243"+
    "\2\344\2\243\1\344\1\243\1\344\20\243\1\244\6\243"+
    "\3\0\55\243\1\372\14\243\1\244\6\243\3\0\60\243"+
    "\1\373\11\243\1\244\6\243\3\0\72\243\1\244\1\243"+
    "\1\374\4\243\3\0\41\243\2\0\1\360\3\0\1\360"+
    "\1\0\1\360\14\0\1\363\60\0\2\375\1\0\4\375"+
    "\1\0\1\375\10\0\1\375\2\0\2\375\3\0\1\375"+
    "\47\0\1\375\2\0\1\376\5\0\1\376\74\0\10\364"+
    "\1\0\1\364\3\0\7\364\1\377\3\364\1\0\6\364"+
    "\12\0\3\364\22\0\2\364\1\0\2\364\20\0\1\u0100"+
    "\66\0\1\326\2\0\1\326\1\0\1\326\113\0\1\u0101"+
    "\117\0\1\u0102\47\0\17\243\1\u0103\11\243\1\244\6\243"+
    "\3\0\44\243\1\344\2\243\1\344\1\243\1\344\20\243"+
    "\1\244\6\243\3\0\61\243\1\u0104\10\243\1\244\6\243"+
    "\3\0\72\243\1\244\2\243\1\u0105\3\243\3\0\41\243"+
    "\2\0\2\375\1\0\4\375\1\0\1\375\10\0\1\375"+
    "\1\0\1\363\2\375\3\0\1\375\47\0\1\375\2\0"+
    "\1\376\5\0\1\376\14\0\1\363\77\0\1\u0106\103\0"+
    "\1\u0107\115\0\1\u0108\50\0\20\243\1\u0109\10\243\1\244"+
    "\6\243\3\0\62\243\1\u010a\7\243\1\244\6\243\3\0"+
    "\72\243\1\244\1\243\1\u010b\4\243\3\0\41\243\22\0"+
    "\1\u010c\103\0\1\u010d\75\0\1\u010e\67\0\21\243\1\u010f"+
    "\7\243\1\244\6\243\3\0\63\243\1\u0110\6\243\1\244"+
    "\6\243\3\0\55\243\1\u0111\14\243\1\244\6\243\3\0"+
    "\41\243\23\0\1\u0112\103\0\1\u0113\76\0\1\u0114\5\0"+
    "\1\u0115\57\0\22\243\1\u0116\6\243\1\244\6\243\3\0"+
    "\64\243\1\u0117\5\243\1\244\6\243\3\0\57\243\1\u0118"+
    "\5\243\1\u0119\4\243\1\244\6\243\3\0\41\243\14\0"+
    "\1\u011a\103\0\1\u011b\124\0\1\u011c\64\0\1\u011d\65\0"+
    "\23\243\1\u011e\5\243\1\244\6\243\3\0\55\243\1\u011f"+
    "\14\243\1\244\6\243\3\0\72\243\1\244\3\243\1\u0120"+
    "\2\243\3\0\57\243\1\u0121\12\243\1\244\6\243\3\0"+
    "\41\243\26\0\1\u0122\103\0\1\u0123\113\0\1\u0124\65\0"+
    "\1\u0125\63\0\14\243\1\u0126\14\243\1\244\6\243\3\0"+
    "\65\243\1\u0127\1\243\1\u0128\2\243\1\244\6\243\3\0"+
    "\72\243\1\244\4\243\1\u0129\1\243\3\0\61\243\1\u012a"+
    "\10\243\1\244\6\243\3\0\41\243\24\0\1\u012b\103\0"+
    "\1\u012c\100\0\1\u012d\105\0\1\u012e\60\0\24\243\1\u0127"+
    "\4\243\1\244\6\243\3\0\57\243\1\u012f\12\243\1\244"+
    "\6\243\3\0\65\243\1\u0130\4\243\1\244\6\243\3\0"+
    "\62\243\1\u0131\7\243\1\244\6\243\3\0\64\243\1\u0132"+
    "\5\243\1\244\6\243\3\0\41\243\21\0\1\u0133\103\0"+
    "\1\u0134\104\0\1\u0135\106\0\1\u0136\56\0\20\243\1\u0137"+
    "\10\243\1\244\6\243\3\0\62\243\1\u0138\7\243\1\244"+
    "\6\243\3\0\63\243\1\u0139\6\243\1\244\6\243\3\0"+
    "\66\243\1\u013a\3\243\1\244\6\243\3\0\41\243\27\0"+
    "\1\u013b\103\0\1\u013c\113\0\1\u013d\44\0\40\u0136\3\0"+
    "\41\u0136\23\243\1\u013e\5\243\1\244\6\243\3\0\70\243"+
    "\1\u013f\1\243\1\244\6\243\3\0\72\243\1\244\5\243"+
    "\1\u0140\3\0\41\243\31\u013a\1\u0141\6\u013a\3\0\41\u013a"+
    "\30\0\1\u0142\103\0\1\u0143\100\0\1\u0144\56\0\25\243"+
    "\1\215\3\243\1\244\6\243\3\0\71\243\1\u0145\1\244"+
    "\6\243\3\0\66\243\1\u0146\3\243\1\244\6\243\3\0"+
    "\41\243\15\u013a\1\u0147\13\u013a\1\u0141\6\u013a\3\0\41\u013a"+
    "\25\0\1\u0148\103\0\1\u0149\56\0\40\u0144\3\0\41\u0144"+
    "\25\243\1\u014a\3\243\1\244\6\243\3\0\41\243\31\u0146"+
    "\1\u014b\6\u0146\3\0\41\u0146\16\u013a\1\u014c\12\u013a\1\u0141"+
    "\6\u013a\3\0\41\u013a\40\u0148\3\0\41\u0148\15\u0146\1\u014d"+
    "\13\u0146\1\u014b\6\u0146\3\0\41\u0146\17\u013a\1\u014e\11\u013a"+
    "\1\u0141\6\u013a\3\0\41\u013a\16\u0146\1\u014f\12\u0146\1\u014b"+
    "\6\u0146\3\0\41\u0146\20\u013a\1\u0150\10\u013a\1\u0141\6\u013a"+
    "\3\0\41\u013a\17\u0146\1\u0151\11\u0146\1\u014b\6\u0146\3\0"+
    "\41\u0146\21\u013a\1\u0152\7\u013a\1\u0141\6\u013a\3\0\41\u013a"+
    "\20\u0146\1\u0153\10\u0146\1\u014b\6\u0146\3\0\41\u0146\22\u013a"+
    "\1\u0154\6\u013a\1\u0141\6\u013a\3\0\41\u013a\21\u0146\1\u0155"+
    "\7\u0146\1\u014b\6\u0146\3\0\41\u0146\23\u013a\1\u0156\5\u013a"+
    "\1\u0141\6\u013a\3\0\41\u013a\22\u0146\1\u0157\6\u0146\1\u014b"+
    "\6\u0146\3\0\41\u0146\14\u013a\1\u0158\14\u013a\1\u0141\6\u013a"+
    "\3\0\41\u013a\23\u0146\1\u0159\5\u0146\1\u014b\6\u0146\3\0"+
    "\41\u0146\24\u013a\1\u015a\4\u013a\1\u0141\6\u013a\3\0\41\u013a"+
    "\14\u0146\1\u015b\14\u0146\1\u014b\6\u0146\3\0\41\u0146\16\u013a"+
    "\1\u015c\12\u013a\1\u0141\6\u013a\3\0\41\u013a\24\u0146\1\u015d"+
    "\4\u0146\1\u014b\6\u0146\3\0\41\u0146\20\u013a\1\u015e\10\u013a"+
    "\1\u0141\6\u013a\3\0\41\u013a\16\u0146\1\u015f\12\u0146\1\u014b"+
    "\6\u0146\3\0\41\u0146\23\u013a\1\u0160\5\u013a\1\u0141\6\u013a"+
    "\3\0\41\u013a\20\u0146\1\u0161\10\u0146\1\u014b\6\u0146\3\0"+
    "\41\u0146\25\u013a\1\215\3\u013a\1\u0141\6\u013a\3\0\41\u013a"+
    "\23\u0146\1\u0162\5\u0146\1\u014b\6\u0146\3\0\66\u0146\1\215"+
    "\3\u0146\1\u014b\6\u0146\3\0\41\u0146";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\11\11\1\3\11\2\1\3\11\12\1\12\11"+
    "\46\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\2\1\1\11\1\1\3\11\2\1\2\11"+
    "\1\1\2\11\1\1\5\11\2\1\3\0\1\1\1\0"+
    "\7\11\3\1\1\11\1\0\1\1\2\11\4\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\7\11"+
    "\2\0\1\1\3\0\1\1\1\0\13\1\1\0\25\1"+
    "\5\0\2\11\4\1\1\0\3\11\2\0\4\11\1\0"+
    "\3\1\1\0\3\1\2\0\4\1\1\11\3\0\1\11"+
    "\13\0\1\11\66\0\1\1\3\0\1\1\6\0\1\1"+
    "\2\0\1\1\1\0\3\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Token yyval;
	private Token tokenAux;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	
	/*Atributos para interpolar*/
	private StringBuilder buffer;
	private Character sepBlock;
	private char sep;
	private int stack;
	private int sepN;
	private boolean interpola;
	private int estadoReturn;
	private int analisisTipo;
	private int flag;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		//Añadimos final de fichero
		token("EOF",0);
		tokens.add(yyval);
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}

	/**
	 * Función invocada en caso de error
	 */	
	private void error(){
		token(0);
		gestorErrores.error(Errores.CARACTER_INVALIDO, yyval, yytext());	
		yybegin(YYINITIAL);
	}

	/**
	 * Analiza el interior de una expresion delimitada
	 *
	 * @param analisisTipo Tipo de tokens a retornar
	 * @param estadoReturn Estado de cambio al terminar
	 * @param sepN Numero de delimitadores
	 * @param interpola Interpolar las variables
	 */	
	private void analizar(int analisisTipo, int estadoReturn, int sepN, Character sep, boolean interpola){
		stack=0;
		tokenAux=null;
		this.analisisTipo = analisisTipo;
		this.estadoReturn = estadoReturn;
		this.sepN = sepN;
		this.interpola = interpola;	
		if(sep==null){
			yybegin(DELIMITADOR);	
		}else{
			this.sep=sep;
			yybegin(ANALISIS);			
		}
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error();
            }
          case 108: break;
          case 2: 
            { String txt = yytext(); 
						int tipo = PalabrasReservadas.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
            }
          case 109: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 110: break;
          case 4: 
            { return token('.');
            }
          case 111: break;
          case 5: 
            { return token('+');
            }
          case 112: break;
          case 6: 
            { return token('-');
            }
          case 113: break;
          case 7: 
            { return token('<');
            }
          case 114: break;
          case 8: 
            { return token('>');
            }
          case 115: break;
          case 9: 
            { yybegin(PD);token("", Parser.COMENTARIO, true);
							tokenAux=yyval;buffer.setLength(0);
            }
          case 116: break;
          case 10: 
            { 
            }
          case 117: break;
          case 11: 
            { yybegin(VAR);return token('$');
            }
          case 118: break;
          case 12: 
            { yybegin(VAR);return token('@');
            }
          case 119: break;
          case 13: 
            { yybegin(VAR);return token('%');
            }
          case 120: break;
          case 14: 
            { return token(':');
            }
          case 121: break;
          case 15: 
            { analizar('\'', YYINITIAL, 1, '\'', false);return token('\'');
            }
          case 122: break;
          case 16: 
            { analizar('"',  YYINITIAL, 1, '"',  true); return token('"');
            }
          case 123: break;
          case 17: 
            { analizar('`',  YYINITIAL, 1, '`',  true); return token('`');
            }
          case 124: break;
          case 18: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.Q);
            }
          case 125: break;
          case 19: 
            { yybegin(FUN);return token('&');
            }
          case 126: break;
          case 20: 
            { return token('*');
            }
          case 127: break;
          case 21: 
            { return token('/');
            }
          case 128: break;
          case 22: 
            { return token('|');
            }
          case 129: break;
          case 23: 
            { return token('~');
            }
          case 130: break;
          case 24: 
            { return token('^');
            }
          case 131: break;
          case 25: 
            { return token('!');
            }
          case 132: break;
          case 26: 
            { return token('=');
            }
          case 133: break;
          case 27: 
            { return token('(');
            }
          case 134: break;
          case 28: 
            { return token(')');
            }
          case 135: break;
          case 29: 
            { return token('[');
            }
          case 136: break;
          case 30: 
            { return token(']');
            }
          case 137: break;
          case 31: 
            { return token('{');
            }
          case 138: break;
          case 32: 
            { return token('}');
            }
          case 139: break;
          case 33: 
            { return token(',');
            }
          case 140: break;
          case 34: 
            { return token('?');
            }
          case 141: break;
          case 35: 
            { return token(';');
            }
          case 142: break;
          case 36: 
            { return token('\\');
            }
          case 143: break;
          case 37: 
            { yypushback(1);yybegin(YYINITIAL);
            }
          case 144: break;
          case 38: 
            { return token(Parser.VAR);
            }
          case 145: break;
          case 39: 
            { return token('#');
            }
          case 146: break;
          case 40: 
            { return token(Parser.ID);
            }
          case 147: break;
          case 41: 
            { buffer.append(yytext());
            }
          case 148: break;
          case 42: 
            { yybegin(YYINITIAL);
							tokenAux.setValor(buffer.toString());
							if(!tokenAux.getValor().trim().isEmpty()){
								yyval=tokenAux;
								return tokenAux.getTipo();
							}
            }
          case 149: break;
          case 43: 
            { yybegin(ANALISIS);
							sepN--;
							sep=yycharat(0);
							switch(sep){
								case '(': sepBlock='('; sep=')'; break;
								case '{': sepBlock='{'; sep='}'; break;
								case '[': sepBlock='['; sep=']'; break;
								case '\'': interpola=false; break;
								default: sepBlock=null;
							}
							return token(analisisTipo);
            }
          case 150: break;
          case 44: 
            { if(yycharat(0) == sepBlock){
								yybegin(ANALISIS);
								yyval.setValor(""+sep+sepBlock); 
								return yyval.getTipo();}else{error();
							}
            }
          case 151: break;
          case 45: 
            { char c = yycharat(0);
							boolean c2 = false;
							if(yylength()>1){ 
								char cc=yycharat(1);
								if(interpola && (c == '$' || c == '@')){
									if(PalabrasReservadas.isPerlSpecialVar(cc)){
										token(0);
										gestorErrores.error(Errores.AVISO,Errores.VARIABLE_IGNORADA, yyval, yytext());
									}
								}
								yypushback(1);	
								c2 = (cc >= 'A' && cc <= 'Z') || (cc >= 'a' && cc <= 'z') || cc=='_';								
							}	
							if((c == sep && stack==0) || (interpola && c2 && (c == '$' || c == '@'))){
								if(tokenAux!=null){
									yyval=tokenAux;
									tokenAux=null;
									yypushback(1);
									yyval.setValor(buffer.toString());
									return yyval.getTipo();								
								}else if(c == sep){
									sepN--;
									token(analisisTipo);
									if(sepN>0 && sepBlock!=null){
										yybegin(DELIMITADOR_DOBLE);
									}else {
										if(sepN==0){
											yybegin(estadoReturn);
										}
										return yyval.getTipo();
									}
									
								}else{
									if(flag==0){
										flag++;
										yypushback(1);return token(Parser.EXP_SEP);
									}else{
										flag=0;
									}
									yybegin(ANALISIS_VAR);return token(c);
								}
							}else{
								if(sepBlock!=null){
									if(c == sepBlock){
										stack++;
									}else if(c == sep && stack!=0){
										stack--;							
									}								
								}
								if(tokenAux==null){
									token(Parser.TEXTO);
									tokenAux=yyval;
									buffer.setLength(0);
								}
								buffer.append(yytext());						
							}
            }
          case 152: break;
          case 46: 
            { yypushback(1);yybegin(ANALISIS);return token(Parser.EXP_SEP);
            }
          case 153: break;
          case 47: 
            { yypushback(1);yybegin(ANALISIS_ACCESO);
            }
          case 154: break;
          case 48: 
            { yybegin(ANALISIS_ACCESO_INDEX);return token(yycharat(0));
            }
          case 155: break;
          case 49: 
            { yybegin(ANALISIS);yypushback(1);error();
            }
          case 156: break;
          case 50: 
            { return token('$');
            }
          case 157: break;
          case 51: 
            { return token('@');
            }
          case 158: break;
          case 52: 
            { yybegin(ANALISIS_ACCESO);return token(yycharat(0));
            }
          case 159: break;
          case 53: 
            { analizar(Parser.SEP, REX_MOD, 2, null, true);return token(Parser.M_REX);
            }
          case 160: break;
          case 54: 
            { analizar(Parser.SEP, REX_MOD, 1, '"', true);return token(Parser.SEP);
            }
          case 161: break;
          case 55: 
            { analizar(Parser.SEP, REX_MOD, 1, '/', true);return token(Parser.SEP);
            }
          case 162: break;
          case 56: 
            { analizar(Parser.SEP, REX_MOD, 3, null, true);return token(Parser.S_REX);
            }
          case 163: break;
          case 57: 
            { analizar(Parser.SEP, REX_MOD, 3, null, false);return token(Parser.Y_REX);
            }
          case 164: break;
          case 58: 
            { yybegin(YYINITIAL);yypushback(1);
            }
          case 165: break;
          case 59: 
            { yybegin(YYINITIAL);return token(Parser.REX_MOD);
            }
          case 166: break;
          case 60: 
            { return token(Parser.DECIMAL);
            }
          case 167: break;
          case 61: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 168: break;
          case 62: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 169: break;
          case 63: 
            { return token(Parser.MAS_MAS);
            }
          case 170: break;
          case 64: 
            { return token(Parser.MAS_IGUAL);
            }
          case 171: break;
          case 65: 
            { return token(Parser.MENOS_MENOS);
            }
          case 172: break;
          case 66: 
            { return token(Parser.FLECHA);
            }
          case 173: break;
          case 67: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 174: break;
          case 68: 
            { return token(Parser.DESP_I);
            }
          case 175: break;
          case 69: 
            { return token(Parser.NUM_LE);
            }
          case 176: break;
          case 70: 
            { return token(Parser.DESP_D);
            }
          case 177: break;
          case 71: 
            { return token(Parser.NUM_GE);
            }
          case 178: break;
          case 72: 
            { return token(Parser.MOD_IGUAL);
            }
          case 179: break;
          case 73: 
            { return token(Parser.AMBITO);
            }
          case 180: break;
          case 74: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QR);
            }
          case 181: break;
          case 75: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QQ);
            }
          case 182: break;
          case 76: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.QW);
            }
          case 183: break;
          case 77: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QX);
            }
          case 184: break;
          case 78: 
            { return token(Parser.X_IGUAL);
            }
          case 185: break;
          case 79: 
            { return token(Parser.LAND);
            }
          case 186: break;
          case 80: 
            { return token(Parser.AND_IGUAL);
            }
          case 187: break;
          case 81: 
            { return token(Parser.POW);
            }
          case 188: break;
          case 82: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 189: break;
          case 83: 
            { return token(Parser.DLOR);
            }
          case 190: break;
          case 84: 
            { return token(Parser.DIV_IGUAL);
            }
          case 191: break;
          case 85: 
            { return token(Parser.LOR);
            }
          case 192: break;
          case 86: 
            { return token(Parser.OR_IGUAL);
            }
          case 193: break;
          case 87: 
            { return token(Parser.SMART_EQ);
            }
          case 194: break;
          case 88: 
            { return token(Parser.XOR_IGUAL);
            }
          case 195: break;
          case 89: 
            { yybegin(REX_T);return token(Parser.STR_NO_REX);
            }
          case 196: break;
          case 90: 
            { return token(Parser.NUM_NE);
            }
          case 197: break;
          case 91: 
            { yybegin(REX_T);return token(Parser.STR_REX);
            }
          case 198: break;
          case 92: 
            { return token(Parser.NUM_EQ);
            }
          case 199: break;
          case 93: 
            { if(tokenAux==null){
								token(Parser.TEXTO);
								tokenAux=yyval;buffer.setLength(0);
							}
							buffer.append(yytext());
            }
          case 200: break;
          case 94: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 201: break;
          case 95: 
            { return token(Parser.CMP);
            }
          case 202: break;
          case 96: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 203: break;
          case 97: 
            { return token(Parser.LAND_IGUAL);
            }
          case 204: break;
          case 98: 
            { return token(Parser.POW_IGUAL);
            }
          case 205: break;
          case 99: 
            { return token(Parser.DLOR_IGUAL);
            }
          case 206: break;
          case 100: 
            { return token(Parser.LOR_IGUAL);
            }
          case 207: break;
          case 101: 
            { String t = yytext(); 
							Integer tipo = PalabrasReservadas.buscarEtiqueta(t);
							if (tipo == null){
								buffer.append(t);
								token(t, 0);
								gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);
							}else{
								return token(t, tipo, true);
							}
            }
          case 208: break;
          case 102: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 209: break;
          case 103: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 210: break;
          case 104: 
            { return token(Parser.LINEA_JAVA);
            }
          case 211: break;
          case 105: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 212: break;
          case 106: 
            { yybegin(YYINITIAL);
            }
          case 213: break;
          case 107: 
            { yybegin(IGNORAR);
            }
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
