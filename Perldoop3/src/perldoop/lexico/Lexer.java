/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.Token;
import perldoop.sintactico.Parser;
import perldoop.modelo.simbolos.Reservados;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PD = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\113\1\16\1\21\1\21\1\20\22\0\1\113\1\67\1\22"+
    "\1\45\1\57\1\61\1\64\1\15\1\71\1\72\1\62\1\13\1\77"+
    "\1\14\1\11\1\41\1\2\1\10\6\6\2\3\1\102\1\101\1\46"+
    "\1\70\1\50\1\100\1\60\1\5\1\7\1\5\1\105\1\12\1\5"+
    "\2\1\1\106\4\1\1\107\1\110\2\1\1\112\1\103\1\104\1\111"+
    "\2\1\1\4\2\1\1\73\1\17\1\74\1\66\1\1\1\23\1\33"+
    "\1\51\1\37\1\32\1\40\1\56\1\36\1\55\1\24\1\53\1\52"+
    "\1\35\1\26\1\47\1\30\1\31\1\55\1\44\1\25\1\43\1\34"+
    "\1\54\1\55\1\27\1\42\1\55\1\75\1\63\1\76\1\65\6\0"+
    "\1\21\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\3\1\3\2\1\11\2\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\7\1\41\1\42"+
    "\1\41\2\0\1\3\3\0\1\43\1\0\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\0\1\53\6\0"+
    "\1\54\4\0\1\55\3\0\1\56\1\57\2\0\1\60"+
    "\1\61\1\0\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\5\0\2\3\1\43\1\0\2\53"+
    "\2\0\1\54\1\0\1\54\1\0\1\55\1\0\1\55"+
    "\3\0\1\103\5\0\1\104\1\105\1\0\1\106\1\107"+
    "\1\110\1\111\3\0\1\112\1\113\3\0\1\53\1\0"+
    "\1\54\1\0\1\55\1\0\1\114\2\0\1\103\2\0"+
    "\1\115\7\0\1\116\4\0\1\114\4\0\1\115\42\0"+
    "\1\117\15\0\1\120\1\121\60\0\1\122\13\0\1\122"+
    "\11\0\1\123\1\122\3\7\6\0\1\123\1\122\1\0"+
    "\2\7\1\0\1\7\1\0\1\123\1\122\2\7\1\0"+
    "\1\123\1\122\1\0\1\123\1\122\1\0\1\123\1\122"+
    "\1\0\1\123\1\122\1\0\1\123\1\122\1\0\1\123"+
    "\1\122\1\0\1\123\1\122\1\0\1\123\1\122\1\0"+
    "\1\123\1\122\1\0\1\123\1\7\1\0\1\123\1\0"+
    "\1\7\2\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\230\0\u02f8\0\u0344\0\u0390\0\u03dc"+
    "\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c"+
    "\0\u0688\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\230\0\230\0\230\0\230\0\230\0\230"+
    "\0\230\0\230\0\230\0\u0934\0\230\0\u02f8\0\u02f8\0\u0980"+
    "\0\230\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94"+
    "\0\230\0\230\0\230\0\230\0\230\0\230\0\230\0\u02ac"+
    "\0\230\0\u0be0\0\u0c2c\0\u0c78\0\u0344\0\u0cc4\0\u0d10\0\230"+
    "\0\u0d5c\0\u0390\0\u0da8\0\u0df4\0\230\0\u0e40\0\u0e8c\0\u0ed8"+
    "\0\230\0\230\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0"+
    "\0\230\0\u10ec\0\230\0\u1138\0\230\0\u1184\0\230\0\u11d0"+
    "\0\230\0\230\0\230\0\230\0\230\0\230\0\230\0\230"+
    "\0\u121c\0\u1268\0\u12b4\0\u1300\0\u134c\0\u0ab0\0\u0afc\0\u1398"+
    "\0\u13e4\0\u02ac\0\u02f8\0\u1430\0\u147c\0\u0344\0\u14c8\0\u02f8"+
    "\0\u1514\0\u0390\0\u1560\0\u02f8\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\230\0\230\0\u1858"+
    "\0\230\0\230\0\230\0\230\0\u18a4\0\u18f0\0\u193c\0\u02f8"+
    "\0\u02f8\0\u1988\0\u19d4\0\u1a20\0\u0c2c\0\u1a6c\0\u0d10\0\u1ab8"+
    "\0\u0df4\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u0ed8\0\u1c34\0\u1c80"+
    "\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0"+
    "\0\u02f8\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u15f8\0\u205c\0\u20a8"+
    "\0\u20f4\0\u2140\0\u1728\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc"+
    "\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c"+
    "\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c"+
    "\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc"+
    "\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\230\0\u2ba4\0\u2bf0"+
    "\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50"+
    "\0\u2e9c\0\u2ee8\0\u2f34\0\230\0\230\0\u2f80\0\u2fcc\0\u3018"+
    "\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278"+
    "\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c\0\u34d8"+
    "\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738"+
    "\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998"+
    "\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8"+
    "\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58"+
    "\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8"+
    "\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318"+
    "\0\u4364\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u02ac\0\u0344\0\u0390"+
    "\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4"+
    "\0\u4740\0\u0e8c\0\u0ed8\0\u478c\0\u0f24\0\u47d8\0\u4824\0\u4870"+
    "\0\u15f8\0\u1728\0\u48bc\0\u4908\0\u4954\0\u49a0\0\u49ec\0\u4a38"+
    "\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98"+
    "\0\u4ce4\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8"+
    "\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u5074\0\u50c0\0\u510c\0\u3dc0"+
    "\0\u5158\0\u51a4\0\u51f0\0\u4448\0\u523c\0\u5288\0\u47d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\4\1\6\1\4\1\6"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\14\1\13"+
    "\1\15\1\16\1\17\1\4\1\20\1\21\1\22\11\4"+
    "\1\23\1\24\1\25\1\4\1\26\1\27\1\4\1\30"+
    "\6\4\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\10\4\1\55\16\56"+
    "\1\57\1\56\1\13\25\56\1\60\45\56\16\61\1\0"+
    "\1\61\2\0\23\61\1\62\47\61\10\4\1\61\1\4"+
    "\3\61\1\0\1\61\2\0\2\61\15\4\1\61\3\4"+
    "\1\62\1\61\1\4\1\61\6\4\24\61\10\4\3\61"+
    "\1\63\1\64\1\65\1\61\1\63\1\66\1\63\1\67"+
    "\4\61\1\0\1\61\2\0\5\61\1\65\15\61\1\62"+
    "\3\61\1\66\44\61\2\6\2\61\1\6\1\61\1\6"+
    "\1\67\1\70\3\61\1\0\1\61\2\0\16\61\1\70"+
    "\4\61\1\62\50\61\2\67\2\61\1\67\1\61\1\67"+
    "\1\71\4\61\1\0\1\61\2\0\23\61\1\62\22\61"+
    "\1\72\36\61\1\73\2\61\1\0\1\61\2\0\23\61"+
    "\1\62\22\61\1\74\37\61\1\75\1\61\1\0\1\61"+
    "\2\0\23\61\1\62\2\61\1\76\17\61\1\77\23\61"+
    "\15\100\1\101\1\0\1\102\2\103\23\100\1\104\46\100"+
    "\114\0\16\105\1\0\1\106\2\107\1\110\22\105\1\111"+
    "\46\105\16\112\1\0\1\113\2\114\1\112\1\115\21\112"+
    "\1\116\46\112\1\61\10\4\1\61\1\4\3\61\1\0"+
    "\1\61\2\0\2\61\15\4\1\117\3\4\1\62\1\61"+
    "\1\4\1\61\6\4\24\61\10\4\2\61\10\4\1\61"+
    "\1\4\3\61\1\0\1\61\2\0\2\61\15\4\1\120"+
    "\3\4\1\62\1\61\1\4\1\61\6\4\24\61\10\4"+
    "\2\61\10\4\1\61\1\4\3\61\1\0\1\61\2\0"+
    "\2\61\15\4\1\61\3\4\1\62\1\61\1\4\1\61"+
    "\6\4\11\61\1\121\12\61\10\4\17\61\1\0\1\61"+
    "\2\0\23\61\1\62\22\61\1\122\24\61\10\4\1\61"+
    "\1\4\3\61\1\0\1\61\2\0\2\61\15\4\1\123"+
    "\3\4\1\62\1\61\1\4\1\61\6\4\24\61\10\4"+
    "\2\61\10\4\1\61\1\4\3\61\1\0\1\61\2\0"+
    "\2\61\15\4\1\61\2\4\1\24\1\62\1\61\1\4"+
    "\1\61\6\4\24\61\10\4\17\61\1\0\1\61\2\0"+
    "\23\61\1\62\1\124\63\61\1\0\1\61\2\0\23\61"+
    "\1\62\1\125\21\61\1\126\12\61\1\127\26\61\1\0"+
    "\1\61\2\0\23\61\1\62\2\61\1\130\17\61\1\131"+
    "\24\61\1\132\2\61\2\132\1\61\1\132\2\61\1\132"+
    "\3\61\1\0\1\61\2\0\2\61\15\132\1\61\3\132"+
    "\1\62\1\61\1\132\1\61\6\132\24\61\10\132\2\61"+
    "\1\132\2\61\2\132\1\61\1\132\2\61\1\132\3\61"+
    "\1\0\1\61\2\0\2\61\15\132\1\61\3\132\1\62"+
    "\1\61\1\132\1\61\6\132\11\61\1\133\12\61\10\132"+
    "\17\61\1\0\1\61\2\0\23\61\1\62\14\61\1\134"+
    "\5\61\1\135\41\61\1\0\1\61\2\0\23\61\1\62"+
    "\15\61\1\136\4\61\1\137\41\61\1\0\1\61\2\0"+
    "\23\61\1\62\16\61\1\140\3\61\1\141\41\61\1\0"+
    "\1\61\2\0\23\61\1\62\17\61\1\142\44\61\1\0"+
    "\1\61\2\0\23\61\1\62\22\61\1\143\41\61\1\0"+
    "\1\61\2\0\23\61\1\62\17\61\1\144\2\61\1\145"+
    "\41\61\1\0\1\61\2\0\23\61\1\62\2\61\1\51"+
    "\14\61\1\146\2\61\1\147\41\61\1\0\1\61\2\0"+
    "\23\61\1\62\34\61\1\150\11\61\2\0\1\151\1\152"+
    "\2\0\1\152\1\0\1\152\13\0\15\153\1\0\3\153"+
    "\2\0\1\153\1\0\6\153\3\154\32\0\16\61\1\0"+
    "\1\61\2\0\23\61\1\62\1\155\47\61\1\63\1\64"+
    "\2\61\1\63\1\61\1\63\1\67\4\61\1\0\1\61"+
    "\2\0\23\61\1\62\50\61\2\64\2\61\1\64\1\61"+
    "\1\64\1\67\4\61\1\0\1\61\2\0\23\61\1\62"+
    "\50\61\2\156\1\61\4\156\1\61\1\156\3\61\1\0"+
    "\1\61\2\0\10\61\2\156\3\61\2\156\4\61\1\62"+
    "\3\61\1\156\4\61\1\156\26\61\1\156\10\61\1\157"+
    "\5\61\1\157\5\61\1\0\1\61\2\0\23\61\1\62"+
    "\50\61\2\67\2\61\1\67\1\61\1\67\1\61\1\70"+
    "\3\61\1\0\1\61\2\0\16\61\1\70\4\61\1\62"+
    "\51\61\1\160\2\61\1\160\1\61\1\160\2\61\1\161"+
    "\2\61\1\0\1\61\2\0\23\61\1\62\46\61\15\100"+
    "\1\162\1\0\1\102\2\103\23\100\1\104\46\100\15\103"+
    "\1\163\1\0\1\164\74\103\15\100\1\101\1\0\1\102"+
    "\2\103\23\100\1\104\1\165\45\100\16\105\1\0\1\106"+
    "\2\107\1\166\22\105\1\111\46\105\16\107\1\0\1\167"+
    "\2\107\1\170\71\107\16\105\1\0\1\106\2\107\1\110"+
    "\22\105\1\111\1\171\45\105\16\112\1\0\1\113\2\114"+
    "\1\112\1\172\21\112\1\116\46\112\16\114\1\0\1\173"+
    "\3\114\1\174\70\114\16\112\1\0\1\113\2\114\1\112"+
    "\1\115\21\112\1\116\1\175\45\112\16\117\1\0\1\117"+
    "\2\0\17\117\1\176\3\117\1\177\46\117\16\120\1\0"+
    "\1\120\2\0\17\120\1\200\3\120\1\201\46\120\16\123"+
    "\1\0\1\123\2\0\17\123\1\202\3\123\1\203\46\123"+
    "\16\61\1\0\1\61\2\0\2\61\1\204\20\61\1\62"+
    "\5\61\1\205\56\61\1\0\1\61\2\0\23\61\1\62"+
    "\22\61\1\206\41\61\1\0\1\61\2\0\23\61\1\62"+
    "\2\61\1\207\61\61\1\0\1\61\2\0\23\61\1\62"+
    "\36\61\1\210\25\61\1\0\1\61\2\0\23\61\1\62"+
    "\22\61\1\211\24\61\10\132\1\61\1\132\3\61\1\0"+
    "\1\61\2\0\2\61\15\132\1\61\3\132\1\62\1\61"+
    "\1\132\1\61\6\132\24\61\10\132\17\61\1\0\1\61"+
    "\2\0\23\61\1\62\22\61\1\212\41\61\1\0\1\61"+
    "\2\0\23\61\1\62\22\61\1\213\41\61\1\0\1\61"+
    "\2\0\23\61\1\62\22\61\1\214\23\61\2\0\1\215"+
    "\1\0\1\216\1\0\1\215\1\217\1\215\16\0\1\216"+
    "\20\0\1\220\1\217\44\0\2\152\2\0\1\152\1\0"+
    "\1\152\37\0\1\220\67\0\15\153\1\0\3\153\2\0"+
    "\1\153\1\221\6\153\36\0\1\222\2\0\2\222\1\0"+
    "\1\222\2\0\1\222\11\0\15\222\1\0\3\222\2\0"+
    "\1\222\1\0\6\222\24\0\10\222\1\0\16\61\1\0"+
    "\1\61\2\0\2\61\1\223\20\61\1\62\50\61\2\160"+
    "\2\61\1\160\1\61\1\160\5\61\1\0\1\61\2\0"+
    "\23\61\1\62\62\61\1\224\1\61\1\0\1\61\2\0"+
    "\23\61\1\62\46\61\15\103\1\225\1\0\1\164\74\103"+
    "\15\100\1\101\1\0\1\102\2\103\2\100\1\226\20\100"+
    "\1\104\46\100\16\107\1\0\1\167\2\107\1\227\71\107"+
    "\16\105\1\0\1\106\2\107\1\110\1\105\1\230\20\105"+
    "\1\111\46\105\16\114\1\0\1\173\3\114\1\231\70\114"+
    "\16\112\1\0\1\113\2\114\1\112\1\115\1\232\20\112"+
    "\1\116\46\112\16\176\1\0\1\176\2\0\17\176\1\233"+
    "\3\176\1\234\46\176\16\117\1\0\1\117\2\0\17\117"+
    "\1\176\3\117\1\177\1\235\45\117\16\120\1\0\1\120"+
    "\2\0\2\120\13\236\1\237\1\236\1\200\3\120\1\201"+
    "\64\120\1\0\1\120\2\0\17\120\1\200\3\120\1\201"+
    "\1\240\45\120\16\202\1\0\1\202\2\0\17\202\1\241"+
    "\3\202\1\242\46\202\16\123\1\0\1\123\2\0\17\123"+
    "\1\202\3\123\1\203\1\243\45\123\16\61\1\0\1\61"+
    "\2\0\14\61\1\244\6\61\1\62\64\61\1\0\1\61"+
    "\2\0\11\61\1\245\11\61\1\62\64\61\1\0\1\61"+
    "\2\0\23\61\1\62\37\61\1\246\6\61\2\0\1\215"+
    "\3\0\1\215\1\0\1\215\37\0\1\220\45\0\2\247"+
    "\1\0\4\247\1\0\1\247\17\0\2\247\3\0\2\247"+
    "\10\0\1\247\4\0\1\247\26\0\1\247\10\0\1\250"+
    "\5\0\1\250\104\0\10\222\1\0\1\222\11\0\15\222"+
    "\1\0\3\222\2\0\1\222\1\251\6\222\24\0\10\222"+
    "\1\0\16\61\1\0\1\61\2\0\14\61\1\252\6\61"+
    "\1\62\51\61\1\160\2\61\1\160\1\61\1\160\5\61"+
    "\1\0\1\61\2\0\23\61\1\62\46\61\15\100\1\101"+
    "\1\0\1\102\2\103\14\100\1\253\6\100\1\104\46\100"+
    "\16\105\1\0\1\106\2\107\1\110\13\105\1\254\6\105"+
    "\1\111\46\105\16\112\1\0\1\113\2\114\1\112\1\115"+
    "\12\112\1\255\6\112\1\116\46\112\16\176\1\0\1\176"+
    "\2\0\2\176\13\256\1\257\1\256\1\233\3\176\1\234"+
    "\64\176\1\0\1\176\2\0\17\176\1\233\3\176\1\234"+
    "\1\260\45\176\16\117\1\0\1\117\2\0\2\117\1\261"+
    "\14\117\1\176\3\117\1\177\46\117\16\120\1\0\1\120"+
    "\2\0\14\120\1\236\2\120\1\200\3\120\1\201\64\120"+
    "\1\0\1\120\2\0\2\120\1\262\14\120\1\200\3\120"+
    "\1\201\46\120\16\202\1\0\1\202\2\0\2\202\13\263"+
    "\1\264\1\263\1\241\3\202\1\242\64\202\1\0\1\202"+
    "\2\0\17\202\1\241\3\202\1\242\1\265\45\202\16\123"+
    "\1\0\1\123\2\0\2\123\1\266\14\123\1\202\3\123"+
    "\1\203\46\123\16\61\1\0\1\61\2\0\23\61\1\62"+
    "\1\61\1\267\62\61\1\0\1\61\2\0\23\61\1\62"+
    "\6\61\1\270\51\61\1\271\3\61\1\0\1\61\2\0"+
    "\23\61\1\62\40\61\1\272\1\61\1\273\3\61\2\0"+
    "\2\247\1\0\4\247\1\0\1\247\17\0\2\247\3\0"+
    "\2\247\7\0\1\220\1\247\4\0\1\247\26\0\1\247"+
    "\10\0\1\250\5\0\1\250\37\0\1\220\43\0\16\61"+
    "\1\0\1\61\2\0\23\61\1\62\1\61\1\274\44\61"+
    "\15\100\1\101\1\0\1\102\2\103\23\100\1\104\1\100"+
    "\1\275\44\100\16\105\1\0\1\106\2\107\1\110\22\105"+
    "\1\111\1\105\1\276\44\105\16\112\1\0\1\113\2\114"+
    "\1\112\1\115\21\112\1\116\1\112\1\277\44\112\16\176"+
    "\1\0\1\176\2\0\14\176\1\256\2\176\1\233\3\176"+
    "\1\234\64\176\1\0\1\176\2\0\2\176\1\300\14\176"+
    "\1\233\3\176\1\234\46\176\16\117\1\0\1\117\2\0"+
    "\14\117\1\301\2\117\1\176\3\117\1\177\46\117\16\120"+
    "\1\0\1\120\2\0\14\120\1\302\2\120\1\200\3\120"+
    "\1\201\46\120\16\202\1\0\1\202\2\0\14\202\1\263"+
    "\2\202\1\241\3\202\1\242\64\202\1\0\1\202\2\0"+
    "\2\202\1\303\14\202\1\241\3\202\1\242\46\202\16\123"+
    "\1\0\1\123\2\0\14\123\1\304\2\123\1\202\3\123"+
    "\1\203\46\123\16\61\1\0\1\61\2\0\6\61\1\305"+
    "\14\61\1\62\64\61\1\0\1\61\2\0\11\61\1\306"+
    "\11\61\1\62\64\61\1\0\1\61\2\0\23\61\1\62"+
    "\44\61\1\307\17\61\1\0\1\61\2\0\23\61\1\62"+
    "\41\61\1\310\22\61\1\0\1\61\2\0\23\61\1\62"+
    "\43\61\1\311\20\61\1\0\1\61\2\0\6\61\1\312"+
    "\14\61\1\62\46\61\15\100\1\101\1\0\1\102\2\103"+
    "\6\100\1\313\14\100\1\104\46\100\16\105\1\0\1\106"+
    "\2\107\1\110\5\105\1\314\14\105\1\111\46\105\16\112"+
    "\1\0\1\113\2\114\1\112\1\115\4\112\1\315\14\112"+
    "\1\116\46\112\16\176\1\0\1\176\2\0\14\176\1\316"+
    "\2\176\1\233\3\176\1\234\46\176\16\117\1\0\1\117"+
    "\2\0\17\117\1\176\3\117\1\177\1\117\1\317\44\117"+
    "\16\120\1\0\1\120\2\0\17\120\1\200\3\120\1\201"+
    "\1\120\1\320\44\120\16\202\1\0\1\202\2\0\14\202"+
    "\1\321\2\202\1\241\3\202\1\242\46\202\16\123\1\0"+
    "\1\123\2\0\17\123\1\202\3\123\1\203\1\123\1\322"+
    "\44\123\16\61\1\0\1\61\2\0\22\61\1\323\1\62"+
    "\62\61\1\324\1\61\1\0\1\61\2\0\23\61\1\62"+
    "\64\61\1\0\1\61\2\0\23\61\1\62\44\61\1\325"+
    "\17\61\1\0\1\61\2\0\23\61\1\62\2\61\1\326"+
    "\61\61\1\0\1\61\2\0\23\61\1\62\36\61\1\327"+
    "\25\61\1\0\1\61\2\0\22\61\1\330\1\62\46\61"+
    "\15\100\1\101\1\0\1\102\2\103\22\100\1\331\1\104"+
    "\46\100\16\105\1\0\1\106\2\107\1\110\21\105\1\332"+
    "\1\111\46\105\16\112\1\0\1\113\2\114\1\112\1\115"+
    "\20\112\1\333\1\116\46\112\16\176\1\0\1\176\2\0"+
    "\17\176\1\233\3\176\1\234\1\176\1\334\44\176\16\117"+
    "\1\0\1\117\2\0\6\117\1\335\10\117\1\176\3\117"+
    "\1\177\46\117\16\120\1\0\1\120\2\0\6\120\1\336"+
    "\10\120\1\200\3\120\1\201\46\120\16\202\1\0\1\202"+
    "\2\0\17\202\1\241\3\202\1\242\1\202\1\337\44\202"+
    "\16\123\1\0\1\123\2\0\6\123\1\340\10\123\1\202"+
    "\3\123\1\203\46\123\16\61\1\0\1\61\2\0\16\61"+
    "\1\341\4\61\1\62\64\61\1\0\1\61\2\0\2\61"+
    "\1\342\10\61\1\343\7\61\1\62\64\61\1\0\1\61"+
    "\2\0\23\61\1\62\2\61\1\344\61\61\1\0\1\61"+
    "\2\0\23\61\1\62\2\61\1\345\61\61\1\0\1\61"+
    "\2\0\16\61\1\346\4\61\1\62\46\61\15\100\1\101"+
    "\1\0\1\102\2\103\16\100\1\347\4\100\1\104\46\100"+
    "\16\105\1\0\1\106\2\107\1\110\15\105\1\350\4\105"+
    "\1\111\46\105\16\112\1\0\1\113\2\114\1\112\1\115"+
    "\14\112\1\351\4\112\1\116\46\112\16\176\1\0\1\176"+
    "\2\0\6\176\1\352\10\176\1\233\3\176\1\234\46\176"+
    "\16\117\1\0\1\117\2\0\17\117\1\176\2\117\1\353"+
    "\1\177\46\117\16\120\1\0\1\120\2\0\17\120\1\200"+
    "\2\120\1\354\1\201\46\120\16\202\1\0\1\202\2\0"+
    "\6\202\1\355\10\202\1\241\3\202\1\242\46\202\16\123"+
    "\1\0\1\123\2\0\17\123\1\202\2\123\1\356\1\203"+
    "\46\123\14\61\1\357\1\61\1\0\1\61\2\0\23\61"+
    "\1\62\64\61\1\0\1\61\2\0\4\61\1\360\16\61"+
    "\1\62\64\61\1\0\1\61\2\0\2\61\1\361\20\61"+
    "\1\62\62\61\1\362\1\61\1\0\1\61\2\0\23\61"+
    "\1\62\46\61\14\100\1\363\1\101\1\0\1\102\2\103"+
    "\23\100\1\104\46\100\14\105\1\364\1\105\1\0\1\106"+
    "\2\107\1\110\22\105\1\111\46\105\14\112\1\365\1\112"+
    "\1\0\1\113\2\114\1\112\1\115\21\112\1\116\46\112"+
    "\16\176\1\0\1\176\2\0\17\176\1\233\2\176\1\366"+
    "\1\234\46\176\16\117\1\0\1\117\2\0\16\117\1\367"+
    "\1\176\3\117\1\177\46\117\16\120\1\0\1\120\2\0"+
    "\16\120\1\370\1\200\3\120\1\201\46\120\16\202\1\0"+
    "\1\202\2\0\17\202\1\241\2\202\1\371\1\242\46\202"+
    "\16\123\1\0\1\123\2\0\16\123\1\372\1\202\3\123"+
    "\1\203\46\123\16\61\1\0\1\61\2\0\13\61\1\373"+
    "\7\61\1\62\3\61\1\374\60\61\1\0\1\61\2\0"+
    "\7\61\1\375\13\61\1\62\64\61\1\0\1\61\2\0"+
    "\23\61\1\62\1\61\1\376\62\61\1\0\1\61\2\0"+
    "\13\61\1\373\7\61\1\62\46\61\15\100\1\101\1\0"+
    "\1\102\2\103\13\100\1\377\7\100\1\104\46\100\16\105"+
    "\1\0\1\106\2\107\1\110\12\105\1\u0100\7\105\1\111"+
    "\46\105\16\112\1\0\1\113\2\114\1\112\1\115\11\112"+
    "\1\u0101\7\112\1\116\46\112\16\176\1\0\1\176\2\0"+
    "\16\176\1\u0102\1\233\3\176\1\234\46\176\14\117\1\u0103"+
    "\1\117\1\0\1\117\2\0\17\117\1\176\3\117\1\177"+
    "\46\117\14\120\1\u0104\1\120\1\0\1\120\2\0\17\120"+
    "\1\200\3\120\1\201\46\120\16\202\1\0\1\202\2\0"+
    "\16\202\1\u0105\1\241\3\202\1\242\46\202\14\123\1\u0106"+
    "\1\123\1\0\1\123\2\0\17\123\1\202\3\123\1\203"+
    "\46\123\16\61\1\0\1\61\2\0\2\61\1\u0107\20\61"+
    "\1\62\64\61\1\0\1\61\2\0\13\61\1\u0108\7\61"+
    "\1\62\64\61\1\0\1\61\2\0\6\61\1\u0109\14\61"+
    "\1\62\64\61\1\0\1\61\2\0\16\61\1\u010a\4\61"+
    "\1\62\46\61\15\100\1\101\1\0\1\102\2\103\2\100"+
    "\1\u010b\20\100\1\104\46\100\16\105\1\0\1\106\2\107"+
    "\1\110\1\105\1\u010c\20\105\1\111\46\105\16\112\1\0"+
    "\1\113\2\114\1\112\1\115\1\u010d\20\112\1\116\46\112"+
    "\14\176\1\u010e\1\176\1\0\1\176\2\0\17\176\1\233"+
    "\3\176\1\234\46\176\16\117\1\0\1\117\2\0\13\117"+
    "\1\u010f\3\117\1\176\3\117\1\177\46\117\16\120\1\0"+
    "\1\120\2\0\13\120\1\u0110\3\120\1\200\3\120\1\201"+
    "\46\120\14\202\1\u0111\1\202\1\0\1\202\2\0\17\202"+
    "\1\241\3\202\1\242\46\202\16\123\1\0\1\123\2\0"+
    "\13\123\1\u0112\3\123\1\202\3\123\1\203\46\123\16\61"+
    "\1\0\1\61\2\0\23\61\1\62\1\61\1\u0113\62\61"+
    "\1\0\1\61\2\0\6\61\1\u0114\14\61\1\62\64\61"+
    "\1\0\1\61\2\0\22\61\1\u0115\1\62\64\61\1\0"+
    "\1\61\2\0\23\61\1\62\2\61\1\u0116\43\61\15\100"+
    "\1\101\1\0\1\102\2\103\23\100\1\104\1\100\1\u0117"+
    "\44\100\16\105\1\0\1\106\2\107\1\110\22\105\1\111"+
    "\1\105\1\u0118\44\105\16\112\1\0\1\113\2\114\1\112"+
    "\1\115\21\112\1\116\1\112\1\u0119\44\112\16\176\1\0"+
    "\1\176\2\0\13\176\1\u011a\3\176\1\233\3\176\1\234"+
    "\46\176\16\117\1\0\1\117\2\0\2\117\1\u011b\14\117"+
    "\1\176\3\117\1\177\46\117\16\120\1\0\1\120\2\0"+
    "\2\120\1\u011c\14\120\1\200\3\120\1\201\46\120\16\202"+
    "\1\0\1\202\2\0\13\202\1\u011d\3\202\1\241\3\202"+
    "\1\242\46\202\16\123\1\0\1\123\2\0\2\123\1\u011e"+
    "\14\123\1\202\3\123\1\203\46\123\16\61\1\0\1\61"+
    "\2\0\16\61\1\u011f\4\61\1\62\64\61\1\0\1\61"+
    "\2\0\15\61\1\u0120\5\61\1\62\64\61\1\0\1\61"+
    "\2\0\21\61\1\u0121\1\61\1\62\46\61\16\u0116\1\0"+
    "\1\u0116\2\0\23\u0116\1\u0122\46\u0116\15\100\1\101\1\0"+
    "\1\102\2\103\16\100\1\u0123\4\100\1\104\46\100\16\105"+
    "\1\0\1\106\2\107\1\110\15\105\1\u0124\4\105\1\111"+
    "\46\105\16\112\1\0\1\113\2\114\1\112\1\115\14\112"+
    "\1\u0125\4\112\1\116\46\112\16\176\1\0\1\176\2\0"+
    "\2\176\1\u0126\14\176\1\233\3\176\1\234\46\176\16\117"+
    "\1\0\1\117\2\0\17\117\1\176\3\117\1\177\1\117"+
    "\1\u0127\44\117\16\120\1\0\1\120\2\0\17\120\1\200"+
    "\3\120\1\201\1\120\1\u0128\44\120\16\202\1\0\1\202"+
    "\2\0\2\202\1\u0129\14\202\1\241\3\202\1\242\46\202"+
    "\16\123\1\0\1\123\2\0\17\123\1\202\3\123\1\203"+
    "\1\123\1\u012a\44\123\16\61\1\0\1\61\2\0\23\61"+
    "\1\62\2\61\1\55\61\61\1\0\1\61\2\0\23\61"+
    "\1\62\4\61\1\u012b\57\61\1\0\1\61\2\0\23\61"+
    "\1\62\2\61\1\u012c\43\61\16\u0116\1\0\1\u0116\2\0"+
    "\23\u0116\1\u0122\1\u012d\45\u0116\15\100\1\101\1\0\1\102"+
    "\2\103\23\100\1\104\2\100\1\u012e\43\100\16\105\1\0"+
    "\1\106\2\107\1\110\22\105\1\111\2\105\1\u012f\43\105"+
    "\16\112\1\0\1\113\2\114\1\112\1\115\21\112\1\116"+
    "\2\112\1\u0130\43\112\16\176\1\0\1\176\2\0\17\176"+
    "\1\233\3\176\1\234\1\176\1\u0131\44\176\16\117\1\0"+
    "\1\117\2\0\16\117\1\u0132\1\176\3\117\1\177\46\117"+
    "\16\120\1\0\1\120\2\0\16\120\1\u0133\1\200\3\120"+
    "\1\201\46\120\16\202\1\0\1\202\2\0\17\202\1\241"+
    "\3\202\1\242\1\202\1\u0134\44\202\16\123\1\0\1\123"+
    "\2\0\16\123\1\u0135\1\202\3\123\1\203\46\123\16\61"+
    "\1\0\1\61\2\0\23\61\1\62\2\61\1\u0136\43\61"+
    "\16\u012c\1\0\1\u012c\2\0\23\u012c\1\u0137\46\u012c\16\u0116"+
    "\1\0\1\u0116\2\0\2\u0116\1\u0138\20\u0116\1\u0122\46\u0116"+
    "\16\176\1\0\1\176\2\0\16\176\1\u0139\1\233\3\176"+
    "\1\234\46\176\16\117\1\0\1\117\2\0\17\117\1\176"+
    "\3\117\1\177\2\117\1\u013a\43\117\16\120\1\0\1\120"+
    "\2\0\17\120\1\200\3\120\1\201\2\120\1\u013b\43\120"+
    "\16\202\1\0\1\202\2\0\16\202\1\u013c\1\241\3\202"+
    "\1\242\46\202\16\123\1\0\1\123\2\0\17\123\1\202"+
    "\3\123\1\203\2\123\1\u013d\43\123\16\61\1\u013e\1\61"+
    "\2\0\23\61\1\62\46\61\16\u012c\1\0\1\u012c\2\0"+
    "\23\u012c\1\u0137\1\u013f\45\u012c\16\u0116\1\0\1\u0116\2\0"+
    "\14\u0116\1\u0140\6\u0116\1\u0122\46\u0116\16\176\1\0\1\176"+
    "\2\0\17\176\1\233\3\176\1\234\2\176\1\u0141\43\176"+
    "\16\202\1\0\1\202\2\0\17\202\1\241\3\202\1\242"+
    "\2\202\1\u0142\43\202\45\u013e\1\u0143\46\u013e\16\u012c\1\0"+
    "\1\u012c\2\0\2\u012c\1\u0144\20\u012c\1\u0137\46\u012c\16\u0116"+
    "\1\0\1\u0116\2\0\23\u0116\1\u0122\1\u0116\1\u0145\44\u0116"+
    "\45\u013e\1\u0143\1\u0146\45\u013e\16\u012c\1\0\1\u012c\2\0"+
    "\14\u012c\1\u0147\6\u012c\1\u0137\46\u012c\16\u0116\1\0\1\u0116"+
    "\2\0\6\u0116\1\u0148\14\u0116\1\u0122\46\u0116\24\u013e\1\u0149"+
    "\20\u013e\1\u0143\46\u013e\16\u012c\1\0\1\u012c\2\0\23\u012c"+
    "\1\u0137\1\u012c\1\u014a\44\u012c\16\u0116\1\0\1\u0116\2\0"+
    "\22\u0116\1\u014b\1\u0122\46\u0116\36\u013e\1\u014c\6\u013e\1\u0143"+
    "\46\u013e\16\u012c\1\0\1\u012c\2\0\6\u012c\1\u014d\14\u012c"+
    "\1\u0137\46\u012c\16\u0116\1\0\1\u0116\2\0\16\u0116\1\u014e"+
    "\4\u0116\1\u0122\46\u0116\45\u013e\1\u0143\1\u013e\1\u014f\44\u013e"+
    "\16\u012c\1\0\1\u012c\2\0\22\u012c\1\u0150\1\u0137\46\u012c"+
    "\14\u0116\1\u0151\1\u0116\1\0\1\u0116\2\0\23\u0116\1\u0122"+
    "\46\u0116\30\u013e\1\u0152\14\u013e\1\u0143\46\u013e\16\u012c\1\0"+
    "\1\u012c\2\0\16\u012c\1\u0153\4\u012c\1\u0137\46\u012c\16\u0116"+
    "\1\0\1\u0116\2\0\13\u0116\1\u0154\7\u0116\1\u0122\46\u0116"+
    "\44\u013e\1\u0155\1\u0143\46\u013e\14\u012c\1\u0156\1\u012c\1\0"+
    "\1\u012c\2\0\23\u012c\1\u0137\46\u012c\16\u0116\1\0\1\u0116"+
    "\2\0\2\u0116\1\u0157\20\u0116\1\u0122\46\u0116\40\u013e\1\u0158"+
    "\4\u013e\1\u0143\46\u013e\16\u012c\1\0\1\u012c\2\0\13\u012c"+
    "\1\u0159\7\u012c\1\u0137\46\u012c\16\u0116\1\0\1\u0116\2\0"+
    "\23\u0116\1\u0122\1\u0116\1\u015a\44\u0116\14\u013e\1\u015b\30\u013e"+
    "\1\u0143\46\u013e\16\u012c\1\0\1\u012c\2\0\2\u012c\1\u015c"+
    "\20\u012c\1\u0137\46\u012c\16\u0116\1\0\1\u0116\2\0\16\u0116"+
    "\1\u015d\4\u0116\1\u0122\46\u0116\45\u013e\1\u0143\3\u013e\1\u015e"+
    "\42\u013e\16\u012c\1\0\1\u012c\2\0\23\u012c\1\u0137\1\u012c"+
    "\1\u015f\44\u012c\16\u0116\1\0\1\u0116\2\0\23\u0116\1\u0122"+
    "\2\u0116\1\u0160\43\u0116\35\u013e\1\u0161\7\u013e\1\u0143\46\u013e"+
    "\16\u012c\1\0\1\u012c\2\0\16\u012c\1\u0162\4\u012c\1\u0137"+
    "\46\u012c\30\u013e\1\u0163\14\u013e\1\u0143\46\u013e\16\u012c\1\0"+
    "\1\u012c\2\0\23\u012c\1\u0137\2\u012c\1\u0164\43\u012c\37\u013e"+
    "\1\u0165\5\u013e\1\u0143\113\u013e\1\u0143\4\u013e\1\u0166\106\u013e"+
    "\1\u0143\2\u013e\1\u0167\43\u013e";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21204];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\10\1\1\11\1\1\1\11\40\1\2\11\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\7\1\1\0\1\1"+
    "\6\0\1\1\4\0\1\1\3\0\2\1\2\0\2\1"+
    "\1\0\21\1\5\0\3\1\1\0\1\1\1\11\2\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\1\11\3\0"+
    "\1\1\5\0\2\1\1\0\4\1\3\0\2\11\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\7\0\1\11\4\0\1\1\4\0"+
    "\1\1\42\0\1\1\15\0\2\1\60\0\1\1\13\0"+
    "\1\1\11\0\5\1\6\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private StringBuilder comentario;
    private Token yyval;
	private GestorErrores gestorErrores;
	private int errores;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, GestorErrores gestorErrores){
		this(in);
		errores = 0;
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene el número de errores léxicos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		return tipo;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errores++;token(0);gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);
            }
          case 84: break;
          case 2: 
            { String t = yytext(); return token(t, Reservados.buscarId(t, Parser.ID));
            }
          case 85: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 86: break;
          case 4: 
            { return token('.');
            }
          case 87: break;
          case 5: 
            { return token('+');
            }
          case 88: break;
          case 6: 
            { return token('-');
            }
          case 89: break;
          case 7: 
            { 
            }
          case 90: break;
          case 8: 
            { return token(Parser.SUELO);
            }
          case 91: break;
          case 9: 
            { return token('/');
            }
          case 92: break;
          case 10: 
            { yybegin(PD);comentario = new StringBuilder(100);
            }
          case 93: break;
          case 11: 
            { return token('<');
            }
          case 94: break;
          case 12: 
            { return token('>');
            }
          case 95: break;
          case 13: 
            { return token('$');
            }
          case 96: break;
          case 14: 
            { return token('@');
            }
          case 97: break;
          case 15: 
            { return token('%');
            }
          case 98: break;
          case 16: 
            { return token('*');
            }
          case 99: break;
          case 17: 
            { return token('|');
            }
          case 100: break;
          case 18: 
            { return token('&');
            }
          case 101: break;
          case 19: 
            { return token('~');
            }
          case 102: break;
          case 20: 
            { return token('^');
            }
          case 103: break;
          case 21: 
            { return token('!');
            }
          case 104: break;
          case 22: 
            { return token('=');
            }
          case 105: break;
          case 23: 
            { return token('(');
            }
          case 106: break;
          case 24: 
            { return token(')');
            }
          case 107: break;
          case 25: 
            { return token('[');
            }
          case 108: break;
          case 26: 
            { return token(']');
            }
          case 109: break;
          case 27: 
            { return token('{');
            }
          case 110: break;
          case 28: 
            { return token('}');
            }
          case 111: break;
          case 29: 
            { return token(',');
            }
          case 112: break;
          case 30: 
            { return token('?');
            }
          case 113: break;
          case 31: 
            { return token(';');
            }
          case 114: break;
          case 32: 
            { return token(':');
            }
          case 115: break;
          case 33: 
            { comentario.append(yytext());
            }
          case 116: break;
          case 34: 
            { yybegin(YYINITIAL);return token(comentario.toString(), Parser.COMENTARIO, true);
            }
          case 117: break;
          case 35: 
            { return token(Parser.DECIMAL);
            }
          case 118: break;
          case 36: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 119: break;
          case 37: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 120: break;
          case 38: 
            { return token(Parser.MAS_MAS);
            }
          case 121: break;
          case 39: 
            { return token(Parser.MAS_IGUAL);
            }
          case 122: break;
          case 40: 
            { return token(Parser.MENOS_MENOS);
            }
          case 123: break;
          case 41: 
            { return token(Parser.FLECHA);
            }
          case 124: break;
          case 42: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 125: break;
          case 43: 
            { return token(Parser.CADENA_SIMPLE);
            }
          case 126: break;
          case 44: 
            { return token(Parser.CADENA_DOBLE);
            }
          case 127: break;
          case 45: 
            { return token(Parser.CADENA_COMANDO);
            }
          case 128: break;
          case 46: 
            { return token(Parser.X_IGUAL);
            }
          case 129: break;
          case 47: 
            { return token(Parser.DIV_IGUAL);
            }
          case 130: break;
          case 48: 
            { return token(Parser.DESP_I);
            }
          case 131: break;
          case 49: 
            { return token(Parser.NUM_LE);
            }
          case 132: break;
          case 50: 
            { return token(Parser.DESP_D);
            }
          case 133: break;
          case 51: 
            { return token(Parser.NUM_GE);
            }
          case 134: break;
          case 52: 
            { return token(Parser.VAR);
            }
          case 135: break;
          case 53: 
            { return token(Parser.MOD_IGUAL);
            }
          case 136: break;
          case 54: 
            { return token(Parser.POW);
            }
          case 137: break;
          case 55: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 138: break;
          case 56: 
            { return token(Parser.LOR);
            }
          case 139: break;
          case 57: 
            { return token(Parser.OR_IGUAL);
            }
          case 140: break;
          case 58: 
            { return token(Parser.LAND);
            }
          case 141: break;
          case 59: 
            { return token(Parser.AND_IGUAL);
            }
          case 142: break;
          case 60: 
            { return token(Parser.SMART_EQ);
            }
          case 143: break;
          case 61: 
            { return token(Parser.XOR_IGUAL);
            }
          case 144: break;
          case 62: 
            { return token(Parser.STR_NO_REX);
            }
          case 145: break;
          case 63: 
            { return token(Parser.NUM_NE);
            }
          case 146: break;
          case 64: 
            { return token(Parser.STR_REX);
            }
          case 147: break;
          case 65: 
            { return token(Parser.NUM_EQ);
            }
          case 148: break;
          case 66: 
            { return token(Parser.CONTEXTO);
            }
          case 149: break;
          case 67: 
            { return token(Parser.M_REGEX);
            }
          case 150: break;
          case 68: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 151: break;
          case 69: 
            { return token(Parser.CMP);
            }
          case 152: break;
          case 70: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 153: break;
          case 71: 
            { return token(Parser.POW_IGUAL);
            }
          case 154: break;
          case 72: 
            { return token(Parser.LOR_IGUAL);
            }
          case 155: break;
          case 73: 
            { return token(Parser.LAND_IGUAL);
            }
          case 156: break;
          case 74: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 157: break;
          case 75: 
            { String t = yytext(); Integer tipo = Reservados.buscarEtiqueta(t);
							if (tipo == null){comentario.append(t);}else{return token(t, tipo, true);}
            }
          case 158: break;
          case 76: 
            { return token(Parser.S_REGEX);
            }
          case 159: break;
          case 77: 
            { return token(Parser.Y_REGEX);
            }
          case 160: break;
          case 78: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 161: break;
          case 79: 
            { return token(Parser.STDIN);
            }
          case 162: break;
          case 80: 
            { return token(Parser.STDERR);
            }
          case 163: break;
          case 81: 
            { return token(Parser.STDOUT);
            }
          case 164: break;
          case 82: 
            { return token(Parser.LINEA_JAVA);
            }
          case 165: break;
          case 83: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
