/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.*;
import perldoop.sintactico.Parser;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VAR = 2;
  public static final int FUN = 4;
  public static final int PD = 6;
  public static final int IGNORAR = 8;
  public static final int DELIMITADOR = 10;
  public static final int DELIMITADOR_DOBLE = 12;
  public static final int ANALISIS = 14;
  public static final int ANALISIS_VAR = 16;
  public static final int REX_T = 18;
  public static final int REX_MOD = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\15\1\17\1\17\1\16\22\0\1\111\1\63\1\50"+
    "\1\20\1\43\1\45\1\55\1\47\1\65\1\66\1\56\1\13\1\73"+
    "\1\14\1\11\1\57\1\2\1\10\6\6\2\3\1\46\1\75\1\21"+
    "\1\64\1\31\1\74\1\44\1\5\1\7\1\5\1\101\1\12\1\5"+
    "\2\1\1\102\4\1\1\103\1\104\2\1\1\106\1\77\1\100\1\105"+
    "\2\1\1\4\2\1\1\67\1\76\1\70\1\62\1\1\1\51\1\36"+
    "\1\32\1\33\1\113\1\27\1\113\1\23\1\112\1\22\1\35\1\34"+
    "\1\30\1\40\1\24\1\25\1\41\1\52\1\26\1\107\1\42\1\112"+
    "\1\37\1\53\1\54\1\110\1\112\1\71\1\60\1\72\1\61\6\0"+
    "\1\17\32\0\1\111\u15df\0\1\111\u097f\0\13\111\35\0\1\17\1\17"+
    "\5\0\1\111\57\0\1\111\u0fa0\0\1\111\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\7\1\45"+
    "\1\46\1\47\1\45\1\50\1\51\1\52\1\51\1\7"+
    "\1\53\1\54\2\55\2\56\1\1\1\57\1\1\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\2\0\1\3\3\0"+
    "\1\66\1\0\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\0\1\76\1\77\1\0\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\103\5\0\1\127\1\0"+
    "\2\3\1\66\3\0\1\130\1\131\1\0\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\3\0\1\140\11\0\1\141"+
    "\23\0\1\142\6\0\1\143\1\144\24\0\1\145\4\0"+
    "\1\145\2\0\1\146\1\145\1\147\1\150\1\146\1\145"+
    "\1\146\1\145\1\146\1\145\1\146\1\145\1\146\1\145"+
    "\1\146\1\145\1\146\1\145\1\146\1\145\1\146\1\145"+
    "\1\146\1\145\1\146\1\145\1\146\1\7\1\146\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0344\0\u0344"+
    "\0\u0688\0\u06d4\0\u0344\0\u0344\0\u0344\0\u0720\0\u076c\0\u07b8"+
    "\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0344"+
    "\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344"+
    "\0\u0344\0\u0344\0\u0558\0\u0a18\0\u0558\0\u0a64\0\u0ab0\0\u0558"+
    "\0\u0558\0\u0afc\0\u0b48\0\u0558\0\u0558\0\u0558\0\u0b94\0\u0558"+
    "\0\u0a64\0\u0558\0\u0558\0\u0be0\0\u0558\0\u0558\0\u0558\0\u0558"+
    "\0\u0558\0\u0c2c\0\u0344\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8"+
    "\0\u0df4\0\u0e40\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344\0\u0344"+
    "\0\u0344\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u0344\0\u0344"+
    "\0\u0344\0\u0390\0\u0390\0\u0390\0\u0390\0\u0344\0\u1008\0\u0344"+
    "\0\u1054\0\u0344\0\u10a0\0\u0344\0\u10ec\0\u0344\0\u0344\0\u0344"+
    "\0\u0344\0\u0344\0\u0344\0\u0344\0\u0558\0\u1138\0\u1184\0\u11d0"+
    "\0\u121c\0\u1268\0\u0558\0\u12b4\0\u0d5c\0\u0da8\0\u1300\0\u134c"+
    "\0\u1398\0\u13e4\0\u0344\0\u0344\0\u1430\0\u0344\0\u0344\0\u0344"+
    "\0\u0344\0\u0344\0\u0558\0\u147c\0\u14c8\0\u1514\0\u0558\0\u1560"+
    "\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0"+
    "\0\u0558\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4"+
    "\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u0344\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u0344\0\u0344\0\u1f78\0\u1fc4\0\u2010"+
    "\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270"+
    "\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0"+
    "\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730"+
    "\0\u277c\0\u27c8\0\u2814\0\u2860\0\u0344\0\u28ac\0\u28f8\0\u2944"+
    "\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4"+
    "\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04"+
    "\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2568\0\u2f80\0\u27c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\2\15\1\17\1\15\1\17"+
    "\1\20\1\15\1\21\1\22\3\23\1\24\1\25\7\15"+
    "\1\26\11\15\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\15\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\12\15\1\62"+
    "\2\15\1\63\1\64\2\63\2\64\1\63\1\64\2\63"+
    "\1\64\5\63\1\65\1\63\7\64\1\63\11\64\3\63"+
    "\1\66\3\63\3\64\22\63\12\64\1\63\2\64\1\63"+
    "\1\67\2\63\2\67\1\63\1\67\2\63\1\67\7\63"+
    "\7\67\1\63\11\67\3\63\1\66\3\63\3\67\22\63"+
    "\12\67\1\63\2\67\15\70\1\71\1\23\2\70\1\72"+
    "\72\70\21\23\1\73\72\23\15\74\3\23\71\74\1\23"+
    "\2\74\114\75\76\76\1\77\15\76\1\100\1\64\2\100"+
    "\2\64\1\100\1\64\2\100\1\64\5\100\1\65\1\100"+
    "\7\64\1\100\11\64\3\100\1\101\3\100\3\64\22\100"+
    "\12\64\1\100\2\64\15\102\3\23\20\102\1\103\1\102"+
    "\1\104\5\102\1\105\6\102\1\106\27\102\1\107\1\110"+
    "\1\23\2\102\22\111\7\112\1\111\11\112\7\111\3\112"+
    "\32\111\2\112\1\111\2\112\15\113\3\0\1\114\74\113"+
    "\10\15\1\113\1\15\2\113\3\0\1\114\1\113\7\15"+
    "\1\113\11\15\7\113\3\15\22\113\12\15\1\113\2\15"+
    "\2\113\1\115\1\116\1\117\1\113\1\115\1\120\1\115"+
    "\1\121\3\113\3\0\1\114\11\113\1\120\21\113\1\117"+
    "\41\113\2\17\2\113\1\17\1\113\1\17\1\121\1\122"+
    "\2\113\3\0\1\114\6\113\1\122\66\113\2\121\2\113"+
    "\1\121\1\113\1\121\1\123\3\113\3\0\1\114\43\113"+
    "\1\124\42\113\1\125\1\113\3\0\1\114\43\113\1\126"+
    "\43\113\1\127\3\0\1\114\10\113\1\130\32\113\1\131"+
    "\27\113\114\0\15\113\3\0\1\114\1\132\107\113\3\0"+
    "\1\114\1\133\42\113\1\134\12\113\1\135\31\113\3\0"+
    "\1\114\10\113\1\136\32\113\1\137\44\113\3\0\1\114"+
    "\43\113\1\140\44\113\3\0\1\114\25\113\1\141\46\113"+
    "\10\15\1\113\1\15\2\113\3\0\1\114\1\113\4\15"+
    "\1\142\2\15\1\113\11\15\7\113\1\143\1\144\1\145"+
    "\22\113\12\15\1\113\2\15\1\113\10\15\1\113\1\15"+
    "\2\113\3\0\1\114\1\113\7\15\1\113\11\15\7\113"+
    "\3\15\7\113\1\146\12\113\12\15\1\113\2\15\15\113"+
    "\3\0\1\114\34\113\1\147\6\113\1\150\44\113\3\0"+
    "\1\114\35\113\1\151\5\113\1\152\44\113\3\0\1\114"+
    "\36\113\1\153\4\113\1\154\44\113\3\0\1\114\37\113"+
    "\1\155\3\113\1\156\44\113\3\0\1\114\40\113\1\157"+
    "\47\113\3\0\1\114\43\113\1\160\44\113\3\0\1\114"+
    "\40\113\1\161\2\113\1\162\44\113\3\0\1\114\10\113"+
    "\1\56\27\113\1\163\2\113\1\164\27\113\1\0\10\64"+
    "\1\0\1\64\7\0\7\64\1\0\11\64\7\0\3\64"+
    "\22\0\12\64\1\0\2\64\46\0\1\165\46\0\10\67"+
    "\1\0\1\67\7\0\7\67\1\0\11\67\7\0\3\67"+
    "\22\0\12\67\1\0\2\67\1\0\1\166\1\167\1\170"+
    "\2\166\1\170\1\166\1\170\1\0\1\166\7\0\7\166"+
    "\1\0\11\166\3\171\4\0\3\166\22\0\12\166\1\0"+
    "\2\166\22\0\1\172\71\0\114\173\26\0\1\110\107\0"+
    "\7\112\1\0\11\112\7\0\3\112\32\0\2\112\1\0"+
    "\2\112\15\113\3\0\1\114\1\174\74\113\1\115\1\116"+
    "\2\113\1\115\1\113\1\115\1\121\3\113\3\0\1\114"+
    "\75\113\2\116\2\113\1\116\1\113\1\116\1\121\3\113"+
    "\3\0\1\114\75\113\2\175\1\113\4\175\1\113\1\175"+
    "\2\113\3\0\1\114\6\113\1\175\2\113\2\175\2\113"+
    "\1\175\42\113\1\175\11\113\1\175\2\113\1\176\5\113"+
    "\1\176\4\113\3\0\1\114\75\113\2\121\2\113\1\121"+
    "\1\113\1\121\1\113\1\122\2\113\3\0\1\114\6\113"+
    "\1\122\67\113\1\177\2\113\1\177\1\113\1\177\2\113"+
    "\1\200\1\113\3\0\1\114\110\113\3\0\1\114\1\113"+
    "\1\201\12\113\1\202\73\113\3\0\1\114\43\113\1\203"+
    "\44\113\3\0\1\114\10\113\1\204\77\113\3\0\1\114"+
    "\57\113\1\205\30\113\3\0\1\114\43\113\1\206\44\113"+
    "\3\0\1\114\43\113\1\207\44\113\3\0\1\114\43\113"+
    "\1\210\44\113\3\0\1\114\43\113\1\211\44\113\3\0"+
    "\1\114\43\113\1\212\27\113\1\0\10\166\1\0\1\166"+
    "\7\0\7\166\1\213\11\166\7\0\3\166\22\0\12\166"+
    "\1\0\2\166\2\0\1\214\1\0\1\215\1\0\1\214"+
    "\1\216\1\214\20\0\1\217\1\216\21\0\1\215\41\0"+
    "\2\170\2\0\1\170\1\0\1\170\20\0\1\217\63\0"+
    "\1\220\2\0\2\220\1\0\1\220\2\0\1\220\7\0"+
    "\7\220\1\0\11\220\7\0\3\220\22\0\12\220\1\0"+
    "\2\220\23\0\1\221\70\0\15\113\3\0\1\114\1\113"+
    "\1\222\73\113\2\177\2\113\1\177\1\113\1\177\4\113"+
    "\3\0\1\114\107\113\1\223\3\0\1\114\110\113\3\0"+
    "\1\114\2\113\1\224\105\113\3\0\1\114\15\113\1\225"+
    "\72\113\3\0\1\114\60\113\1\226\12\113\2\0\1\214"+
    "\3\0\1\214\1\0\1\214\20\0\1\217\64\0\2\227"+
    "\1\0\4\227\1\0\1\227\14\0\1\227\2\0\2\227"+
    "\2\0\1\227\42\0\1\227\11\0\1\227\2\0\1\230"+
    "\5\0\1\230\104\0\10\220\1\0\1\220\7\0\7\220"+
    "\1\231\11\220\7\0\3\220\22\0\12\220\1\0\2\220"+
    "\24\0\1\232\67\0\15\113\3\0\1\114\2\113\1\233"+
    "\73\113\1\177\2\113\1\177\1\113\1\177\4\113\3\0"+
    "\1\114\110\113\3\0\1\114\3\113\1\234\104\113\3\0"+
    "\1\114\16\113\1\235\66\113\1\236\2\113\3\0\1\114"+
    "\61\113\1\237\1\113\1\240\7\113\2\0\2\227\1\0"+
    "\4\227\1\0\1\227\14\0\1\227\1\0\1\217\2\227"+
    "\2\0\1\227\42\0\1\227\11\0\1\227\2\0\1\230"+
    "\5\0\1\230\20\0\1\217\107\0\1\241\66\0\15\113"+
    "\3\0\1\114\3\113\1\242\104\113\3\0\1\114\4\113"+
    "\1\243\103\113\3\0\1\114\15\113\1\244\72\113\3\0"+
    "\1\114\65\113\1\245\22\113\3\0\1\114\62\113\1\246"+
    "\25\113\3\0\1\114\64\113\1\247\6\113\26\0\1\250"+
    "\65\0\15\113\3\0\1\114\4\113\1\251\103\113\3\0"+
    "\1\114\5\113\1\252\101\113\1\253\3\0\1\114\110\113"+
    "\3\0\1\114\65\113\1\254\22\113\3\0\1\114\10\113"+
    "\1\255\77\113\3\0\1\114\57\113\1\256\13\113\27\0"+
    "\1\257\64\0\15\113\3\0\1\114\5\113\1\260\102\113"+
    "\3\0\1\114\6\113\1\261\101\113\3\0\1\114\1\113"+
    "\1\262\5\113\1\263\100\113\3\0\1\114\10\113\1\264"+
    "\77\113\3\0\1\114\10\113\1\265\62\113\14\0\1\266"+
    "\77\0\15\113\3\0\1\114\6\113\1\267\100\113\1\270"+
    "\3\0\1\114\110\113\3\0\1\114\17\113\1\271\70\113"+
    "\3\0\1\114\1\113\1\272\71\113\32\0\1\273\61\0"+
    "\14\113\1\274\3\0\1\114\110\113\3\0\1\114\7\113"+
    "\1\275\1\113\1\276\76\113\3\0\1\114\20\113\1\277"+
    "\67\113\3\0\1\114\3\113\1\300\67\113\30\0\1\301"+
    "\63\0\15\113\3\0\1\114\7\113\1\275\100\113\3\0"+
    "\1\114\1\113\1\302\106\113\3\0\1\114\7\113\1\303"+
    "\100\113\3\0\1\114\4\113\1\304\103\113\3\0\1\114"+
    "\6\113\1\305\64\113\25\0\1\306\66\0\15\113\3\0"+
    "\1\114\3\113\1\307\104\113\3\0\1\114\4\113\1\310"+
    "\103\113\3\0\1\114\5\113\1\311\102\113\3\0\1\114"+
    "\10\113\1\312\62\113\33\0\1\313\60\0\15\113\3\0"+
    "\1\114\6\113\1\314\101\113\3\0\1\114\12\113\1\315"+
    "\75\113\3\0\1\114\21\113\1\316\51\113\15\312\3\0"+
    "\1\317\73\312\34\0\1\320\57\0\15\113\3\0\1\114"+
    "\10\113\1\62\77\113\3\0\1\114\13\113\1\321\74\113"+
    "\3\0\1\114\10\113\1\322\62\113\15\312\3\0\1\317"+
    "\1\323\72\312\31\0\1\324\62\0\15\113\3\0\1\114"+
    "\10\113\1\325\62\113\15\322\3\0\1\326\73\322\15\312"+
    "\3\0\1\317\1\312\1\327\71\312\15\324\3\0\74\324"+
    "\15\322\3\0\1\326\1\330\72\322\15\312\3\0\1\317"+
    "\2\312\1\331\70\312\15\322\3\0\1\326\1\322\1\332"+
    "\71\322\15\312\3\0\1\317\3\312\1\333\67\312\15\322"+
    "\3\0\1\326\2\322\1\334\70\322\15\312\3\0\1\317"+
    "\4\312\1\335\66\312\15\322\3\0\1\326\3\322\1\336"+
    "\67\322\15\312\3\0\1\317\5\312\1\337\65\312\15\322"+
    "\3\0\1\326\4\322\1\340\66\322\15\312\3\0\1\317"+
    "\6\312\1\341\64\312\15\322\3\0\1\326\5\322\1\342"+
    "\65\322\14\312\1\343\3\0\1\317\73\312\15\322\3\0"+
    "\1\326\6\322\1\344\64\322\15\312\3\0\1\317\7\312"+
    "\1\345\63\312\14\322\1\346\3\0\1\326\73\322\15\312"+
    "\3\0\1\317\1\312\1\347\71\312\15\322\3\0\1\326"+
    "\7\322\1\350\63\322\15\312\3\0\1\317\3\312\1\351"+
    "\67\312\15\322\3\0\1\326\1\322\1\352\71\322\15\312"+
    "\3\0\1\317\6\312\1\353\64\312\15\322\3\0\1\326"+
    "\3\322\1\354\67\322\15\312\3\0\1\317\10\312\1\355"+
    "\62\312\15\322\3\0\1\326\6\322\1\356\101\322\3\0"+
    "\1\326\10\322\1\357\62\322";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12236];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\7\1\1\11\37\1\1\11\1\1\1\11\2\1"+
    "\2\11\2\1\3\11\1\1\1\11\1\1\2\11\1\1"+
    "\5\11\1\1\2\0\1\1\3\0\1\1\1\0\7\1"+
    "\1\0\2\1\1\0\27\1\1\11\5\0\1\11\1\0"+
    "\3\1\3\0\2\1\1\0\5\1\1\11\3\0\1\11"+
    "\11\0\1\11\23\0\1\1\6\0\2\1\24\0\1\1"+
    "\4\0\1\1\2\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Token yyval;
	private Token tokenAux;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;
	
	/*Atributos para interpolar*/
	private StringBuilder buffer;
	private Character sepBlock;
	private char sep;
	private int stack;
	private int rexN;
	private boolean interpola;
	private int estadoReturn;
	private int analisisTipo;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		errores = 0;
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores léxicos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		//Añadimos final de fichero
		token("EOF",0);
		tokens.add(yyval);
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}

	/**
	 * Función invocada en caso de error
	 */	
	private void error(){
		errores++;
		token(0);
		gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);	
		yybegin(YYINITIAL);
	}

	/**
	 * Analiza el interior de una expresion delimitada
	 *
	 * @param analisisTipo Tipo de tokens a retornar
	 * @param estadoReturn Estado de cambio al terminar
	 * @param rexN Numero de delimitadores
	 * @param interpola Interpolar las variables
	 */	
	private void analizar(int analisisTipo, int estadoReturn, int rexN, Character sep, boolean interpola){
		stack=0;
		tokenAux=null;
		this.analisisTipo = analisisTipo;
		this.estadoReturn = estadoReturn;
		this.rexN = rexN;
		this.interpola = interpola;	
		if(sep==null){
			yybegin(DELIMITADOR);	
		}else{
			this.sep=sep;
			yybegin(ANALISIS);			
		}
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error();
            }
          case 105: break;
          case 2: 
            { String txt = yytext(); 
						int tipo = Reservados.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
            }
          case 106: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 107: break;
          case 4: 
            { return token('.');
            }
          case 108: break;
          case 5: 
            { return token('+');
            }
          case 109: break;
          case 6: 
            { return token('-');
            }
          case 110: break;
          case 7: 
            { 
            }
          case 111: break;
          case 8: 
            { yybegin(PD);token("", Parser.COMENTARIO, true);
						tokenAux=yyval;buffer.setLength(0);
            }
          case 112: break;
          case 9: 
            { return token('<');
            }
          case 113: break;
          case 10: 
            { return token('>');
            }
          case 114: break;
          case 11: 
            { yybegin(VAR);return token('$');
            }
          case 115: break;
          case 12: 
            { yybegin(VAR);return token('@');
            }
          case 116: break;
          case 13: 
            { yybegin(VAR);return token('%');
            }
          case 117: break;
          case 14: 
            { return token(':');
            }
          case 118: break;
          case 15: 
            { analizar('\'', YYINITIAL, 1, '\'', false);return token('\'');
            }
          case 119: break;
          case 16: 
            { analizar('"',  YYINITIAL, 1, '"',  true); return token('"');
            }
          case 120: break;
          case 17: 
            { analizar('`',  YYINITIAL, 1, '`',  true); return token('`');
            }
          case 121: break;
          case 18: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.Q);
            }
          case 122: break;
          case 19: 
            { yybegin(FUN);return token('&');
            }
          case 123: break;
          case 20: 
            { return token('*');
            }
          case 124: break;
          case 21: 
            { return token('/');
            }
          case 125: break;
          case 22: 
            { return token('|');
            }
          case 126: break;
          case 23: 
            { return token('~');
            }
          case 127: break;
          case 24: 
            { return token('^');
            }
          case 128: break;
          case 25: 
            { return token('!');
            }
          case 129: break;
          case 26: 
            { return token('=');
            }
          case 130: break;
          case 27: 
            { return token('(');
            }
          case 131: break;
          case 28: 
            { return token(')');
            }
          case 132: break;
          case 29: 
            { return token('[');
            }
          case 133: break;
          case 30: 
            { return token(']');
            }
          case 134: break;
          case 31: 
            { return token('{');
            }
          case 135: break;
          case 32: 
            { return token('}');
            }
          case 136: break;
          case 33: 
            { return token(',');
            }
          case 137: break;
          case 34: 
            { return token('?');
            }
          case 138: break;
          case 35: 
            { return token(';');
            }
          case 139: break;
          case 36: 
            { return token('\\');
            }
          case 140: break;
          case 37: 
            { yypushback(1);yybegin(YYINITIAL);
            }
          case 141: break;
          case 38: 
            { return token(Parser.VAR);
            }
          case 142: break;
          case 39: 
            { return token('#');
            }
          case 143: break;
          case 40: 
            { return token(Parser.ID);
            }
          case 144: break;
          case 41: 
            { buffer.append(yytext());
            }
          case 145: break;
          case 42: 
            { yybegin(YYINITIAL);
							tokenAux.setValor(buffer.toString());
							if(!tokenAux.getValor().trim().isEmpty()){
								yyval=tokenAux;
								return tokenAux.getTipo();
							}
            }
          case 146: break;
          case 43: 
            { yybegin(ANALISIS);
							rexN--;
							sep=yycharat(0);
							switch(sep){
								case '(': sepBlock='('; sep=')'; break;
								case '{': sepBlock='{'; sep='}'; break;
								case '[': sepBlock='['; sep=']'; break;
								case '\'': interpola=false; break;
								default: sepBlock=null;
							}
							return token(analisisTipo);
            }
          case 147: break;
          case 44: 
            { if(yycharat(0) == sepBlock){
								yybegin(ANALISIS);
								yyval.setValor(""+sep+sepBlock); 
								return yyval.getTipo();}else{error();
							}
            }
          case 148: break;
          case 45: 
            { char c = yycharat(0);
							if((c == sep && stack==0) || (interpola && (c == '$' || c == '@' || c == '%'))){
								if(tokenAux!=null){
									yyval=tokenAux;
									tokenAux=null;
									yypushback(1);
									yyval.setValor(buffer.toString());
									return yyval.getTipo();								
								}else if(c == sep){
									rexN--;
									token(analisisTipo);
									if(rexN>0 && sepBlock!=null){
										yybegin(DELIMITADOR_DOBLE);
									}else if(rexN==0){
										yybegin(estadoReturn);
										return yyval.getTipo();
									}
								}else{
									yybegin(ANALISIS_VAR);return token(c);
								}
							}else{
								if(sepBlock!=null){
									if(c == sepBlock){
										stack++;
									}else if(c == sep && stack!=0){
										stack--;							
									}								
								}
								if(tokenAux==null){
									token(Parser.TEXTO);
									tokenAux=yyval;
									buffer.setLength(0);
								}
								buffer.append(yytext());						
							}
            }
          case 149: break;
          case 46: 
            { yypushback(1);yybegin(ANALISIS);
            }
          case 150: break;
          case 47: 
            { analizar(Parser.SEP, REX_MOD, 2, null, true);return token(Parser.M_REX);
            }
          case 151: break;
          case 48: 
            { analizar(Parser.SEP, REX_MOD, 1, '"', true);return token(Parser.SEP);
            }
          case 152: break;
          case 49: 
            { analizar(Parser.SEP, REX_MOD, 1, '/', true);return token(Parser.SEP);
            }
          case 153: break;
          case 50: 
            { analizar(Parser.SEP, REX_MOD, 3, null, true);return token(Parser.S_REX);
            }
          case 154: break;
          case 51: 
            { analizar(Parser.SEP, REX_MOD, 3, null, false);return token(Parser.Y_REX);
            }
          case 155: break;
          case 52: 
            { yybegin(YYINITIAL);yypushback(1);
            }
          case 156: break;
          case 53: 
            { yybegin(YYINITIAL);return token(Parser.REX_MOD);
            }
          case 157: break;
          case 54: 
            { return token(Parser.DECIMAL);
            }
          case 158: break;
          case 55: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 159: break;
          case 56: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 160: break;
          case 57: 
            { return token(Parser.MAS_MAS);
            }
          case 161: break;
          case 58: 
            { return token(Parser.MAS_IGUAL);
            }
          case 162: break;
          case 59: 
            { return token(Parser.MENOS_MENOS);
            }
          case 163: break;
          case 60: 
            { return token(Parser.FLECHA);
            }
          case 164: break;
          case 61: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 165: break;
          case 62: 
            { return token(Parser.DESP_I);
            }
          case 166: break;
          case 63: 
            { return token(Parser.NUM_LE);
            }
          case 167: break;
          case 64: 
            { return token(Parser.DESP_D);
            }
          case 168: break;
          case 65: 
            { return token(Parser.NUM_GE);
            }
          case 169: break;
          case 66: 
            { return token(Parser.MOD_IGUAL);
            }
          case 170: break;
          case 67: 
            { return token(Parser.AMBITO);
            }
          case 171: break;
          case 68: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QR);
            }
          case 172: break;
          case 69: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QQ);
            }
          case 173: break;
          case 70: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.QW);
            }
          case 174: break;
          case 71: 
            { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QX);
            }
          case 175: break;
          case 72: 
            { return token(Parser.X_IGUAL);
            }
          case 176: break;
          case 73: 
            { return token(Parser.LAND);
            }
          case 177: break;
          case 74: 
            { return token(Parser.AND_IGUAL);
            }
          case 178: break;
          case 75: 
            { return token(Parser.POW);
            }
          case 179: break;
          case 76: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 180: break;
          case 77: 
            { return token(Parser.DLOR);
            }
          case 181: break;
          case 78: 
            { return token(Parser.DIV_IGUAL);
            }
          case 182: break;
          case 79: 
            { return token(Parser.LOR);
            }
          case 183: break;
          case 80: 
            { return token(Parser.OR_IGUAL);
            }
          case 184: break;
          case 81: 
            { return token(Parser.SMART_EQ);
            }
          case 185: break;
          case 82: 
            { return token(Parser.XOR_IGUAL);
            }
          case 186: break;
          case 83: 
            { yybegin(REX_T);return token(Parser.STR_NO_REX);
            }
          case 187: break;
          case 84: 
            { return token(Parser.NUM_NE);
            }
          case 188: break;
          case 85: 
            { yybegin(REX_T);return token(Parser.STR_REX);
            }
          case 189: break;
          case 86: 
            { return token(Parser.NUM_EQ);
            }
          case 190: break;
          case 87: 
            { if(tokenAux==null){
								token(Parser.TEXTO);
								tokenAux=yyval;buffer.setLength(0);
							}
							buffer.append(yytext());
            }
          case 191: break;
          case 88: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 192: break;
          case 89: 
            { return token(Parser.CMP);
            }
          case 193: break;
          case 90: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 194: break;
          case 91: 
            { return token(Parser.LAND_IGUAL);
            }
          case 195: break;
          case 92: 
            { return token(Parser.POW_IGUAL);
            }
          case 196: break;
          case 93: 
            { return token(Parser.DLOR_IGUAL);
            }
          case 197: break;
          case 94: 
            { return token(Parser.LOR_IGUAL);
            }
          case 198: break;
          case 95: 
            { String t = yytext(); 
							Integer tipo = Reservados.buscarEtiqueta(t);
							if (tipo == null){
								buffer.append(t);
								token(t, 0);
								gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);
							}else{
								return token(t, tipo, true);
							}
            }
          case 199: break;
          case 96: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 200: break;
          case 97: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 201: break;
          case 98: 
            { return token(Parser.STDIN);
            }
          case 202: break;
          case 99: 
            { return token(Parser.STDERR);
            }
          case 203: break;
          case 100: 
            { return token(Parser.STDOUT);
            }
          case 204: break;
          case 101: 
            { return token(Parser.LINEA_JAVA);
            }
          case 205: break;
          case 102: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 206: break;
          case 103: 
            { yybegin(YYINITIAL);
            }
          case 207: break;
          case 104: 
            { yybegin(IGNORAR);
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
