/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.*;
import perldoop.sintactico.Parser;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VAR = 2;
  public static final int FUN = 4;
  public static final int PD = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\16\1\21\1\21\1\20\22\0\1\111\1\66\1\22"+
    "\1\45\1\55\1\57\1\61\1\15\1\70\1\71\1\62\1\13\1\76"+
    "\1\14\1\11\1\41\1\2\1\10\6\6\2\3\1\60\1\100\1\46"+
    "\1\67\1\50\1\77\1\56\1\5\1\7\1\5\1\103\1\12\1\5"+
    "\2\1\1\104\4\1\1\105\1\106\2\1\1\110\1\101\1\102\1\107"+
    "\2\1\1\4\2\1\1\72\1\17\1\73\1\65\1\1\1\23\1\33"+
    "\1\51\1\37\1\32\1\40\1\5\1\36\1\1\1\24\1\53\1\52"+
    "\1\35\1\26\1\47\1\30\1\31\1\1\1\44\1\25\1\43\1\34"+
    "\1\54\1\1\1\27\1\42\1\1\1\74\1\63\1\75\1\64\6\0"+
    "\1\21\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\3\1\3\2\1\11\2\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\7\1\41\1\42"+
    "\1\43\1\41\1\44\1\45\1\46\1\45\2\0\1\3"+
    "\3\0\1\47\1\0\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\57\6\0\1\60\4\0\1\61"+
    "\3\0\1\62\1\63\2\0\1\64\1\65\1\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\71"+
    "\5\0\2\3\1\47\1\0\2\57\2\0\1\60\1\0"+
    "\1\60\1\0\1\61\1\0\1\61\3\0\1\106\5\0"+
    "\1\107\1\110\1\0\1\111\1\112\1\113\1\114\1\115"+
    "\3\0\1\116\3\0\1\57\1\0\1\60\1\0\1\61"+
    "\1\0\1\117\2\0\1\106\2\0\1\120\7\0\1\121"+
    "\4\0\1\117\4\0\1\120\42\0\1\122\15\0\1\123"+
    "\1\124\60\0\1\125\13\0\1\125\11\0\1\126\1\125"+
    "\3\7\6\0\1\126\1\125\1\0\2\7\1\0\1\7"+
    "\1\0\1\126\1\125\2\7\1\0\1\126\1\125\1\0"+
    "\1\126\1\125\1\0\1\126\1\125\1\0\1\126\1\125"+
    "\1\0\1\126\1\125\1\0\1\126\1\125\1\0\1\126"+
    "\1\125\1\0\1\126\1\125\1\0\1\126\1\125\1\0"+
    "\1\126\1\7\1\0\1\126\1\0\1\7\2\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u0128\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u0128\0\u0128\0\u06f0\0\u073a\0\u0784\0\u07ce"+
    "\0\u0818\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u0128\0\u0128\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0378"+
    "\0\u098a\0\u0378\0\u09d4\0\u0a1e\0\u0378\0\u0378\0\u0a68\0\u0128"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u032e\0\u0128"+
    "\0\u0cb8\0\u0d02\0\u0d4c\0\u03c2\0\u0d96\0\u0de0\0\u0128\0\u0e2a"+
    "\0\u040c\0\u0e74\0\u0ebe\0\u0128\0\u0f08\0\u0f52\0\u0f9c\0\u0128"+
    "\0\u0128\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e\0\u1158\0\u0128"+
    "\0\u0128\0\u0128\0\u11a2\0\u0128\0\u11ec\0\u0128\0\u1236\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0128\0\u0378\0\u1280"+
    "\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u0b90\0\u0bda\0\u13f2\0\u143c"+
    "\0\u032e\0\u0378\0\u1486\0\u14d0\0\u03c2\0\u151a\0\u0378\0\u1564"+
    "\0\u040c\0\u15ae\0\u0378\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u0128\0\u0128\0\u1892\0\u0128"+
    "\0\u0128\0\u0128\0\u0128\0\u0378\0\u18dc\0\u1926\0\u1970\0\u0378"+
    "\0\u19ba\0\u1a04\0\u1a4e\0\u0d02\0\u1a98\0\u0de0\0\u1ae2\0\u0ebe"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u0f9c\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u0378"+
    "\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u1642\0\u2060\0\u20aa\0\u20f4"+
    "\0\u213e\0\u176a\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa"+
    "\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a"+
    "\0\u2594\0\u25de\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a"+
    "\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea"+
    "\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u0128\0\u2b5c\0\u2ba6\0\u2bf0"+
    "\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6\0\u2e40"+
    "\0\u2e8a\0\u2ed4\0\u0128\0\u0128\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c"+
    "\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c"+
    "\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec"+
    "\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c"+
    "\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c"+
    "\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc"+
    "\0\u3e26\0\u3e70\0\u3eba\0\u3f04\0\u3f4e\0\u3f98\0\u3fe2\0\u402c"+
    "\0\u4076\0\u40c0\0\u410a\0\u4154\0\u419e\0\u41e8\0\u4232\0\u427c"+
    "\0\u42c6\0\u4310\0\u435a\0\u43a4\0\u032e\0\u03c2\0\u040c\0\u43ee"+
    "\0\u4438\0\u4482\0\u44cc\0\u4516\0\u4560\0\u45aa\0\u45f4\0\u463e"+
    "\0\u0f52\0\u0f9c\0\u4688\0\u0fe6\0\u46d2\0\u471c\0\u4766\0\u1642"+
    "\0\u176a\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u4922\0\u496c"+
    "\0\u49b6\0\u4a00\0\u4a4a\0\u4a94\0\u4ade\0\u4b28\0\u4b72\0\u4bbc"+
    "\0\u4c06\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c"+
    "\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u3cfe\0\u5012"+
    "\0\u505c\0\u50a6\0\u435a\0\u50f0\0\u513a\0\u46d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\2\6\1\10\1\6\1\10"+
    "\1\11\1\6\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\1\17\1\20\1\21\1\6\1\22\1\23\1\24\11\6"+
    "\1\25\1\26\1\27\1\6\1\30\1\31\1\6\1\32"+
    "\4\6\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\10\6\1\57\1\60"+
    "\1\61\2\60\2\61\1\60\1\61\2\60\1\61\3\60"+
    "\1\0\1\60\2\0\2\60\15\61\1\60\3\61\1\62"+
    "\1\60\1\61\1\60\4\61\3\60\1\63\20\60\10\61"+
    "\2\60\1\64\2\60\2\64\1\60\1\64\2\60\1\64"+
    "\3\60\1\0\1\60\2\0\2\60\15\64\1\60\3\64"+
    "\2\60\1\64\1\60\4\64\3\60\1\63\20\60\10\64"+
    "\1\60\16\65\1\66\1\65\1\15\25\65\1\67\43\65"+
    "\16\70\1\0\1\70\2\0\23\70\1\71\45\70\10\6"+
    "\1\70\1\6\3\70\1\0\1\70\2\0\2\70\15\6"+
    "\1\70\3\6\1\71\1\70\1\6\1\70\4\6\24\70"+
    "\10\6\3\70\1\72\1\73\1\74\1\70\1\72\1\75"+
    "\1\72\1\76\4\70\1\0\1\70\2\0\5\70\1\74"+
    "\15\70\1\71\3\70\1\75\42\70\2\10\2\70\1\10"+
    "\1\70\1\10\1\76\1\77\3\70\1\0\1\70\2\0"+
    "\16\70\1\77\4\70\1\71\46\70\2\76\2\70\1\76"+
    "\1\70\1\76\1\100\4\70\1\0\1\70\2\0\23\70"+
    "\1\71\21\70\1\101\35\70\1\102\2\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\103\36\70\1\104\1\70"+
    "\1\0\1\70\2\0\23\70\1\71\2\70\1\105\16\70"+
    "\1\106\22\70\15\107\1\110\1\0\1\111\2\112\23\107"+
    "\1\113\44\107\112\0\16\114\1\0\1\115\2\116\1\117"+
    "\22\114\1\120\44\114\16\121\1\0\1\122\2\123\1\121"+
    "\1\124\21\121\1\125\44\121\1\70\10\6\1\70\1\6"+
    "\3\70\1\0\1\70\2\0\2\70\15\6\1\126\3\6"+
    "\1\71\1\70\1\6\1\70\4\6\24\70\10\6\2\70"+
    "\10\6\1\70\1\6\3\70\1\0\1\70\2\0\2\70"+
    "\15\6\1\127\3\6\1\71\1\70\1\6\1\70\4\6"+
    "\24\70\10\6\2\70\10\6\1\70\1\6\3\70\1\0"+
    "\1\70\2\0\2\70\15\6\1\70\3\6\1\71\1\70"+
    "\1\6\1\70\4\6\12\70\1\130\11\70\10\6\17\70"+
    "\1\0\1\70\2\0\23\70\1\71\21\70\1\131\23\70"+
    "\10\6\1\70\1\6\3\70\1\0\1\70\2\0\2\70"+
    "\15\6\1\132\3\6\1\71\1\70\1\6\1\70\4\6"+
    "\24\70\10\6\2\70\10\6\1\70\1\6\3\70\1\0"+
    "\1\70\2\0\2\70\15\6\1\70\2\6\1\26\1\71"+
    "\1\70\1\6\1\70\4\6\24\70\10\6\17\70\1\0"+
    "\1\70\2\0\23\70\1\71\1\133\61\70\1\0\1\70"+
    "\2\0\23\70\1\71\1\134\20\70\1\135\11\70\1\136"+
    "\26\70\1\0\1\70\2\0\23\70\1\71\2\70\1\137"+
    "\16\70\1\140\40\70\1\0\1\70\2\0\23\70\1\71"+
    "\21\70\1\141\40\70\1\0\1\70\2\0\23\70\1\71"+
    "\12\70\1\142\47\70\1\0\1\70\2\0\23\70\1\71"+
    "\13\70\1\143\5\70\1\144\40\70\1\0\1\70\2\0"+
    "\23\70\1\71\14\70\1\145\4\70\1\146\40\70\1\0"+
    "\1\70\2\0\23\70\1\71\15\70\1\147\3\70\1\150"+
    "\40\70\1\0\1\70\2\0\23\70\1\71\16\70\1\151"+
    "\43\70\1\0\1\70\2\0\23\70\1\71\21\70\1\152"+
    "\40\70\1\0\1\70\2\0\23\70\1\71\16\70\1\153"+
    "\2\70\1\154\40\70\1\0\1\70\2\0\23\70\1\71"+
    "\2\70\1\54\13\70\1\155\2\70\1\156\22\70\1\0"+
    "\10\61\1\0\1\61\11\0\15\61\1\0\3\61\2\0"+
    "\1\61\1\0\4\61\24\0\10\61\61\0\1\157\32\0"+
    "\10\64\1\0\1\64\11\0\15\64\1\0\3\64\2\0"+
    "\1\64\1\0\4\64\24\0\10\64\2\0\1\160\1\161"+
    "\1\162\2\160\1\162\1\160\1\162\1\0\1\160\11\0"+
    "\15\160\1\0\3\160\2\0\1\160\1\0\4\160\3\163"+
    "\21\0\10\160\1\0\16\70\1\0\1\70\2\0\23\70"+
    "\1\71\1\164\45\70\1\72\1\73\2\70\1\72\1\70"+
    "\1\72\1\76\4\70\1\0\1\70\2\0\23\70\1\71"+
    "\46\70\2\73\2\70\1\73\1\70\1\73\1\76\4\70"+
    "\1\0\1\70\2\0\23\70\1\71\46\70\2\165\1\70"+
    "\4\165\1\70\1\165\3\70\1\0\1\70\2\0\10\70"+
    "\2\165\3\70\2\165\4\70\1\71\3\70\1\165\31\70"+
    "\1\165\10\70\1\166\5\70\1\166\5\70\1\0\1\70"+
    "\2\0\23\70\1\71\46\70\2\76\2\70\1\76\1\70"+
    "\1\76\1\70\1\77\3\70\1\0\1\70\2\0\16\70"+
    "\1\77\4\70\1\71\47\70\1\167\2\70\1\167\1\70"+
    "\1\167\2\70\1\170\2\70\1\0\1\70\2\0\23\70"+
    "\1\71\44\70\15\107\1\171\1\0\1\111\2\112\23\107"+
    "\1\113\44\107\15\112\1\172\1\0\1\173\72\112\15\107"+
    "\1\110\1\0\1\111\2\112\23\107\1\113\1\174\43\107"+
    "\16\114\1\0\1\115\2\116\1\175\22\114\1\120\44\114"+
    "\16\116\1\0\1\176\2\116\1\177\67\116\16\114\1\0"+
    "\1\115\2\116\1\117\22\114\1\120\1\200\43\114\16\121"+
    "\1\0\1\122\2\123\1\121\1\201\21\121\1\125\44\121"+
    "\16\123\1\0\1\202\3\123\1\203\66\123\16\121\1\0"+
    "\1\122\2\123\1\121\1\124\21\121\1\125\1\204\43\121"+
    "\16\126\1\0\1\126\2\0\17\126\1\205\3\126\1\206"+
    "\44\126\16\127\1\0\1\127\2\0\17\127\1\207\3\127"+
    "\1\210\44\127\16\132\1\0\1\132\2\0\17\132\1\211"+
    "\3\132\1\212\44\132\16\70\1\0\1\70\2\0\2\70"+
    "\1\213\20\70\1\71\5\70\1\214\54\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\215\40\70\1\0\1\70"+
    "\2\0\23\70\1\71\2\70\1\216\57\70\1\0\1\70"+
    "\2\0\23\70\1\71\34\70\1\217\25\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\220\40\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\221\40\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\222\40\70\1\0\1\70"+
    "\2\0\23\70\1\71\21\70\1\223\22\70\1\0\10\160"+
    "\1\0\1\160\11\0\15\160\1\0\3\160\2\0\1\160"+
    "\1\224\4\160\24\0\10\160\3\0\1\225\1\0\1\226"+
    "\1\0\1\225\1\227\1\225\16\0\1\226\20\0\1\230"+
    "\1\227\42\0\2\162\2\0\1\162\1\0\1\162\37\0"+
    "\1\230\42\0\1\231\2\0\2\231\1\0\1\231\2\0"+
    "\1\231\11\0\15\231\1\0\3\231\2\0\1\231\1\0"+
    "\4\231\24\0\10\231\1\0\16\70\1\0\1\70\2\0"+
    "\2\70\1\232\20\70\1\71\46\70\2\167\2\70\1\167"+
    "\1\70\1\167\5\70\1\0\1\70\2\0\23\70\1\71"+
    "\60\70\1\233\1\70\1\0\1\70\2\0\23\70\1\71"+
    "\44\70\15\112\1\234\1\0\1\173\72\112\15\107\1\110"+
    "\1\0\1\111\2\112\2\107\1\235\20\107\1\113\44\107"+
    "\16\116\1\0\1\176\2\116\1\236\67\116\16\114\1\0"+
    "\1\115\2\116\1\117\1\114\1\237\20\114\1\120\44\114"+
    "\16\123\1\0\1\202\3\123\1\240\66\123\16\121\1\0"+
    "\1\122\2\123\1\121\1\124\1\241\20\121\1\125\44\121"+
    "\16\205\1\0\1\205\2\0\17\205\1\242\3\205\1\243"+
    "\44\205\16\126\1\0\1\126\2\0\17\126\1\205\3\126"+
    "\1\206\1\244\43\126\16\127\1\0\1\127\2\0\2\127"+
    "\13\245\1\246\1\245\1\207\3\127\1\210\62\127\1\0"+
    "\1\127\2\0\17\127\1\207\3\127\1\210\1\247\43\127"+
    "\16\211\1\0\1\211\2\0\17\211\1\250\3\211\1\251"+
    "\44\211\16\132\1\0\1\132\2\0\17\132\1\211\3\132"+
    "\1\212\1\252\43\132\16\70\1\0\1\70\2\0\14\70"+
    "\1\253\6\70\1\71\62\70\1\0\1\70\2\0\11\70"+
    "\1\254\11\70\1\71\62\70\1\0\1\70\2\0\23\70"+
    "\1\71\35\70\1\255\6\70\2\0\1\225\3\0\1\225"+
    "\1\0\1\225\37\0\1\230\43\0\2\256\1\0\4\256"+
    "\1\0\1\256\17\0\2\256\3\0\2\256\10\0\1\256"+
    "\31\0\1\256\10\0\1\257\5\0\1\257\102\0\10\231"+
    "\1\0\1\231\11\0\15\231\1\0\3\231\2\0\1\231"+
    "\1\260\4\231\24\0\10\231\1\0\16\70\1\0\1\70"+
    "\2\0\14\70\1\261\6\70\1\71\47\70\1\167\2\70"+
    "\1\167\1\70\1\167\5\70\1\0\1\70\2\0\23\70"+
    "\1\71\44\70\15\107\1\110\1\0\1\111\2\112\14\107"+
    "\1\262\6\107\1\113\44\107\16\114\1\0\1\115\2\116"+
    "\1\117\13\114\1\263\6\114\1\120\44\114\16\121\1\0"+
    "\1\122\2\123\1\121\1\124\12\121\1\264\6\121\1\125"+
    "\44\121\16\205\1\0\1\205\2\0\2\205\13\265\1\266"+
    "\1\265\1\242\3\205\1\243\62\205\1\0\1\205\2\0"+
    "\17\205\1\242\3\205\1\243\1\267\43\205\16\126\1\0"+
    "\1\126\2\0\2\126\1\270\14\126\1\205\3\126\1\206"+
    "\44\126\16\127\1\0\1\127\2\0\14\127\1\245\2\127"+
    "\1\207\3\127\1\210\62\127\1\0\1\127\2\0\2\127"+
    "\1\271\14\127\1\207\3\127\1\210\44\127\16\211\1\0"+
    "\1\211\2\0\2\211\13\272\1\273\1\272\1\250\3\211"+
    "\1\251\62\211\1\0\1\211\2\0\17\211\1\250\3\211"+
    "\1\251\1\274\43\211\16\132\1\0\1\132\2\0\2\132"+
    "\1\275\14\132\1\211\3\132\1\212\44\132\16\70\1\0"+
    "\1\70\2\0\23\70\1\71\1\70\1\276\60\70\1\0"+
    "\1\70\2\0\23\70\1\71\6\70\1\277\47\70\1\300"+
    "\3\70\1\0\1\70\2\0\23\70\1\71\36\70\1\301"+
    "\1\70\1\302\3\70\2\0\2\256\1\0\4\256\1\0"+
    "\1\256\17\0\2\256\3\0\2\256\7\0\1\230\1\256"+
    "\31\0\1\256\10\0\1\257\5\0\1\257\37\0\1\230"+
    "\41\0\16\70\1\0\1\70\2\0\23\70\1\71\1\70"+
    "\1\303\42\70\15\107\1\110\1\0\1\111\2\112\23\107"+
    "\1\113\1\107\1\304\42\107\16\114\1\0\1\115\2\116"+
    "\1\117\22\114\1\120\1\114\1\305\42\114\16\121\1\0"+
    "\1\122\2\123\1\121\1\124\21\121\1\125\1\121\1\306"+
    "\42\121\16\205\1\0\1\205\2\0\14\205\1\265\2\205"+
    "\1\242\3\205\1\243\62\205\1\0\1\205\2\0\2\205"+
    "\1\307\14\205\1\242\3\205\1\243\44\205\16\126\1\0"+
    "\1\126\2\0\14\126\1\310\2\126\1\205\3\126\1\206"+
    "\44\126\16\127\1\0\1\127\2\0\14\127\1\311\2\127"+
    "\1\207\3\127\1\210\44\127\16\211\1\0\1\211\2\0"+
    "\14\211\1\272\2\211\1\250\3\211\1\251\62\211\1\0"+
    "\1\211\2\0\2\211\1\312\14\211\1\250\3\211\1\251"+
    "\44\211\16\132\1\0\1\132\2\0\14\132\1\313\2\132"+
    "\1\211\3\132\1\212\44\132\16\70\1\0\1\70\2\0"+
    "\6\70\1\314\14\70\1\71\62\70\1\0\1\70\2\0"+
    "\11\70\1\315\11\70\1\71\62\70\1\0\1\70\2\0"+
    "\23\70\1\71\42\70\1\316\17\70\1\0\1\70\2\0"+
    "\23\70\1\71\37\70\1\317\22\70\1\0\1\70\2\0"+
    "\23\70\1\71\41\70\1\320\20\70\1\0\1\70\2\0"+
    "\6\70\1\321\14\70\1\71\44\70\15\107\1\110\1\0"+
    "\1\111\2\112\6\107\1\322\14\107\1\113\44\107\16\114"+
    "\1\0\1\115\2\116\1\117\5\114\1\323\14\114\1\120"+
    "\44\114\16\121\1\0\1\122\2\123\1\121\1\124\4\121"+
    "\1\324\14\121\1\125\44\121\16\205\1\0\1\205\2\0"+
    "\14\205\1\325\2\205\1\242\3\205\1\243\44\205\16\126"+
    "\1\0\1\126\2\0\17\126\1\205\3\126\1\206\1\126"+
    "\1\326\42\126\16\127\1\0\1\127\2\0\17\127\1\207"+
    "\3\127\1\210\1\127\1\327\42\127\16\211\1\0\1\211"+
    "\2\0\14\211\1\330\2\211\1\250\3\211\1\251\44\211"+
    "\16\132\1\0\1\132\2\0\17\132\1\211\3\132\1\212"+
    "\1\132\1\331\42\132\16\70\1\0\1\70\2\0\22\70"+
    "\1\332\1\71\60\70\1\333\1\70\1\0\1\70\2\0"+
    "\23\70\1\71\62\70\1\0\1\70\2\0\23\70\1\71"+
    "\42\70\1\334\17\70\1\0\1\70\2\0\23\70\1\71"+
    "\2\70\1\335\57\70\1\0\1\70\2\0\23\70\1\71"+
    "\34\70\1\336\25\70\1\0\1\70\2\0\22\70\1\337"+
    "\1\71\44\70\15\107\1\110\1\0\1\111\2\112\22\107"+
    "\1\340\1\113\44\107\16\114\1\0\1\115\2\116\1\117"+
    "\21\114\1\341\1\120\44\114\16\121\1\0\1\122\2\123"+
    "\1\121\1\124\20\121\1\342\1\125\44\121\16\205\1\0"+
    "\1\205\2\0\17\205\1\242\3\205\1\243\1\205\1\343"+
    "\42\205\16\126\1\0\1\126\2\0\6\126\1\344\10\126"+
    "\1\205\3\126\1\206\44\126\16\127\1\0\1\127\2\0"+
    "\6\127\1\345\10\127\1\207\3\127\1\210\44\127\16\211"+
    "\1\0\1\211\2\0\17\211\1\250\3\211\1\251\1\211"+
    "\1\346\42\211\16\132\1\0\1\132\2\0\6\132\1\347"+
    "\10\132\1\211\3\132\1\212\44\132\16\70\1\0\1\70"+
    "\2\0\16\70\1\350\4\70\1\71\62\70\1\0\1\70"+
    "\2\0\2\70\1\351\10\70\1\352\7\70\1\71\62\70"+
    "\1\0\1\70\2\0\23\70\1\71\2\70\1\353\57\70"+
    "\1\0\1\70\2\0\23\70\1\71\2\70\1\354\57\70"+
    "\1\0\1\70\2\0\16\70\1\355\4\70\1\71\44\70"+
    "\15\107\1\110\1\0\1\111\2\112\16\107\1\356\4\107"+
    "\1\113\44\107\16\114\1\0\1\115\2\116\1\117\15\114"+
    "\1\357\4\114\1\120\44\114\16\121\1\0\1\122\2\123"+
    "\1\121\1\124\14\121\1\360\4\121\1\125\44\121\16\205"+
    "\1\0\1\205\2\0\6\205\1\361\10\205\1\242\3\205"+
    "\1\243\44\205\16\126\1\0\1\126\2\0\17\126\1\205"+
    "\2\126\1\362\1\206\44\126\16\127\1\0\1\127\2\0"+
    "\17\127\1\207\2\127\1\363\1\210\44\127\16\211\1\0"+
    "\1\211\2\0\6\211\1\364\10\211\1\250\3\211\1\251"+
    "\44\211\16\132\1\0\1\132\2\0\17\132\1\211\2\132"+
    "\1\365\1\212\44\132\14\70\1\366\1\70\1\0\1\70"+
    "\2\0\23\70\1\71\62\70\1\0\1\70\2\0\4\70"+
    "\1\367\16\70\1\71\62\70\1\0\1\70\2\0\2\70"+
    "\1\370\20\70\1\71\60\70\1\371\1\70\1\0\1\70"+
    "\2\0\23\70\1\71\44\70\14\107\1\372\1\110\1\0"+
    "\1\111\2\112\23\107\1\113\44\107\14\114\1\373\1\114"+
    "\1\0\1\115\2\116\1\117\22\114\1\120\44\114\14\121"+
    "\1\374\1\121\1\0\1\122\2\123\1\121\1\124\21\121"+
    "\1\125\44\121\16\205\1\0\1\205\2\0\17\205\1\242"+
    "\2\205\1\375\1\243\44\205\16\126\1\0\1\126\2\0"+
    "\16\126\1\376\1\205\3\126\1\206\44\126\16\127\1\0"+
    "\1\127\2\0\16\127\1\377\1\207\3\127\1\210\44\127"+
    "\16\211\1\0\1\211\2\0\17\211\1\250\2\211\1\u0100"+
    "\1\251\44\211\16\132\1\0\1\132\2\0\16\132\1\u0101"+
    "\1\211\3\132\1\212\44\132\16\70\1\0\1\70\2\0"+
    "\13\70\1\u0102\7\70\1\71\3\70\1\u0103\56\70\1\0"+
    "\1\70\2\0\7\70\1\u0104\13\70\1\71\62\70\1\0"+
    "\1\70\2\0\23\70\1\71\1\70\1\u0105\60\70\1\0"+
    "\1\70\2\0\13\70\1\u0102\7\70\1\71\44\70\15\107"+
    "\1\110\1\0\1\111\2\112\13\107\1\u0106\7\107\1\113"+
    "\44\107\16\114\1\0\1\115\2\116\1\117\12\114\1\u0107"+
    "\7\114\1\120\44\114\16\121\1\0\1\122\2\123\1\121"+
    "\1\124\11\121\1\u0108\7\121\1\125\44\121\16\205\1\0"+
    "\1\205\2\0\16\205\1\u0109\1\242\3\205\1\243\44\205"+
    "\14\126\1\u010a\1\126\1\0\1\126\2\0\17\126\1\205"+
    "\3\126\1\206\44\126\14\127\1\u010b\1\127\1\0\1\127"+
    "\2\0\17\127\1\207\3\127\1\210\44\127\16\211\1\0"+
    "\1\211\2\0\16\211\1\u010c\1\250\3\211\1\251\44\211"+
    "\14\132\1\u010d\1\132\1\0\1\132\2\0\17\132\1\211"+
    "\3\132\1\212\44\132\16\70\1\0\1\70\2\0\2\70"+
    "\1\u010e\20\70\1\71\62\70\1\0\1\70\2\0\13\70"+
    "\1\u010f\7\70\1\71\62\70\1\0\1\70\2\0\6\70"+
    "\1\u0110\14\70\1\71\62\70\1\0\1\70\2\0\16\70"+
    "\1\u0111\4\70\1\71\44\70\15\107\1\110\1\0\1\111"+
    "\2\112\2\107\1\u0112\20\107\1\113\44\107\16\114\1\0"+
    "\1\115\2\116\1\117\1\114\1\u0113\20\114\1\120\44\114"+
    "\16\121\1\0\1\122\2\123\1\121\1\124\1\u0114\20\121"+
    "\1\125\44\121\14\205\1\u0115\1\205\1\0\1\205\2\0"+
    "\17\205\1\242\3\205\1\243\44\205\16\126\1\0\1\126"+
    "\2\0\13\126\1\u0116\3\126\1\205\3\126\1\206\44\126"+
    "\16\127\1\0\1\127\2\0\13\127\1\u0117\3\127\1\207"+
    "\3\127\1\210\44\127\14\211\1\u0118\1\211\1\0\1\211"+
    "\2\0\17\211\1\250\3\211\1\251\44\211\16\132\1\0"+
    "\1\132\2\0\13\132\1\u0119\3\132\1\211\3\132\1\212"+
    "\44\132\16\70\1\0\1\70\2\0\23\70\1\71\1\70"+
    "\1\u011a\60\70\1\0\1\70\2\0\6\70\1\u011b\14\70"+
    "\1\71\62\70\1\0\1\70\2\0\22\70\1\u011c\1\71"+
    "\62\70\1\0\1\70\2\0\23\70\1\71\2\70\1\u011d"+
    "\41\70\15\107\1\110\1\0\1\111\2\112\23\107\1\113"+
    "\1\107\1\u011e\42\107\16\114\1\0\1\115\2\116\1\117"+
    "\22\114\1\120\1\114\1\u011f\42\114\16\121\1\0\1\122"+
    "\2\123\1\121\1\124\21\121\1\125\1\121\1\u0120\42\121"+
    "\16\205\1\0\1\205\2\0\13\205\1\u0121\3\205\1\242"+
    "\3\205\1\243\44\205\16\126\1\0\1\126\2\0\2\126"+
    "\1\u0122\14\126\1\205\3\126\1\206\44\126\16\127\1\0"+
    "\1\127\2\0\2\127\1\u0123\14\127\1\207\3\127\1\210"+
    "\44\127\16\211\1\0\1\211\2\0\13\211\1\u0124\3\211"+
    "\1\250\3\211\1\251\44\211\16\132\1\0\1\132\2\0"+
    "\2\132\1\u0125\14\132\1\211\3\132\1\212\44\132\16\70"+
    "\1\0\1\70\2\0\16\70\1\u0126\4\70\1\71\62\70"+
    "\1\0\1\70\2\0\15\70\1\u0127\5\70\1\71\62\70"+
    "\1\0\1\70\2\0\21\70\1\u0128\1\70\1\71\44\70"+
    "\16\u011d\1\0\1\u011d\2\0\23\u011d\1\u0129\44\u011d\15\107"+
    "\1\110\1\0\1\111\2\112\16\107\1\u012a\4\107\1\113"+
    "\44\107\16\114\1\0\1\115\2\116\1\117\15\114\1\u012b"+
    "\4\114\1\120\44\114\16\121\1\0\1\122\2\123\1\121"+
    "\1\124\14\121\1\u012c\4\121\1\125\44\121\16\205\1\0"+
    "\1\205\2\0\2\205\1\u012d\14\205\1\242\3\205\1\243"+
    "\44\205\16\126\1\0\1\126\2\0\17\126\1\205\3\126"+
    "\1\206\1\126\1\u012e\42\126\16\127\1\0\1\127\2\0"+
    "\17\127\1\207\3\127\1\210\1\127\1\u012f\42\127\16\211"+
    "\1\0\1\211\2\0\2\211\1\u0130\14\211\1\250\3\211"+
    "\1\251\44\211\16\132\1\0\1\132\2\0\17\132\1\211"+
    "\3\132\1\212\1\132\1\u0131\42\132\16\70\1\0\1\70"+
    "\2\0\23\70\1\71\2\70\1\57\57\70\1\0\1\70"+
    "\2\0\23\70\1\71\4\70\1\u0132\55\70\1\0\1\70"+
    "\2\0\23\70\1\71\2\70\1\u0133\41\70\16\u011d\1\0"+
    "\1\u011d\2\0\23\u011d\1\u0129\1\u0134\43\u011d\15\107\1\110"+
    "\1\0\1\111\2\112\23\107\1\113\2\107\1\u0135\41\107"+
    "\16\114\1\0\1\115\2\116\1\117\22\114\1\120\2\114"+
    "\1\u0136\41\114\16\121\1\0\1\122\2\123\1\121\1\124"+
    "\21\121\1\125\2\121\1\u0137\41\121\16\205\1\0\1\205"+
    "\2\0\17\205\1\242\3\205\1\243\1\205\1\u0138\42\205"+
    "\16\126\1\0\1\126\2\0\16\126\1\u0139\1\205\3\126"+
    "\1\206\44\126\16\127\1\0\1\127\2\0\16\127\1\u013a"+
    "\1\207\3\127\1\210\44\127\16\211\1\0\1\211\2\0"+
    "\17\211\1\250\3\211\1\251\1\211\1\u013b\42\211\16\132"+
    "\1\0\1\132\2\0\16\132\1\u013c\1\211\3\132\1\212"+
    "\44\132\16\70\1\0\1\70\2\0\23\70\1\71\2\70"+
    "\1\u013d\41\70\16\u0133\1\0\1\u0133\2\0\23\u0133\1\u013e"+
    "\44\u0133\16\u011d\1\0\1\u011d\2\0\2\u011d\1\u013f\20\u011d"+
    "\1\u0129\44\u011d\16\205\1\0\1\205\2\0\16\205\1\u0140"+
    "\1\242\3\205\1\243\44\205\16\126\1\0\1\126\2\0"+
    "\17\126\1\205\3\126\1\206\2\126\1\u0141\41\126\16\127"+
    "\1\0\1\127\2\0\17\127\1\207\3\127\1\210\2\127"+
    "\1\u0142\41\127\16\211\1\0\1\211\2\0\16\211\1\u0143"+
    "\1\250\3\211\1\251\44\211\16\132\1\0\1\132\2\0"+
    "\17\132\1\211\3\132\1\212\2\132\1\u0144\41\132\16\70"+
    "\1\u0145\1\70\2\0\23\70\1\71\44\70\16\u0133\1\0"+
    "\1\u0133\2\0\23\u0133\1\u013e\1\u0146\43\u0133\16\u011d\1\0"+
    "\1\u011d\2\0\14\u011d\1\u0147\6\u011d\1\u0129\44\u011d\16\205"+
    "\1\0\1\205\2\0\17\205\1\242\3\205\1\243\2\205"+
    "\1\u0148\41\205\16\211\1\0\1\211\2\0\17\211\1\250"+
    "\3\211\1\251\2\211\1\u0149\41\211\45\u0145\1\u014a\44\u0145"+
    "\16\u0133\1\0\1\u0133\2\0\2\u0133\1\u014b\20\u0133\1\u013e"+
    "\44\u0133\16\u011d\1\0\1\u011d\2\0\23\u011d\1\u0129\1\u011d"+
    "\1\u014c\42\u011d\45\u0145\1\u014a\1\u014d\43\u0145\16\u0133\1\0"+
    "\1\u0133\2\0\14\u0133\1\u014e\6\u0133\1\u013e\44\u0133\16\u011d"+
    "\1\0\1\u011d\2\0\6\u011d\1\u014f\14\u011d\1\u0129\44\u011d"+
    "\24\u0145\1\u0150\20\u0145\1\u014a\44\u0145\16\u0133\1\0\1\u0133"+
    "\2\0\23\u0133\1\u013e\1\u0133\1\u0151\42\u0133\16\u011d\1\0"+
    "\1\u011d\2\0\22\u011d\1\u0152\1\u0129\44\u011d\36\u0145\1\u0153"+
    "\6\u0145\1\u014a\44\u0145\16\u0133\1\0\1\u0133\2\0\6\u0133"+
    "\1\u0154\14\u0133\1\u013e\44\u0133\16\u011d\1\0\1\u011d\2\0"+
    "\16\u011d\1\u0155\4\u011d\1\u0129\44\u011d\45\u0145\1\u014a\1\u0145"+
    "\1\u0156\42\u0145\16\u0133\1\0\1\u0133\2\0\22\u0133\1\u0157"+
    "\1\u013e\44\u0133\14\u011d\1\u0158\1\u011d\1\0\1\u011d\2\0"+
    "\23\u011d\1\u0129\44\u011d\30\u0145\1\u0159\14\u0145\1\u014a\44\u0145"+
    "\16\u0133\1\0\1\u0133\2\0\16\u0133\1\u015a\4\u0133\1\u013e"+
    "\44\u0133\16\u011d\1\0\1\u011d\2\0\13\u011d\1\u015b\7\u011d"+
    "\1\u0129\44\u011d\44\u0145\1\u015c\1\u014a\44\u0145\14\u0133\1\u015d"+
    "\1\u0133\1\0\1\u0133\2\0\23\u0133\1\u013e\44\u0133\16\u011d"+
    "\1\0\1\u011d\2\0\2\u011d\1\u015e\20\u011d\1\u0129\44\u011d"+
    "\40\u0145\1\u015f\4\u0145\1\u014a\44\u0145\16\u0133\1\0\1\u0133"+
    "\2\0\13\u0133\1\u0160\7\u0133\1\u013e\44\u0133\16\u011d\1\0"+
    "\1\u011d\2\0\23\u011d\1\u0129\1\u011d\1\u0161\42\u011d\14\u0145"+
    "\1\u0162\30\u0145\1\u014a\44\u0145\16\u0133\1\0\1\u0133\2\0"+
    "\2\u0133\1\u0163\20\u0133\1\u013e\44\u0133\16\u011d\1\0\1\u011d"+
    "\2\0\16\u011d\1\u0164\4\u011d\1\u0129\44\u011d\45\u0145\1\u014a"+
    "\3\u0145\1\u0165\40\u0145\16\u0133\1\0\1\u0133\2\0\23\u0133"+
    "\1\u013e\1\u0133\1\u0166\42\u0133\16\u011d\1\0\1\u011d\2\0"+
    "\23\u011d\1\u0129\2\u011d\1\u0167\41\u011d\35\u0145\1\u0168\7\u0145"+
    "\1\u014a\44\u0145\16\u0133\1\0\1\u0133\2\0\16\u0133\1\u0169"+
    "\4\u0133\1\u013e\44\u0133\30\u0145\1\u016a\14\u0145\1\u014a\44\u0145"+
    "\16\u0133\1\0\1\u0133\2\0\23\u0133\1\u013e\2\u0133\1\u016b"+
    "\41\u0133\37\u0145\1\u016c\5\u0145\1\u014a\111\u0145\1\u014a\4\u0145"+
    "\1\u016d\104\u0145\1\u014a\2\u0145\1\u016e\41\u0145";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\10\1\1\11\1\1\1\11\40\1\1\11\1\1"+
    "\1\11\2\1\2\11\1\1\2\0\1\1\3\0\1\1"+
    "\1\0\7\1\1\0\1\1\6\0\1\1\4\0\1\1"+
    "\3\0\2\1\2\0\2\1\1\0\20\1\1\11\5\0"+
    "\3\1\1\0\1\1\1\11\2\0\1\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\3\0\1\1\5\0\2\1"+
    "\1\0\4\1\1\11\3\0\1\11\3\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\7\0\1\11\4\0\1\1\4\0\1\1\42\0"+
    "\1\1\15\0\2\1\60\0\1\1\13\0\1\1\11\0"+
    "\5\1\6\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private StringBuilder buffer;
	private Token yyval;
	private Token comentario;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		errores = 0;
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores léxicos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errores++;token(0);gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);
            }
          case 87: break;
          case 2: 
            { String txt = yytext(); 
						int tipo = Reservados.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
            }
          case 88: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 89: break;
          case 4: 
            { return token('.');
            }
          case 90: break;
          case 5: 
            { return token('+');
            }
          case 91: break;
          case 6: 
            { return token('-');
            }
          case 92: break;
          case 7: 
            { 
            }
          case 93: break;
          case 8: 
            { return token(Parser.SUELO);
            }
          case 94: break;
          case 9: 
            { return token('/');
            }
          case 95: break;
          case 10: 
            { yybegin(PD);token("", Parser.COMENTARIO, true);
						comentario=yyval;buffer.setLength(0);
            }
          case 96: break;
          case 11: 
            { return token('<');
            }
          case 97: break;
          case 12: 
            { return token('>');
            }
          case 98: break;
          case 13: 
            { yybegin(VAR);return token('$');
            }
          case 99: break;
          case 14: 
            { yybegin(VAR);return token('@');
            }
          case 100: break;
          case 15: 
            { yybegin(VAR);return token('%');
            }
          case 101: break;
          case 16: 
            { return token(':');
            }
          case 102: break;
          case 17: 
            { yybegin(FUN);return token('&');
            }
          case 103: break;
          case 18: 
            { return token('*');
            }
          case 104: break;
          case 19: 
            { return token('|');
            }
          case 105: break;
          case 20: 
            { return token('~');
            }
          case 106: break;
          case 21: 
            { return token('^');
            }
          case 107: break;
          case 22: 
            { return token('!');
            }
          case 108: break;
          case 23: 
            { return token('=');
            }
          case 109: break;
          case 24: 
            { return token('(');
            }
          case 110: break;
          case 25: 
            { return token(')');
            }
          case 111: break;
          case 26: 
            { return token('[');
            }
          case 112: break;
          case 27: 
            { return token(']');
            }
          case 113: break;
          case 28: 
            { return token('{');
            }
          case 114: break;
          case 29: 
            { return token('}');
            }
          case 115: break;
          case 30: 
            { return token(',');
            }
          case 116: break;
          case 31: 
            { return token('?');
            }
          case 117: break;
          case 32: 
            { return token(';');
            }
          case 118: break;
          case 33: 
            { yypushback(1);yybegin(YYINITIAL);
            }
          case 119: break;
          case 34: 
            { return token(Parser.VAR);
            }
          case 120: break;
          case 35: 
            { return token(Parser.SIGIL);
            }
          case 121: break;
          case 36: 
            { return token(Parser.ID);
            }
          case 122: break;
          case 37: 
            { buffer.append(yytext());
            }
          case 123: break;
          case 38: 
            { yybegin(YYINITIAL);String txt = buffer.toString();
						if(!txt.trim().isEmpty()){yyval=comentario;return comentario.getTipo();}
            }
          case 124: break;
          case 39: 
            { return token(Parser.DECIMAL);
            }
          case 125: break;
          case 40: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 126: break;
          case 41: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 127: break;
          case 42: 
            { return token(Parser.MAS_MAS);
            }
          case 128: break;
          case 43: 
            { return token(Parser.MAS_IGUAL);
            }
          case 129: break;
          case 44: 
            { return token(Parser.MENOS_MENOS);
            }
          case 130: break;
          case 45: 
            { return token(Parser.FLECHA);
            }
          case 131: break;
          case 46: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 132: break;
          case 47: 
            { return token(Parser.CADENA_SIMPLE);
            }
          case 133: break;
          case 48: 
            { return token(Parser.CADENA_DOBLE);
            }
          case 134: break;
          case 49: 
            { return token(Parser.CADENA_COMANDO);
            }
          case 135: break;
          case 50: 
            { return token(Parser.X_IGUAL);
            }
          case 136: break;
          case 51: 
            { return token(Parser.DIV_IGUAL);
            }
          case 137: break;
          case 52: 
            { return token(Parser.DESP_I);
            }
          case 138: break;
          case 53: 
            { return token(Parser.NUM_LE);
            }
          case 139: break;
          case 54: 
            { return token(Parser.DESP_D);
            }
          case 140: break;
          case 55: 
            { return token(Parser.NUM_GE);
            }
          case 141: break;
          case 56: 
            { return token(Parser.MOD_IGUAL);
            }
          case 142: break;
          case 57: 
            { return token(Parser.AMBITO);
            }
          case 143: break;
          case 58: 
            { return token(Parser.LAND);
            }
          case 144: break;
          case 59: 
            { return token(Parser.AND_IGUAL);
            }
          case 145: break;
          case 60: 
            { return token(Parser.POW);
            }
          case 146: break;
          case 61: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 147: break;
          case 62: 
            { return token(Parser.LOR);
            }
          case 148: break;
          case 63: 
            { return token(Parser.OR_IGUAL);
            }
          case 149: break;
          case 64: 
            { return token(Parser.SMART_EQ);
            }
          case 150: break;
          case 65: 
            { return token(Parser.XOR_IGUAL);
            }
          case 151: break;
          case 66: 
            { return token(Parser.STR_NO_REX);
            }
          case 152: break;
          case 67: 
            { return token(Parser.NUM_NE);
            }
          case 153: break;
          case 68: 
            { return token(Parser.STR_REX);
            }
          case 154: break;
          case 69: 
            { return token(Parser.NUM_EQ);
            }
          case 155: break;
          case 70: 
            { return token(Parser.M_REGEX);
            }
          case 156: break;
          case 71: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 157: break;
          case 72: 
            { return token(Parser.CMP);
            }
          case 158: break;
          case 73: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 159: break;
          case 74: 
            { return token(Parser.LAND_IGUAL);
            }
          case 160: break;
          case 75: 
            { return token(Parser.POW_IGUAL);
            }
          case 161: break;
          case 76: 
            { return token(Parser.LOR_IGUAL);
            }
          case 162: break;
          case 77: 
            { String t = yytext(); Integer tipo = Reservados.buscarEtiqueta(t);
						if (tipo == null){buffer.append(t);token(t, 0);
						gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);}
						else{return token(t, tipo, true);}
            }
          case 163: break;
          case 78: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 164: break;
          case 79: 
            { return token(Parser.S_REGEX);
            }
          case 165: break;
          case 80: 
            { return token(Parser.Y_REGEX);
            }
          case 166: break;
          case 81: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 167: break;
          case 82: 
            { return token(Parser.STDIN);
            }
          case 168: break;
          case 83: 
            { return token(Parser.STDERR);
            }
          case 169: break;
          case 84: 
            { return token(Parser.STDOUT);
            }
          case 170: break;
          case 85: 
            { return token(Parser.LINEA_JAVA);
            }
          case 171: break;
          case 86: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
