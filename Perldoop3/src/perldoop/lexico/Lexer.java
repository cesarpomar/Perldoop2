/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.*;
import perldoop.sintactico.Parser;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VAR = 2;
  public static final int FUN = 4;
  public static final int PD = 6;
  public static final int REX_T = 8;
  public static final int REX_SEP = 10;
  public static final int REX_SEP_BLOCK = 12;
  public static final int REX_P = 14;
  public static final int REX_M = 16;
  public static final int REX_VAR = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\107\1\16\1\21\1\21\1\20\22\0\1\107\1\61\1\22"+
    "\1\24\1\47\1\51\1\53\1\15\1\64\1\65\1\54\1\13\1\72"+
    "\1\14\1\11\1\55\1\2\1\10\6\6\2\3\1\52\1\74\1\25"+
    "\1\62\1\35\1\73\1\50\1\5\1\7\1\5\1\77\1\12\1\5"+
    "\2\1\1\100\4\1\1\101\1\102\2\1\1\104\1\75\1\76\1\103"+
    "\2\1\1\4\2\1\1\66\1\17\1\67\1\60\1\1\1\23\1\42"+
    "\1\36\1\37\1\111\1\33\1\111\1\27\1\110\1\26\1\41\1\40"+
    "\1\34\1\44\1\30\1\31\1\45\1\110\1\32\1\105\1\46\1\110"+
    "\1\43\1\110\1\63\1\106\1\110\1\70\1\56\1\71\1\57\6\0"+
    "\1\21\32\0\1\107\u15df\0\1\107\u097f\0\13\107\35\0\1\21\1\21"+
    "\5\0\1\107\57\0\1\107\u0fa0\0\1\107\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\2\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\7\1\41\1\42\1\43"+
    "\1\41\1\44\1\45\1\46\1\45\1\1\1\47\1\50"+
    "\1\1\1\51\1\52\1\53\1\54\1\55\2\56\1\57"+
    "\1\60\2\61\2\0\1\3\3\0\1\62\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\0\1\72"+
    "\6\0\1\73\4\0\1\74\2\0\1\75\1\76\1\0"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\102\4\0\1\122\1\0\2\3"+
    "\1\62\1\0\2\72\2\0\1\73\1\0\1\73\1\0"+
    "\1\74\1\0\1\74\3\0\1\123\1\124\1\0\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\3\0\1\133\3\0"+
    "\1\72\1\0\1\73\1\0\1\74\6\0\1\134\31\0"+
    "\1\135\10\0\1\136\1\137\34\0\1\140\6\0\1\140"+
    "\4\0\1\141\1\140\3\7\1\0\1\141\1\140\1\0"+
    "\1\141\1\140\1\0\1\141\1\140\1\0\1\141\1\140"+
    "\1\0\1\141\1\140\1\0\1\141\1\140\1\0\1\141"+
    "\1\140\1\0\1\141\1\140\1\0\1\141\1\140\1\0"+
    "\1\141\1\140\1\0\1\141\1\140\1\0\1\141\1\7"+
    "\1\0\1\141\1\0\1\7\2\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\u032e\0\u0378\0\u03c2\0\u040c\0\u0456"+
    "\0\u04a0\0\u04ea\0\u0534\0\u02e4\0\u057e\0\u05c8\0\u0612\0\u065c"+
    "\0\u06a6\0\u02e4\0\u02e4\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u02e4\0\u02e4"+
    "\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4"+
    "\0\u0534\0\u0a1e\0\u0534\0\u0a68\0\u0ab2\0\u0534\0\u0534\0\u0afc"+
    "\0\u0534\0\u0534\0\u0534\0\u0b46\0\u0534\0\u0534\0\u0534\0\u0534"+
    "\0\u0534\0\u0534\0\u0b90\0\u0534\0\u0bda\0\u0534\0\u0a68\0\u02e4"+
    "\0\u0c24\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96\0\u0de0\0\u02e4"+
    "\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u04ea\0\u02e4"+
    "\0\u0e2a\0\u0e74\0\u0ebe\0\u057e\0\u0f08\0\u0f52\0\u02e4\0\u0f9c"+
    "\0\u05c8\0\u0fe6\0\u1030\0\u02e4\0\u107a\0\u10c4\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u02e4\0\u02e4\0\u02e4\0\u1236\0\u02e4\0\u1280"+
    "\0\u02e4\0\u12ca\0\u02e4\0\u1314\0\u02e4\0\u02e4\0\u02e4\0\u02e4"+
    "\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u0534\0\u135e\0\u13a8\0\u13f2"+
    "\0\u143c\0\u0534\0\u1486\0\u0d02\0\u0d4c\0\u14d0\0\u151a\0\u04ea"+
    "\0\u0534\0\u1564\0\u15ae\0\u057e\0\u15f8\0\u0534\0\u1642\0\u05c8"+
    "\0\u168c\0\u0534\0\u16d6\0\u1720\0\u176a\0\u02e4\0\u02e4\0\u17b4"+
    "\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u0534\0\u17fe\0\u1848"+
    "\0\u1892\0\u0534\0\u18dc\0\u1926\0\u1970\0\u0e74\0\u19ba\0\u0f52"+
    "\0\u1a04\0\u1030\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0"+
    "\0\u0534\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6"+
    "\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016"+
    "\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266"+
    "\0\u22b0\0\u22fa\0\u02e4\0\u2344\0\u238e\0\u23d8\0\u2422\0\u246c"+
    "\0\u24b6\0\u2500\0\u254a\0\u02e4\0\u02e4\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8"+
    "\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u04ea"+
    "\0\u057e\0\u05c8\0\u31b8\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a"+
    "\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a"+
    "\0\u35c4\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u37ca"+
    "\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u39d0\0\u3a1a"+
    "\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u2dac\0\u3bd6\0\u3c20"+
    "\0\u3c6a\0\u3124\0\u3cb4\0\u3cfe\0\u3296";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\2\14\1\16\1\14\1\16"+
    "\1\17\1\14\1\20\1\21\1\22\1\23\1\24\2\23"+
    "\1\25\1\26\1\27\1\30\7\14\1\31\11\14\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\12\14\1\60\2\14"+
    "\1\61\1\62\2\61\2\62\1\61\1\62\2\61\1\62"+
    "\11\61\1\63\1\61\7\62\1\61\11\62\3\61\1\64"+
    "\10\61\1\62\11\61\12\62\1\61\2\62\1\61\1\65"+
    "\2\61\2\65\1\61\1\65\2\61\1\65\13\61\7\65"+
    "\1\61\11\65\3\61\1\64\10\61\1\65\11\61\12\65"+
    "\1\61\2\65\16\66\1\67\1\66\1\23\4\66\1\70"+
    "\64\66\16\71\1\23\1\71\2\23\1\72\21\71\1\73"+
    "\1\71\1\74\6\71\1\75\27\71\1\76\1\77\1\23"+
    "\2\71\16\100\1\23\1\100\2\23\70\100\112\101\17\102"+
    "\1\103\72\102\26\104\7\105\1\104\11\105\14\104\1\105"+
    "\21\104\2\105\1\104\2\105\1\106\1\62\2\106\2\62"+
    "\1\106\1\62\2\106\1\62\11\106\1\63\1\106\7\62"+
    "\1\106\11\62\3\106\1\107\10\106\1\62\11\106\12\62"+
    "\1\106\2\62\16\110\1\0\1\110\2\0\2\110\1\111"+
    "\66\110\10\14\1\110\1\14\3\110\1\0\1\110\2\0"+
    "\2\110\1\111\1\110\7\14\1\110\11\14\14\110\1\14"+
    "\11\110\12\14\1\110\2\14\2\110\1\112\1\113\1\114"+
    "\1\110\1\112\1\115\1\112\1\116\4\110\1\0\1\110"+
    "\2\0\2\110\1\111\11\110\1\115\24\110\1\114\30\110"+
    "\2\16\2\110\1\16\1\110\1\16\1\116\1\117\3\110"+
    "\1\0\1\110\2\0\2\110\1\111\6\110\1\117\60\110"+
    "\2\116\2\110\1\116\1\110\1\116\1\120\4\110\1\0"+
    "\1\110\2\0\2\110\1\111\35\110\1\121\42\110\1\122"+
    "\2\110\1\0\1\110\2\0\2\110\1\111\35\110\1\123"+
    "\43\110\1\124\1\110\1\0\1\110\2\0\2\110\1\111"+
    "\10\110\1\125\24\110\1\126\27\110\15\127\1\130\1\0"+
    "\1\131\2\132\2\127\1\133\65\127\112\0\16\134\1\0"+
    "\1\135\2\136\1\137\1\134\1\140\65\134\16\141\1\0"+
    "\1\142\2\143\1\141\1\144\1\145\65\141\16\110\1\0"+
    "\1\110\2\0\2\110\1\111\1\146\102\110\1\0\1\110"+
    "\2\0\2\110\1\111\1\147\34\110\1\150\12\110\1\151"+
    "\32\110\1\0\1\110\2\0\2\110\1\111\10\110\1\152"+
    "\24\110\1\153\45\110\1\0\1\110\2\0\2\110\1\111"+
    "\35\110\1\154\45\110\1\0\1\110\2\0\2\110\1\111"+
    "\25\110\1\155\55\110\1\0\1\110\2\0\2\110\1\111"+
    "\26\110\1\156\6\110\1\157\45\110\1\0\1\110\2\0"+
    "\2\110\1\111\27\110\1\160\5\110\1\161\45\110\1\0"+
    "\1\110\2\0\2\110\1\111\30\110\1\162\4\110\1\163"+
    "\45\110\1\0\1\110\2\0\2\110\1\111\31\110\1\164"+
    "\3\110\1\165\45\110\1\0\1\110\2\0\2\110\1\111"+
    "\32\110\1\166\50\110\1\0\1\110\2\0\2\110\1\111"+
    "\35\110\1\167\45\110\1\0\1\110\2\0\2\110\1\111"+
    "\32\110\1\170\2\110\1\171\45\110\1\0\1\110\2\0"+
    "\2\110\1\111\10\110\1\55\21\110\1\172\2\110\1\173"+
    "\30\110\10\14\1\110\1\14\3\110\1\0\1\110\2\0"+
    "\2\110\1\111\1\110\7\14\1\110\11\14\13\110\1\174"+
    "\1\14\11\110\12\14\1\110\2\14\1\0\10\62\1\0"+
    "\1\62\13\0\7\62\1\0\11\62\14\0\1\62\11\0"+
    "\12\62\1\0\2\62\52\0\1\175\40\0\10\65\1\0"+
    "\1\65\13\0\7\65\1\0\11\65\14\0\1\65\11\0"+
    "\12\65\1\0\2\65\1\0\1\176\1\177\1\200\2\176"+
    "\1\200\1\176\1\200\1\0\1\176\13\0\7\176\1\0"+
    "\11\176\3\201\11\0\1\176\11\0\12\176\1\0\2\176"+
    "\32\0\1\77\57\0\112\202\26\0\7\105\1\0\11\105"+
    "\14\0\1\105\21\0\2\105\1\0\2\105\16\110\1\0"+
    "\1\110\2\0\2\110\1\111\1\203\66\110\1\112\1\113"+
    "\2\110\1\112\1\110\1\112\1\116\4\110\1\0\1\110"+
    "\2\0\2\110\1\111\67\110\2\113\2\110\1\113\1\110"+
    "\1\113\1\116\4\110\1\0\1\110\2\0\2\110\1\111"+
    "\67\110\2\204\1\110\4\204\1\110\1\204\3\110\1\0"+
    "\1\110\2\0\2\110\1\111\6\110\1\204\2\110\2\204"+
    "\2\110\1\204\34\110\1\204\11\110\1\204\2\110\1\205"+
    "\5\110\1\205\5\110\1\0\1\110\2\0\2\110\1\111"+
    "\67\110\2\116\2\110\1\116\1\110\1\116\1\110\1\117"+
    "\3\110\1\0\1\110\2\0\2\110\1\111\6\110\1\117"+
    "\61\110\1\206\2\110\1\206\1\110\1\206\2\110\1\207"+
    "\2\110\1\0\1\110\2\0\2\110\1\111\65\110\15\127"+
    "\1\210\1\0\1\131\2\132\2\127\1\133\65\127\15\132"+
    "\1\211\1\0\1\212\72\132\15\127\1\130\1\0\1\131"+
    "\2\132\2\127\1\133\1\213\64\127\16\134\1\0\1\135"+
    "\2\136\1\214\1\134\1\140\65\134\16\136\1\0\1\215"+
    "\2\136\1\216\67\136\16\134\1\0\1\135\2\136\1\137"+
    "\1\134\1\140\1\217\64\134\16\141\1\0\1\142\2\143"+
    "\1\141\1\220\1\145\65\141\16\143\1\0\1\221\3\143"+
    "\1\222\66\143\16\141\1\0\1\142\2\143\1\141\1\144"+
    "\1\145\1\223\64\141\16\110\1\0\1\110\2\0\2\110"+
    "\1\111\1\110\1\224\12\110\1\225\66\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\226\45\110\1\0\1\110"+
    "\2\0\2\110\1\111\10\110\1\227\72\110\1\0\1\110"+
    "\2\0\2\110\1\111\51\110\1\230\31\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\231\45\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\232\45\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\233\45\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\234\45\110\1\0\1\110"+
    "\2\0\2\110\1\111\35\110\1\235\27\110\1\0\10\176"+
    "\1\0\1\176\13\0\7\176\1\236\11\176\14\0\1\176"+
    "\11\0\12\176\1\0\2\176\2\0\1\237\1\0\1\240"+
    "\1\0\1\237\1\241\1\237\24\0\1\242\1\241\24\0"+
    "\1\240\30\0\2\200\2\0\1\200\1\0\1\200\24\0"+
    "\1\242\55\0\1\243\2\0\2\243\1\0\1\243\2\0"+
    "\1\243\13\0\7\243\1\0\11\243\14\0\1\243\11\0"+
    "\12\243\1\0\2\243\16\110\1\0\1\110\2\0\2\110"+
    "\1\111\1\110\1\244\65\110\2\206\2\110\1\206\1\110"+
    "\1\206\5\110\1\0\1\110\2\0\2\110\1\111\101\110"+
    "\1\245\1\110\1\0\1\110\2\0\2\110\1\111\65\110"+
    "\15\132\1\246\1\0\1\212\72\132\15\127\1\130\1\0"+
    "\1\131\2\132\2\127\1\133\1\127\1\247\63\127\16\136"+
    "\1\0\1\215\2\136\1\250\67\136\16\134\1\0\1\135"+
    "\2\136\1\137\1\134\1\140\1\134\1\251\63\134\16\143"+
    "\1\0\1\221\3\143\1\252\66\143\16\141\1\0\1\142"+
    "\2\143\1\141\1\144\1\145\1\141\1\253\63\141\16\110"+
    "\1\0\1\110\2\0\2\110\1\111\2\110\1\254\100\110"+
    "\1\0\1\110\2\0\2\110\1\111\15\110\1\255\65\110"+
    "\1\0\1\110\2\0\2\110\1\111\52\110\1\256\12\110"+
    "\2\0\1\237\3\0\1\237\1\0\1\237\24\0\1\242"+
    "\56\0\2\257\1\0\4\257\1\0\1\257\20\0\1\257"+
    "\2\0\2\257\2\0\1\257\34\0\1\257\11\0\1\257"+
    "\2\0\1\260\5\0\1\260\102\0\10\243\1\0\1\243"+
    "\13\0\7\243\1\261\11\243\14\0\1\243\11\0\12\243"+
    "\1\0\2\243\16\110\1\0\1\110\2\0\2\110\1\111"+
    "\2\110\1\262\65\110\1\206\2\110\1\206\1\110\1\206"+
    "\5\110\1\0\1\110\2\0\2\110\1\111\65\110\15\127"+
    "\1\130\1\0\1\131\2\132\2\127\1\133\2\127\1\263"+
    "\62\127\16\134\1\0\1\135\2\136\1\137\1\134\1\140"+
    "\2\134\1\264\62\134\16\141\1\0\1\142\2\143\1\141"+
    "\1\144\1\145\2\141\1\265\62\141\16\110\1\0\1\110"+
    "\2\0\2\110\1\111\3\110\1\266\77\110\1\0\1\110"+
    "\2\0\2\110\1\111\16\110\1\267\60\110\1\270\3\110"+
    "\1\0\1\110\2\0\2\110\1\111\53\110\1\271\1\110"+
    "\1\272\7\110\2\0\2\257\1\0\4\257\1\0\1\257"+
    "\20\0\1\257\1\0\1\242\2\257\2\0\1\257\34\0"+
    "\1\257\11\0\1\257\2\0\1\260\5\0\1\260\24\0"+
    "\1\242\54\0\16\110\1\0\1\110\2\0\2\110\1\111"+
    "\3\110\1\273\61\110\15\127\1\130\1\0\1\131\2\132"+
    "\2\127\1\133\3\127\1\274\61\127\16\134\1\0\1\135"+
    "\2\136\1\137\1\134\1\140\3\134\1\275\61\134\16\141"+
    "\1\0\1\142\2\143\1\141\1\144\1\145\3\141\1\276"+
    "\61\141\16\110\1\0\1\110\2\0\2\110\1\111\4\110"+
    "\1\277\76\110\1\0\1\110\2\0\2\110\1\111\15\110"+
    "\1\300\65\110\1\0\1\110\2\0\2\110\1\111\57\110"+
    "\1\301\23\110\1\0\1\110\2\0\2\110\1\111\54\110"+
    "\1\302\26\110\1\0\1\110\2\0\2\110\1\111\56\110"+
    "\1\303\24\110\1\0\1\110\2\0\2\110\1\111\4\110"+
    "\1\304\60\110\15\127\1\130\1\0\1\131\2\132\2\127"+
    "\1\133\4\127\1\305\60\127\16\134\1\0\1\135\2\136"+
    "\1\137\1\134\1\140\4\134\1\306\60\134\16\141\1\0"+
    "\1\142\2\143\1\141\1\144\1\145\4\141\1\307\60\141"+
    "\16\110\1\0\1\110\2\0\2\110\1\111\5\110\1\310"+
    "\73\110\1\311\1\110\1\0\1\110\2\0\2\110\1\111"+
    "\103\110\1\0\1\110\2\0\2\110\1\111\57\110\1\312"+
    "\23\110\1\0\1\110\2\0\2\110\1\111\10\110\1\313"+
    "\72\110\1\0\1\110\2\0\2\110\1\111\51\110\1\314"+
    "\31\110\1\0\1\110\2\0\2\110\1\111\5\110\1\315"+
    "\57\110\15\127\1\130\1\0\1\131\2\132\2\127\1\133"+
    "\5\127\1\316\57\127\16\134\1\0\1\135\2\136\1\137"+
    "\1\134\1\140\5\134\1\317\57\134\16\141\1\0\1\142"+
    "\2\143\1\141\1\144\1\145\5\141\1\320\57\141\16\110"+
    "\1\0\1\110\2\0\2\110\1\111\6\110\1\321\74\110"+
    "\1\0\1\110\2\0\2\110\1\111\1\110\1\322\5\110"+
    "\1\323\73\110\1\0\1\110\2\0\2\110\1\111\10\110"+
    "\1\324\72\110\1\0\1\110\2\0\2\110\1\111\10\110"+
    "\1\325\72\110\1\0\1\110\2\0\2\110\1\111\6\110"+
    "\1\326\56\110\15\127\1\130\1\0\1\131\2\132\2\127"+
    "\1\133\6\127\1\327\56\127\16\134\1\0\1\135\2\136"+
    "\1\137\1\134\1\140\6\134\1\330\56\134\16\141\1\0"+
    "\1\142\2\143\1\141\1\144\1\145\6\141\1\331\56\141"+
    "\14\110\1\332\1\110\1\0\1\110\2\0\2\110\1\111"+
    "\103\110\1\0\1\110\2\0\2\110\1\111\17\110\1\333"+
    "\63\110\1\0\1\110\2\0\2\110\1\111\1\110\1\334"+
    "\77\110\1\335\1\110\1\0\1\110\2\0\2\110\1\111"+
    "\65\110\14\127\1\336\1\130\1\0\1\131\2\132\2\127"+
    "\1\133\65\127\14\134\1\337\1\134\1\0\1\135\2\136"+
    "\1\137\1\134\1\140\65\134\14\141\1\340\1\141\1\0"+
    "\1\142\2\143\1\141\1\144\1\145\65\141\16\110\1\0"+
    "\1\110\2\0\2\110\1\111\7\110\1\341\1\110\1\342"+
    "\71\110\1\0\1\110\2\0\2\110\1\111\20\110\1\343"+
    "\62\110\1\0\1\110\2\0\2\110\1\111\3\110\1\344"+
    "\77\110\1\0\1\110\2\0\2\110\1\111\7\110\1\341"+
    "\55\110\15\127\1\130\1\0\1\131\2\132\2\127\1\133"+
    "\7\127\1\345\55\127\16\134\1\0\1\135\2\136\1\137"+
    "\1\134\1\140\7\134\1\346\55\134\16\141\1\0\1\142"+
    "\2\143\1\141\1\144\1\145\7\141\1\347\55\141\16\110"+
    "\1\0\1\110\2\0\2\110\1\111\1\110\1\350\101\110"+
    "\1\0\1\110\2\0\2\110\1\111\7\110\1\351\73\110"+
    "\1\0\1\110\2\0\2\110\1\111\4\110\1\352\76\110"+
    "\1\0\1\110\2\0\2\110\1\111\6\110\1\353\56\110"+
    "\15\127\1\130\1\0\1\131\2\132\2\127\1\133\1\127"+
    "\1\354\63\127\16\134\1\0\1\135\2\136\1\137\1\134"+
    "\1\140\1\134\1\355\63\134\16\141\1\0\1\142\2\143"+
    "\1\141\1\144\1\145\1\141\1\356\63\141\16\110\1\0"+
    "\1\110\2\0\2\110\1\111\3\110\1\357\77\110\1\0"+
    "\1\110\2\0\2\110\1\111\4\110\1\360\76\110\1\0"+
    "\1\110\2\0\2\110\1\111\5\110\1\361\75\110\1\0"+
    "\1\110\2\0\2\110\1\111\10\110\1\362\54\110\15\127"+
    "\1\130\1\0\1\131\2\132\2\127\1\133\3\127\1\363"+
    "\61\127\16\134\1\0\1\135\2\136\1\137\1\134\1\140"+
    "\3\134\1\364\61\134\16\141\1\0\1\142\2\143\1\141"+
    "\1\144\1\145\3\141\1\365\61\141\16\110\1\0\1\110"+
    "\2\0\2\110\1\111\6\110\1\366\74\110\1\0\1\110"+
    "\2\0\2\110\1\111\12\110\1\367\70\110\1\0\1\110"+
    "\2\0\2\110\1\111\21\110\1\370\43\110\16\362\1\0"+
    "\1\362\2\0\2\362\1\371\65\362\15\127\1\130\1\0"+
    "\1\131\2\132\2\127\1\133\6\127\1\372\56\127\16\134"+
    "\1\0\1\135\2\136\1\137\1\134\1\140\6\134\1\373"+
    "\56\134\16\141\1\0\1\142\2\143\1\141\1\144\1\145"+
    "\6\141\1\374\56\141\16\110\1\0\1\110\2\0\2\110"+
    "\1\111\10\110\1\60\72\110\1\0\1\110\2\0\2\110"+
    "\1\111\13\110\1\375\67\110\1\0\1\110\2\0\2\110"+
    "\1\111\10\110\1\376\54\110\16\362\1\0\1\362\2\0"+
    "\2\362\1\371\1\377\64\362\15\127\1\130\1\0\1\131"+
    "\2\132\2\127\1\133\10\127\1\u0100\54\127\16\134\1\0"+
    "\1\135\2\136\1\137\1\134\1\140\10\134\1\u0101\54\134"+
    "\16\141\1\0\1\142\2\143\1\141\1\144\1\145\10\141"+
    "\1\u0102\54\141\16\110\1\0\1\110\2\0\2\110\1\111"+
    "\10\110\1\u0103\54\110\16\376\1\0\1\376\2\0\2\376"+
    "\1\u0104\65\376\16\362\1\0\1\362\2\0\2\362\1\371"+
    "\1\362\1\u0105\63\362\16\110\1\u0106\1\110\2\0\2\110"+
    "\1\111\65\110\16\376\1\0\1\376\2\0\2\376\1\u0104"+
    "\1\u0107\64\376\16\362\1\0\1\362\2\0\2\362\1\371"+
    "\2\362\1\u0108\62\362\24\u0106\1\u0109\65\u0106\16\376\1\0"+
    "\1\376\2\0\2\376\1\u0104\1\376\1\u010a\63\376\16\362"+
    "\1\0\1\362\2\0\2\362\1\371\3\362\1\u010b\61\362"+
    "\24\u0106\1\u0109\1\u010c\64\u0106\16\376\1\0\1\376\2\0"+
    "\2\376\1\u0104\2\376\1\u010d\62\376\16\362\1\0\1\362"+
    "\2\0\2\362\1\371\4\362\1\u010e\60\362\24\u0106\1\u0109"+
    "\1\u0106\1\u010f\63\u0106\16\376\1\0\1\376\2\0\2\376"+
    "\1\u0104\3\376\1\u0110\61\376\16\362\1\0\1\362\2\0"+
    "\2\362\1\371\5\362\1\u0111\57\362\24\u0106\1\u0109\2\u0106"+
    "\1\u0112\62\u0106\16\376\1\0\1\376\2\0\2\376\1\u0104"+
    "\4\376\1\u0113\60\376\16\362\1\0\1\362\2\0\2\362"+
    "\1\371\6\362\1\u0114\56\362\24\u0106\1\u0109\3\u0106\1\u0115"+
    "\61\u0106\16\376\1\0\1\376\2\0\2\376\1\u0104\5\376"+
    "\1\u0116\57\376\14\362\1\u0117\1\362\1\0\1\362\2\0"+
    "\2\362\1\371\65\362\24\u0106\1\u0109\4\u0106\1\u0118\60\u0106"+
    "\16\376\1\0\1\376\2\0\2\376\1\u0104\6\376\1\u0119"+
    "\56\376\16\362\1\0\1\362\2\0\2\362\1\371\7\362"+
    "\1\u011a\55\362\24\u0106\1\u0109\5\u0106\1\u011b\57\u0106\14\376"+
    "\1\u011c\1\376\1\0\1\376\2\0\2\376\1\u0104\65\376"+
    "\16\362\1\0\1\362\2\0\2\362\1\371\1\362\1\u011d"+
    "\63\362\24\u0106\1\u0109\6\u0106\1\u011e\56\u0106\16\376\1\0"+
    "\1\376\2\0\2\376\1\u0104\7\376\1\u011f\55\376\16\362"+
    "\1\0\1\362\2\0\2\362\1\371\3\362\1\u0120\61\362"+
    "\14\u0106\1\u0121\7\u0106\1\u0109\65\u0106\16\376\1\0\1\376"+
    "\2\0\2\376\1\u0104\1\376\1\u0122\63\376\16\362\1\0"+
    "\1\362\2\0\2\362\1\371\6\362\1\u0123\56\362\24\u0106"+
    "\1\u0109\11\u0106\1\u0124\53\u0106\16\376\1\0\1\376\2\0"+
    "\2\376\1\u0104\3\376\1\u0125\61\376\16\362\1\0\1\362"+
    "\2\0\2\362\1\371\10\362\1\u0126\54\362\24\u0106\1\u0109"+
    "\7\u0106\1\u0127\55\u0106\16\376\1\0\1\376\2\0\2\376"+
    "\1\u0104\6\376\1\u0128\56\376\24\u0106\1\u0109\4\u0106\1\u0129"+
    "\60\u0106\16\376\1\0\1\376\2\0\2\376\1\u0104\10\376"+
    "\1\u012a\54\376\24\u0106\1\u0109\12\u0106\1\u012b\76\u0106\1\u0109"+
    "\13\u0106\1\u012c\75\u0106\1\u0109\10\u0106\1\u012d\54\u0106";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\10\1\1\11\35\1\1\11\1\1\1\11\2\1"+
    "\2\11\1\1\3\11\1\1\6\11\1\1\1\11\1\1"+
    "\1\11\1\1\2\0\1\1\3\0\1\1\1\0\7\1"+
    "\1\0\1\1\6\0\1\1\4\0\1\1\2\0\2\1"+
    "\1\0\23\1\1\11\4\0\1\11\1\0\3\1\1\0"+
    "\1\1\1\11\2\0\1\1\1\0\1\11\1\0\1\1"+
    "\1\0\1\11\3\0\2\1\1\0\5\1\1\11\3\0"+
    "\1\11\3\0\1\1\1\0\1\1\1\0\1\1\6\0"+
    "\1\11\31\0\1\1\10\0\2\1\34\0\1\1\6\0"+
    "\1\1\4\0\5\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private StringBuilder buffer;
	private Character sepBlock;
	private char sep;
	private int stack;
	private int rexN;
	private boolean interpola;
	private Token yyval;
	private Token tokenAux;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		errores = 0;
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores léxicos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		//Añadimos final de fichero
		token("EOF",0);
		tokens.add(yyval);
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}

	/**
	 * Función invocada en caso de error
	 */	
	private void error(){
		errores++;
		token(0);
		gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);	
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error();
            }
          case 98: break;
          case 2: 
            { String txt = yytext(); 
						int tipo = Reservados.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
            }
          case 99: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 100: break;
          case 4: 
            { return token('.');
            }
          case 101: break;
          case 5: 
            { return token('+');
            }
          case 102: break;
          case 6: 
            { return token('-');
            }
          case 103: break;
          case 7: 
            { 
            }
          case 104: break;
          case 8: 
            { return token('\\');
            }
          case 105: break;
          case 9: 
            { yybegin(PD);token("", Parser.COMENTARIO, true);
						tokenAux=yyval;buffer.setLength(0);
            }
          case 106: break;
          case 10: 
            { return token('<');
            }
          case 107: break;
          case 11: 
            { return token('>');
            }
          case 108: break;
          case 12: 
            { yybegin(VAR);return token('$');
            }
          case 109: break;
          case 13: 
            { yybegin(VAR);return token('@');
            }
          case 110: break;
          case 14: 
            { yybegin(VAR);return token('%');
            }
          case 111: break;
          case 15: 
            { return token(':');
            }
          case 112: break;
          case 16: 
            { yybegin(FUN);return token('&');
            }
          case 113: break;
          case 17: 
            { return token('*');
            }
          case 114: break;
          case 18: 
            { return token('/');
            }
          case 115: break;
          case 19: 
            { return token('|');
            }
          case 116: break;
          case 20: 
            { return token('~');
            }
          case 117: break;
          case 21: 
            { return token('^');
            }
          case 118: break;
          case 22: 
            { return token('!');
            }
          case 119: break;
          case 23: 
            { return token('=');
            }
          case 120: break;
          case 24: 
            { return token('(');
            }
          case 121: break;
          case 25: 
            { return token(')');
            }
          case 122: break;
          case 26: 
            { return token('[');
            }
          case 123: break;
          case 27: 
            { return token(']');
            }
          case 124: break;
          case 28: 
            { return token('{');
            }
          case 125: break;
          case 29: 
            { return token('}');
            }
          case 126: break;
          case 30: 
            { return token(',');
            }
          case 127: break;
          case 31: 
            { return token('?');
            }
          case 128: break;
          case 32: 
            { return token(';');
            }
          case 129: break;
          case 33: 
            { yypushback(1);yybegin(YYINITIAL);
            }
          case 130: break;
          case 34: 
            { return token(Parser.VAR);
            }
          case 131: break;
          case 35: 
            { return token('#');
            }
          case 132: break;
          case 36: 
            { return token(Parser.ID);
            }
          case 133: break;
          case 37: 
            { buffer.append(yytext());
            }
          case 134: break;
          case 38: 
            { yybegin(YYINITIAL);tokenAux.setValor(buffer.toString());
						if(!tokenAux.getValor().trim().isEmpty()){yyval=tokenAux;return tokenAux.getTipo();}
            }
          case 135: break;
          case 39: 
            { tokenAux=null;yybegin(REX_P);sep='"';rexN=1;stack=0;interpola=true;return token(Parser.REX_SEP);
            }
          case 136: break;
          case 40: 
            { tokenAux=null;yybegin(REX_SEP);rexN=2;stack=0;interpola=true;return token(Parser.M_REX);
            }
          case 137: break;
          case 41: 
            { tokenAux=null;yybegin(REX_P);sep='/';rexN=1;stack=0;interpola=true;return token(Parser.REX_SEP);
            }
          case 138: break;
          case 42: 
            { tokenAux=null;yybegin(REX_SEP);rexN=3;stack=0;interpola=true;return token(Parser.S_REX);
            }
          case 139: break;
          case 43: 
            { tokenAux=null;yybegin(REX_SEP);rexN=3;stack=0;interpola=false;return token(Parser.Y_REX);
            }
          case 140: break;
          case 44: 
            { yybegin(REX_P);
							rexN--;
							sep=yytext().charAt(0);
							switch(sep){
								case '(': sepBlock='('; sep=')'; break;
								case '{': sepBlock='{'; sep='}'; break;
								case '[': sepBlock='['; sep=']'; break;
								case '\'': interpola=false; break;
								default: sepBlock=null;
							}
							return token(Parser.REX_SEP);
            }
          case 141: break;
          case 45: 
            { if(yytext().charAt(0) == sepBlock){yybegin(REX_P);yyval.setValor(""+sep+sepBlock); return yyval.getTipo();}else{errores++;token(0);gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);}
            }
          case 142: break;
          case 46: 
            { char c = yytext().charAt(0);
							if((c == sep && stack==0) || (interpola && (c == '$' || c == '@' || c == '%'))){
								if(tokenAux!=null){
									yyval=tokenAux;
									tokenAux=null;
									yypushback(1);
									yyval.setValor(buffer.toString());
									return yyval.getTipo();								
								}else if(c == sep){
									rexN--;
									token(Parser.REX_SEP);
									if(rexN>0 && sepBlock!=null){
										yybegin(REX_SEP_BLOCK);
									}else if(rexN==0){
										yybegin(REX_M);
										return yyval.getTipo();
									}
								}else{
									yybegin(REX_VAR);return token(c);
								}
							}else{
								if(sepBlock!=null){
									if(c == sepBlock){
										stack++;
									}else if(c == sep && stack!=0){
										stack--;							
									}								
								}
								if(tokenAux==null){token(Parser.PATRON);tokenAux=yyval;buffer.setLength(0);}buffer.append(yytext());						
							}
            }
          case 143: break;
          case 47: 
            { yybegin(YYINITIAL);yypushback(1);
            }
          case 144: break;
          case 48: 
            { yybegin(YYINITIAL);return token(Parser.REX_MOD);
            }
          case 145: break;
          case 49: 
            { yypushback(1);yybegin(REX_P);
            }
          case 146: break;
          case 50: 
            { return token(Parser.DECIMAL);
            }
          case 147: break;
          case 51: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 148: break;
          case 52: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 149: break;
          case 53: 
            { return token(Parser.MAS_MAS);
            }
          case 150: break;
          case 54: 
            { return token(Parser.MAS_IGUAL);
            }
          case 151: break;
          case 55: 
            { return token(Parser.MENOS_MENOS);
            }
          case 152: break;
          case 56: 
            { return token(Parser.FLECHA);
            }
          case 153: break;
          case 57: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 154: break;
          case 58: 
            { return token(Parser.CADENA_SIMPLE);
            }
          case 155: break;
          case 59: 
            { return token(Parser.CADENA_DOBLE);
            }
          case 156: break;
          case 60: 
            { return token(Parser.CADENA_COMANDO);
            }
          case 157: break;
          case 61: 
            { return token(Parser.DESP_I);
            }
          case 158: break;
          case 62: 
            { return token(Parser.NUM_LE);
            }
          case 159: break;
          case 63: 
            { return token(Parser.DESP_D);
            }
          case 160: break;
          case 64: 
            { return token(Parser.NUM_GE);
            }
          case 161: break;
          case 65: 
            { return token(Parser.MOD_IGUAL);
            }
          case 162: break;
          case 66: 
            { return token(Parser.AMBITO);
            }
          case 163: break;
          case 67: 
            { return token(Parser.LAND);
            }
          case 164: break;
          case 68: 
            { return token(Parser.AND_IGUAL);
            }
          case 165: break;
          case 69: 
            { return token(Parser.POW);
            }
          case 166: break;
          case 70: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 167: break;
          case 71: 
            { return token(Parser.DLOR);
            }
          case 168: break;
          case 72: 
            { return token(Parser.DIV_IGUAL);
            }
          case 169: break;
          case 73: 
            { return token(Parser.LOR);
            }
          case 170: break;
          case 74: 
            { return token(Parser.OR_IGUAL);
            }
          case 171: break;
          case 75: 
            { return token(Parser.SMART_EQ);
            }
          case 172: break;
          case 76: 
            { return token(Parser.XOR_IGUAL);
            }
          case 173: break;
          case 77: 
            { yybegin(REX_T);return token(Parser.STR_NO_REX);
            }
          case 174: break;
          case 78: 
            { return token(Parser.NUM_NE);
            }
          case 175: break;
          case 79: 
            { yybegin(REX_T);return token(Parser.STR_REX);
            }
          case 176: break;
          case 80: 
            { return token(Parser.NUM_EQ);
            }
          case 177: break;
          case 81: 
            { return token(Parser.X_IGUAL);
            }
          case 178: break;
          case 82: 
            { if(tokenAux==null){token(Parser.PATRON);tokenAux=yyval;buffer.setLength(0);}buffer.append(yytext());
            }
          case 179: break;
          case 83: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 180: break;
          case 84: 
            { return token(Parser.CMP);
            }
          case 181: break;
          case 85: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 182: break;
          case 86: 
            { return token(Parser.LAND_IGUAL);
            }
          case 183: break;
          case 87: 
            { return token(Parser.POW_IGUAL);
            }
          case 184: break;
          case 88: 
            { return token(Parser.DLOR_IGUAL);
            }
          case 185: break;
          case 89: 
            { return token(Parser.LOR_IGUAL);
            }
          case 186: break;
          case 90: 
            { String t = yytext(); Integer tipo = Reservados.buscarEtiqueta(t);
						if (tipo == null){buffer.append(t);token(t, 0);
						gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);}
						else{return token(t, tipo, true);}
            }
          case 187: break;
          case 91: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 188: break;
          case 92: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 189: break;
          case 93: 
            { return token(Parser.STDIN);
            }
          case 190: break;
          case 94: 
            { return token(Parser.STDERR);
            }
          case 191: break;
          case 95: 
            { return token(Parser.STDOUT);
            }
          case 192: break;
          case 96: 
            { return token(Parser.LINEA_JAVA);
            }
          case 193: break;
          case 97: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
