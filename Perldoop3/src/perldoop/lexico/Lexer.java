/* The following code was generated by JFlex 1.6.1 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.*;
import perldoop.sintactico.Parser;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VAR = 2;
  public static final int PD = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\113\1\16\1\21\1\21\1\20\22\0\1\113\1\70\1\22"+
    "\1\45\1\57\1\61\1\63\1\15\1\72\1\73\1\64\1\13\1\100"+
    "\1\14\1\11\1\41\1\2\1\10\6\6\2\3\1\62\1\102\1\46"+
    "\1\71\1\50\1\101\1\60\1\5\1\7\1\5\1\105\1\12\1\5"+
    "\2\1\1\106\4\1\1\107\1\110\2\1\1\112\1\103\1\104\1\111"+
    "\2\1\1\4\2\1\1\74\1\17\1\75\1\67\1\1\1\23\1\33"+
    "\1\51\1\37\1\32\1\40\1\56\1\36\1\55\1\24\1\53\1\52"+
    "\1\35\1\26\1\47\1\30\1\31\1\55\1\44\1\25\1\43\1\34"+
    "\1\54\1\55\1\27\1\42\1\55\1\76\1\65\1\77\1\66\6\0"+
    "\1\21\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\3\1\3\2\1\11\2\2\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\7\1\41\1\42"+
    "\1\43\1\41\1\44\1\45\1\44\2\0\1\3\3\0"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\0\1\56\6\0\1\57\4\0\1\60\3\0"+
    "\1\61\1\62\2\0\1\63\1\64\1\0\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\70\5\0"+
    "\2\3\1\46\1\0\2\56\2\0\1\57\1\0\1\57"+
    "\1\0\1\60\1\0\1\60\3\0\1\105\5\0\1\106"+
    "\1\107\1\0\1\110\1\111\1\112\1\113\3\0\1\114"+
    "\1\115\3\0\1\56\1\0\1\57\1\0\1\60\1\0"+
    "\1\116\2\0\1\105\2\0\1\117\7\0\1\120\4\0"+
    "\1\116\4\0\1\117\42\0\1\121\15\0\1\122\1\123"+
    "\60\0\1\124\13\0\1\124\11\0\1\125\1\124\3\7"+
    "\6\0\1\125\1\124\1\0\2\7\1\0\1\7\1\0"+
    "\1\125\1\124\2\7\1\0\1\125\1\124\1\0\1\125"+
    "\1\124\1\0\1\125\1\124\1\0\1\125\1\124\1\0"+
    "\1\125\1\124\1\0\1\125\1\124\1\0\1\125\1\124"+
    "\1\0\1\125\1\124\1\0\1\125\1\124\1\0\1\125"+
    "\1\7\1\0\1\125\1\0\1\7\2\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\344\0\u0344\0\u0390\0\u03dc"+
    "\0\u0428\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c"+
    "\0\u0688\0\344\0\344\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804"+
    "\0\u0850\0\u089c\0\u08e8\0\u0934\0\344\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\344\0\344\0\u0344\0\u0980"+
    "\0\u0344\0\u09cc\0\u0344\0\u0344\0\u0a18\0\344\0\u0a64\0\u0ab0"+
    "\0\u0afc\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\u02f8\0\344\0\u0c78\0\u0cc4"+
    "\0\u0d10\0\u0390\0\u0d5c\0\u0da8\0\344\0\u0df4\0\u03dc\0\u0e40"+
    "\0\u0e8c\0\344\0\u0ed8\0\u0f24\0\u0f70\0\344\0\344\0\u0fbc"+
    "\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138\0\344\0\344\0\344"+
    "\0\u1184\0\344\0\u11d0\0\344\0\u121c\0\344\0\344\0\344"+
    "\0\344\0\344\0\344\0\344\0\u0344\0\u1268\0\u12b4\0\u1300"+
    "\0\u134c\0\u1398\0\u0b48\0\u0b94\0\u13e4\0\u1430\0\u02f8\0\u0344"+
    "\0\u147c\0\u14c8\0\u0390\0\u1514\0\u0344\0\u1560\0\u03dc\0\u15ac"+
    "\0\u0344\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0"+
    "\0\u180c\0\u1858\0\344\0\344\0\u18a4\0\344\0\344\0\344"+
    "\0\344\0\u18f0\0\u193c\0\u1988\0\u0344\0\u0344\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u0cc4\0\u1ab8\0\u0da8\0\u1b04\0\u0e8c\0\u1b50\0\u1b9c"+
    "\0\u1be8\0\u1c34\0\u0f70\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0"+
    "\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u0344\0\u1f78\0\u1fc4"+
    "\0\u2010\0\u205c\0\u1644\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u1774"+
    "\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec"+
    "\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c"+
    "\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u2b0c"+
    "\0\u2b58\0\u2ba4\0\344\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80"+
    "\0\344\0\344\0\u2fcc\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608"+
    "\0\u3654\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868"+
    "\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8"+
    "\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28"+
    "\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88"+
    "\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150\0\u419c\0\u41e8"+
    "\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc\0\u4448"+
    "\0\u4494\0\u44e0\0\u02f8\0\u0390\0\u03dc\0\u452c\0\u4578\0\u45c4"+
    "\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u0f24\0\u0f70"+
    "\0\u47d8\0\u0fbc\0\u4824\0\u4870\0\u48bc\0\u1644\0\u1774\0\u4908"+
    "\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c\0\u4b68"+
    "\0\u4bb4\0\u4c00\0\u4c4c\0\u4c98\0\u4ce4\0\u4d30\0\u4d7c\0\u4dc8"+
    "\0\u4e14\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u5028"+
    "\0\u5074\0\u50c0\0\u510c\0\u5158\0\u3e0c\0\u51a4\0\u51f0\0\u523c"+
    "\0\u4494\0\u5288\0\u52d4\0\u4824";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\5\1\7\1\5\1\7"+
    "\1\10\1\5\1\11\1\12\1\13\1\14\1\15\1\14"+
    "\1\16\1\17\1\20\1\5\1\21\1\22\1\23\11\5"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\5\1\31"+
    "\6\5\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\10\5\1\56\1\57"+
    "\1\60\2\57\2\60\1\57\1\60\2\57\1\60\3\57"+
    "\1\0\1\57\2\0\2\57\15\60\1\57\3\60\1\61"+
    "\1\57\1\60\1\57\6\60\3\57\1\62\20\57\10\60"+
    "\1\57\16\63\1\64\1\63\1\14\25\63\1\65\45\63"+
    "\16\66\1\0\1\66\2\0\23\66\1\67\47\66\10\5"+
    "\1\66\1\5\3\66\1\0\1\66\2\0\2\66\15\5"+
    "\1\66\3\5\1\67\1\66\1\5\1\66\6\5\24\66"+
    "\10\5\3\66\1\70\1\71\1\72\1\66\1\70\1\73"+
    "\1\70\1\74\4\66\1\0\1\66\2\0\5\66\1\72"+
    "\15\66\1\67\3\66\1\73\44\66\2\7\2\66\1\7"+
    "\1\66\1\7\1\74\1\75\3\66\1\0\1\66\2\0"+
    "\16\66\1\75\4\66\1\67\50\66\2\74\2\66\1\74"+
    "\1\66\1\74\1\76\4\66\1\0\1\66\2\0\23\66"+
    "\1\67\23\66\1\77\35\66\1\100\2\66\1\0\1\66"+
    "\2\0\23\66\1\67\23\66\1\101\36\66\1\102\1\66"+
    "\1\0\1\66\2\0\23\66\1\67\2\66\1\103\20\66"+
    "\1\104\22\66\15\105\1\106\1\0\1\107\2\110\23\105"+
    "\1\111\46\105\114\0\16\112\1\0\1\113\2\114\1\115"+
    "\22\112\1\116\46\112\16\117\1\0\1\120\2\121\1\117"+
    "\1\122\21\117\1\123\46\117\1\66\10\5\1\66\1\5"+
    "\3\66\1\0\1\66\2\0\2\66\15\5\1\124\3\5"+
    "\1\67\1\66\1\5\1\66\6\5\24\66\10\5\2\66"+
    "\10\5\1\66\1\5\3\66\1\0\1\66\2\0\2\66"+
    "\15\5\1\125\3\5\1\67\1\66\1\5\1\66\6\5"+
    "\24\66\10\5\2\66\10\5\1\66\1\5\3\66\1\0"+
    "\1\66\2\0\2\66\15\5\1\66\3\5\1\67\1\66"+
    "\1\5\1\66\6\5\12\66\1\126\11\66\10\5\17\66"+
    "\1\0\1\66\2\0\23\66\1\67\23\66\1\127\23\66"+
    "\10\5\1\66\1\5\3\66\1\0\1\66\2\0\2\66"+
    "\15\5\1\130\3\5\1\67\1\66\1\5\1\66\6\5"+
    "\24\66\10\5\2\66\10\5\1\66\1\5\3\66\1\0"+
    "\1\66\2\0\2\66\15\5\1\66\2\5\1\25\1\67"+
    "\1\66\1\5\1\66\6\5\24\66\10\5\17\66\1\0"+
    "\1\66\2\0\23\66\1\67\1\131\63\66\1\0\1\66"+
    "\2\0\23\66\1\67\1\132\22\66\1\133\11\66\1\134"+
    "\26\66\1\0\1\66\2\0\23\66\1\67\2\66\1\135"+
    "\20\66\1\136\40\66\1\0\1\66\2\0\23\66\1\67"+
    "\23\66\1\137\40\66\1\0\1\66\2\0\23\66\1\67"+
    "\14\66\1\140\47\66\1\0\1\66\2\0\23\66\1\67"+
    "\15\66\1\141\5\66\1\142\40\66\1\0\1\66\2\0"+
    "\23\66\1\67\16\66\1\143\4\66\1\144\40\66\1\0"+
    "\1\66\2\0\23\66\1\67\17\66\1\145\3\66\1\146"+
    "\40\66\1\0\1\66\2\0\23\66\1\67\20\66\1\147"+
    "\43\66\1\0\1\66\2\0\23\66\1\67\23\66\1\150"+
    "\40\66\1\0\1\66\2\0\23\66\1\67\20\66\1\151"+
    "\2\66\1\152\40\66\1\0\1\66\2\0\23\66\1\67"+
    "\2\66\1\53\15\66\1\153\2\66\1\154\22\66\1\0"+
    "\10\60\1\0\1\60\11\0\15\60\1\0\3\60\2\0"+
    "\1\60\1\0\6\60\24\0\10\60\63\0\1\155\33\0"+
    "\1\156\1\157\2\0\1\157\1\0\1\157\13\0\15\160"+
    "\1\0\3\160\2\0\1\160\1\0\6\160\3\161\32\0"+
    "\16\66\1\0\1\66\2\0\23\66\1\67\1\162\47\66"+
    "\1\70\1\71\2\66\1\70\1\66\1\70\1\74\4\66"+
    "\1\0\1\66\2\0\23\66\1\67\50\66\2\71\2\66"+
    "\1\71\1\66\1\71\1\74\4\66\1\0\1\66\2\0"+
    "\23\66\1\67\50\66\2\163\1\66\4\163\1\66\1\163"+
    "\3\66\1\0\1\66\2\0\10\66\2\163\3\66\2\163"+
    "\4\66\1\67\3\66\1\163\4\66\1\163\26\66\1\163"+
    "\10\66\1\164\5\66\1\164\5\66\1\0\1\66\2\0"+
    "\23\66\1\67\50\66\2\74\2\66\1\74\1\66\1\74"+
    "\1\66\1\75\3\66\1\0\1\66\2\0\16\66\1\75"+
    "\4\66\1\67\51\66\1\165\2\66\1\165\1\66\1\165"+
    "\2\66\1\166\2\66\1\0\1\66\2\0\23\66\1\67"+
    "\46\66\15\105\1\167\1\0\1\107\2\110\23\105\1\111"+
    "\46\105\15\110\1\170\1\0\1\171\74\110\15\105\1\106"+
    "\1\0\1\107\2\110\23\105\1\111\1\172\45\105\16\112"+
    "\1\0\1\113\2\114\1\173\22\112\1\116\46\112\16\114"+
    "\1\0\1\174\2\114\1\175\71\114\16\112\1\0\1\113"+
    "\2\114\1\115\22\112\1\116\1\176\45\112\16\117\1\0"+
    "\1\120\2\121\1\117\1\177\21\117\1\123\46\117\16\121"+
    "\1\0\1\200\3\121\1\201\70\121\16\117\1\0\1\120"+
    "\2\121\1\117\1\122\21\117\1\123\1\202\45\117\16\124"+
    "\1\0\1\124\2\0\17\124\1\203\3\124\1\204\46\124"+
    "\16\125\1\0\1\125\2\0\17\125\1\205\3\125\1\206"+
    "\46\125\16\130\1\0\1\130\2\0\17\130\1\207\3\130"+
    "\1\210\46\130\16\66\1\0\1\66\2\0\2\66\1\211"+
    "\20\66\1\67\5\66\1\212\56\66\1\0\1\66\2\0"+
    "\23\66\1\67\23\66\1\213\40\66\1\0\1\66\2\0"+
    "\23\66\1\67\2\66\1\214\61\66\1\0\1\66\2\0"+
    "\23\66\1\67\36\66\1\215\25\66\1\0\1\66\2\0"+
    "\23\66\1\67\23\66\1\216\40\66\1\0\1\66\2\0"+
    "\23\66\1\67\23\66\1\217\40\66\1\0\1\66\2\0"+
    "\23\66\1\67\23\66\1\220\40\66\1\0\1\66\2\0"+
    "\23\66\1\67\23\66\1\221\22\66\2\0\1\222\1\0"+
    "\1\223\1\0\1\222\1\224\1\222\16\0\1\223\20\0"+
    "\1\225\1\224\44\0\2\157\2\0\1\157\1\0\1\157"+
    "\37\0\1\225\67\0\15\160\1\0\3\160\2\0\1\160"+
    "\1\226\6\160\36\0\1\227\2\0\2\227\1\0\1\227"+
    "\2\0\1\227\11\0\15\227\1\0\3\227\2\0\1\227"+
    "\1\0\6\227\24\0\10\227\1\0\16\66\1\0\1\66"+
    "\2\0\2\66\1\230\20\66\1\67\50\66\2\165\2\66"+
    "\1\165\1\66\1\165\5\66\1\0\1\66\2\0\23\66"+
    "\1\67\62\66\1\231\1\66\1\0\1\66\2\0\23\66"+
    "\1\67\46\66\15\110\1\232\1\0\1\171\74\110\15\105"+
    "\1\106\1\0\1\107\2\110\2\105\1\233\20\105\1\111"+
    "\46\105\16\114\1\0\1\174\2\114\1\234\71\114\16\112"+
    "\1\0\1\113\2\114\1\115\1\112\1\235\20\112\1\116"+
    "\46\112\16\121\1\0\1\200\3\121\1\236\70\121\16\117"+
    "\1\0\1\120\2\121\1\117\1\122\1\237\20\117\1\123"+
    "\46\117\16\203\1\0\1\203\2\0\17\203\1\240\3\203"+
    "\1\241\46\203\16\124\1\0\1\124\2\0\17\124\1\203"+
    "\3\124\1\204\1\242\45\124\16\125\1\0\1\125\2\0"+
    "\2\125\13\243\1\244\1\243\1\205\3\125\1\206\64\125"+
    "\1\0\1\125\2\0\17\125\1\205\3\125\1\206\1\245"+
    "\45\125\16\207\1\0\1\207\2\0\17\207\1\246\3\207"+
    "\1\247\46\207\16\130\1\0\1\130\2\0\17\130\1\207"+
    "\3\130\1\210\1\250\45\130\16\66\1\0\1\66\2\0"+
    "\14\66\1\251\6\66\1\67\64\66\1\0\1\66\2\0"+
    "\11\66\1\252\11\66\1\67\64\66\1\0\1\66\2\0"+
    "\23\66\1\67\37\66\1\253\6\66\2\0\1\222\3\0"+
    "\1\222\1\0\1\222\37\0\1\225\45\0\2\254\1\0"+
    "\4\254\1\0\1\254\17\0\2\254\3\0\2\254\10\0"+
    "\1\254\4\0\1\254\26\0\1\254\10\0\1\255\5\0"+
    "\1\255\104\0\10\227\1\0\1\227\11\0\15\227\1\0"+
    "\3\227\2\0\1\227\1\256\6\227\24\0\10\227\1\0"+
    "\16\66\1\0\1\66\2\0\14\66\1\257\6\66\1\67"+
    "\51\66\1\165\2\66\1\165\1\66\1\165\5\66\1\0"+
    "\1\66\2\0\23\66\1\67\46\66\15\105\1\106\1\0"+
    "\1\107\2\110\14\105\1\260\6\105\1\111\46\105\16\112"+
    "\1\0\1\113\2\114\1\115\13\112\1\261\6\112\1\116"+
    "\46\112\16\117\1\0\1\120\2\121\1\117\1\122\12\117"+
    "\1\262\6\117\1\123\46\117\16\203\1\0\1\203\2\0"+
    "\2\203\13\263\1\264\1\263\1\240\3\203\1\241\64\203"+
    "\1\0\1\203\2\0\17\203\1\240\3\203\1\241\1\265"+
    "\45\203\16\124\1\0\1\124\2\0\2\124\1\266\14\124"+
    "\1\203\3\124\1\204\46\124\16\125\1\0\1\125\2\0"+
    "\14\125\1\243\2\125\1\205\3\125\1\206\64\125\1\0"+
    "\1\125\2\0\2\125\1\267\14\125\1\205\3\125\1\206"+
    "\46\125\16\207\1\0\1\207\2\0\2\207\13\270\1\271"+
    "\1\270\1\246\3\207\1\247\64\207\1\0\1\207\2\0"+
    "\17\207\1\246\3\207\1\247\1\272\45\207\16\130\1\0"+
    "\1\130\2\0\2\130\1\273\14\130\1\207\3\130\1\210"+
    "\46\130\16\66\1\0\1\66\2\0\23\66\1\67\1\66"+
    "\1\274\62\66\1\0\1\66\2\0\23\66\1\67\6\66"+
    "\1\275\51\66\1\276\3\66\1\0\1\66\2\0\23\66"+
    "\1\67\40\66\1\277\1\66\1\300\3\66\2\0\2\254"+
    "\1\0\4\254\1\0\1\254\17\0\2\254\3\0\2\254"+
    "\7\0\1\225\1\254\4\0\1\254\26\0\1\254\10\0"+
    "\1\255\5\0\1\255\37\0\1\225\43\0\16\66\1\0"+
    "\1\66\2\0\23\66\1\67\1\66\1\301\44\66\15\105"+
    "\1\106\1\0\1\107\2\110\23\105\1\111\1\105\1\302"+
    "\44\105\16\112\1\0\1\113\2\114\1\115\22\112\1\116"+
    "\1\112\1\303\44\112\16\117\1\0\1\120\2\121\1\117"+
    "\1\122\21\117\1\123\1\117\1\304\44\117\16\203\1\0"+
    "\1\203\2\0\14\203\1\263\2\203\1\240\3\203\1\241"+
    "\64\203\1\0\1\203\2\0\2\203\1\305\14\203\1\240"+
    "\3\203\1\241\46\203\16\124\1\0\1\124\2\0\14\124"+
    "\1\306\2\124\1\203\3\124\1\204\46\124\16\125\1\0"+
    "\1\125\2\0\14\125\1\307\2\125\1\205\3\125\1\206"+
    "\46\125\16\207\1\0\1\207\2\0\14\207\1\270\2\207"+
    "\1\246\3\207\1\247\64\207\1\0\1\207\2\0\2\207"+
    "\1\310\14\207\1\246\3\207\1\247\46\207\16\130\1\0"+
    "\1\130\2\0\14\130\1\311\2\130\1\207\3\130\1\210"+
    "\46\130\16\66\1\0\1\66\2\0\6\66\1\312\14\66"+
    "\1\67\64\66\1\0\1\66\2\0\11\66\1\313\11\66"+
    "\1\67\64\66\1\0\1\66\2\0\23\66\1\67\44\66"+
    "\1\314\17\66\1\0\1\66\2\0\23\66\1\67\41\66"+
    "\1\315\22\66\1\0\1\66\2\0\23\66\1\67\43\66"+
    "\1\316\20\66\1\0\1\66\2\0\6\66\1\317\14\66"+
    "\1\67\46\66\15\105\1\106\1\0\1\107\2\110\6\105"+
    "\1\320\14\105\1\111\46\105\16\112\1\0\1\113\2\114"+
    "\1\115\5\112\1\321\14\112\1\116\46\112\16\117\1\0"+
    "\1\120\2\121\1\117\1\122\4\117\1\322\14\117\1\123"+
    "\46\117\16\203\1\0\1\203\2\0\14\203\1\323\2\203"+
    "\1\240\3\203\1\241\46\203\16\124\1\0\1\124\2\0"+
    "\17\124\1\203\3\124\1\204\1\124\1\324\44\124\16\125"+
    "\1\0\1\125\2\0\17\125\1\205\3\125\1\206\1\125"+
    "\1\325\44\125\16\207\1\0\1\207\2\0\14\207\1\326"+
    "\2\207\1\246\3\207\1\247\46\207\16\130\1\0\1\130"+
    "\2\0\17\130\1\207\3\130\1\210\1\130\1\327\44\130"+
    "\16\66\1\0\1\66\2\0\22\66\1\330\1\67\62\66"+
    "\1\331\1\66\1\0\1\66\2\0\23\66\1\67\64\66"+
    "\1\0\1\66\2\0\23\66\1\67\44\66\1\332\17\66"+
    "\1\0\1\66\2\0\23\66\1\67\2\66\1\333\61\66"+
    "\1\0\1\66\2\0\23\66\1\67\36\66\1\334\25\66"+
    "\1\0\1\66\2\0\22\66\1\335\1\67\46\66\15\105"+
    "\1\106\1\0\1\107\2\110\22\105\1\336\1\111\46\105"+
    "\16\112\1\0\1\113\2\114\1\115\21\112\1\337\1\116"+
    "\46\112\16\117\1\0\1\120\2\121\1\117\1\122\20\117"+
    "\1\340\1\123\46\117\16\203\1\0\1\203\2\0\17\203"+
    "\1\240\3\203\1\241\1\203\1\341\44\203\16\124\1\0"+
    "\1\124\2\0\6\124\1\342\10\124\1\203\3\124\1\204"+
    "\46\124\16\125\1\0\1\125\2\0\6\125\1\343\10\125"+
    "\1\205\3\125\1\206\46\125\16\207\1\0\1\207\2\0"+
    "\17\207\1\246\3\207\1\247\1\207\1\344\44\207\16\130"+
    "\1\0\1\130\2\0\6\130\1\345\10\130\1\207\3\130"+
    "\1\210\46\130\16\66\1\0\1\66\2\0\16\66\1\346"+
    "\4\66\1\67\64\66\1\0\1\66\2\0\2\66\1\347"+
    "\10\66\1\350\7\66\1\67\64\66\1\0\1\66\2\0"+
    "\23\66\1\67\2\66\1\351\61\66\1\0\1\66\2\0"+
    "\23\66\1\67\2\66\1\352\61\66\1\0\1\66\2\0"+
    "\16\66\1\353\4\66\1\67\46\66\15\105\1\106\1\0"+
    "\1\107\2\110\16\105\1\354\4\105\1\111\46\105\16\112"+
    "\1\0\1\113\2\114\1\115\15\112\1\355\4\112\1\116"+
    "\46\112\16\117\1\0\1\120\2\121\1\117\1\122\14\117"+
    "\1\356\4\117\1\123\46\117\16\203\1\0\1\203\2\0"+
    "\6\203\1\357\10\203\1\240\3\203\1\241\46\203\16\124"+
    "\1\0\1\124\2\0\17\124\1\203\2\124\1\360\1\204"+
    "\46\124\16\125\1\0\1\125\2\0\17\125\1\205\2\125"+
    "\1\361\1\206\46\125\16\207\1\0\1\207\2\0\6\207"+
    "\1\362\10\207\1\246\3\207\1\247\46\207\16\130\1\0"+
    "\1\130\2\0\17\130\1\207\2\130\1\363\1\210\46\130"+
    "\14\66\1\364\1\66\1\0\1\66\2\0\23\66\1\67"+
    "\64\66\1\0\1\66\2\0\4\66\1\365\16\66\1\67"+
    "\64\66\1\0\1\66\2\0\2\66\1\366\20\66\1\67"+
    "\62\66\1\367\1\66\1\0\1\66\2\0\23\66\1\67"+
    "\46\66\14\105\1\370\1\106\1\0\1\107\2\110\23\105"+
    "\1\111\46\105\14\112\1\371\1\112\1\0\1\113\2\114"+
    "\1\115\22\112\1\116\46\112\14\117\1\372\1\117\1\0"+
    "\1\120\2\121\1\117\1\122\21\117\1\123\46\117\16\203"+
    "\1\0\1\203\2\0\17\203\1\240\2\203\1\373\1\241"+
    "\46\203\16\124\1\0\1\124\2\0\16\124\1\374\1\203"+
    "\3\124\1\204\46\124\16\125\1\0\1\125\2\0\16\125"+
    "\1\375\1\205\3\125\1\206\46\125\16\207\1\0\1\207"+
    "\2\0\17\207\1\246\2\207\1\376\1\247\46\207\16\130"+
    "\1\0\1\130\2\0\16\130\1\377\1\207\3\130\1\210"+
    "\46\130\16\66\1\0\1\66\2\0\13\66\1\u0100\7\66"+
    "\1\67\3\66\1\u0101\60\66\1\0\1\66\2\0\7\66"+
    "\1\u0102\13\66\1\67\64\66\1\0\1\66\2\0\23\66"+
    "\1\67\1\66\1\u0103\62\66\1\0\1\66\2\0\13\66"+
    "\1\u0100\7\66\1\67\46\66\15\105\1\106\1\0\1\107"+
    "\2\110\13\105\1\u0104\7\105\1\111\46\105\16\112\1\0"+
    "\1\113\2\114\1\115\12\112\1\u0105\7\112\1\116\46\112"+
    "\16\117\1\0\1\120\2\121\1\117\1\122\11\117\1\u0106"+
    "\7\117\1\123\46\117\16\203\1\0\1\203\2\0\16\203"+
    "\1\u0107\1\240\3\203\1\241\46\203\14\124\1\u0108\1\124"+
    "\1\0\1\124\2\0\17\124\1\203\3\124\1\204\46\124"+
    "\14\125\1\u0109\1\125\1\0\1\125\2\0\17\125\1\205"+
    "\3\125\1\206\46\125\16\207\1\0\1\207\2\0\16\207"+
    "\1\u010a\1\246\3\207\1\247\46\207\14\130\1\u010b\1\130"+
    "\1\0\1\130\2\0\17\130\1\207\3\130\1\210\46\130"+
    "\16\66\1\0\1\66\2\0\2\66\1\u010c\20\66\1\67"+
    "\64\66\1\0\1\66\2\0\13\66\1\u010d\7\66\1\67"+
    "\64\66\1\0\1\66\2\0\6\66\1\u010e\14\66\1\67"+
    "\64\66\1\0\1\66\2\0\16\66\1\u010f\4\66\1\67"+
    "\46\66\15\105\1\106\1\0\1\107\2\110\2\105\1\u0110"+
    "\20\105\1\111\46\105\16\112\1\0\1\113\2\114\1\115"+
    "\1\112\1\u0111\20\112\1\116\46\112\16\117\1\0\1\120"+
    "\2\121\1\117\1\122\1\u0112\20\117\1\123\46\117\14\203"+
    "\1\u0113\1\203\1\0\1\203\2\0\17\203\1\240\3\203"+
    "\1\241\46\203\16\124\1\0\1\124\2\0\13\124\1\u0114"+
    "\3\124\1\203\3\124\1\204\46\124\16\125\1\0\1\125"+
    "\2\0\13\125\1\u0115\3\125\1\205\3\125\1\206\46\125"+
    "\14\207\1\u0116\1\207\1\0\1\207\2\0\17\207\1\246"+
    "\3\207\1\247\46\207\16\130\1\0\1\130\2\0\13\130"+
    "\1\u0117\3\130\1\207\3\130\1\210\46\130\16\66\1\0"+
    "\1\66\2\0\23\66\1\67\1\66\1\u0118\62\66\1\0"+
    "\1\66\2\0\6\66\1\u0119\14\66\1\67\64\66\1\0"+
    "\1\66\2\0\22\66\1\u011a\1\67\64\66\1\0\1\66"+
    "\2\0\23\66\1\67\2\66\1\u011b\43\66\15\105\1\106"+
    "\1\0\1\107\2\110\23\105\1\111\1\105\1\u011c\44\105"+
    "\16\112\1\0\1\113\2\114\1\115\22\112\1\116\1\112"+
    "\1\u011d\44\112\16\117\1\0\1\120\2\121\1\117\1\122"+
    "\21\117\1\123\1\117\1\u011e\44\117\16\203\1\0\1\203"+
    "\2\0\13\203\1\u011f\3\203\1\240\3\203\1\241\46\203"+
    "\16\124\1\0\1\124\2\0\2\124\1\u0120\14\124\1\203"+
    "\3\124\1\204\46\124\16\125\1\0\1\125\2\0\2\125"+
    "\1\u0121\14\125\1\205\3\125\1\206\46\125\16\207\1\0"+
    "\1\207\2\0\13\207\1\u0122\3\207\1\246\3\207\1\247"+
    "\46\207\16\130\1\0\1\130\2\0\2\130\1\u0123\14\130"+
    "\1\207\3\130\1\210\46\130\16\66\1\0\1\66\2\0"+
    "\16\66\1\u0124\4\66\1\67\64\66\1\0\1\66\2\0"+
    "\15\66\1\u0125\5\66\1\67\64\66\1\0\1\66\2\0"+
    "\21\66\1\u0126\1\66\1\67\46\66\16\u011b\1\0\1\u011b"+
    "\2\0\23\u011b\1\u0127\46\u011b\15\105\1\106\1\0\1\107"+
    "\2\110\16\105\1\u0128\4\105\1\111\46\105\16\112\1\0"+
    "\1\113\2\114\1\115\15\112\1\u0129\4\112\1\116\46\112"+
    "\16\117\1\0\1\120\2\121\1\117\1\122\14\117\1\u012a"+
    "\4\117\1\123\46\117\16\203\1\0\1\203\2\0\2\203"+
    "\1\u012b\14\203\1\240\3\203\1\241\46\203\16\124\1\0"+
    "\1\124\2\0\17\124\1\203\3\124\1\204\1\124\1\u012c"+
    "\44\124\16\125\1\0\1\125\2\0\17\125\1\205\3\125"+
    "\1\206\1\125\1\u012d\44\125\16\207\1\0\1\207\2\0"+
    "\2\207\1\u012e\14\207\1\246\3\207\1\247\46\207\16\130"+
    "\1\0\1\130\2\0\17\130\1\207\3\130\1\210\1\130"+
    "\1\u012f\44\130\16\66\1\0\1\66\2\0\23\66\1\67"+
    "\2\66\1\56\61\66\1\0\1\66\2\0\23\66\1\67"+
    "\4\66\1\u0130\57\66\1\0\1\66\2\0\23\66\1\67"+
    "\2\66\1\u0131\43\66\16\u011b\1\0\1\u011b\2\0\23\u011b"+
    "\1\u0127\1\u0132\45\u011b\15\105\1\106\1\0\1\107\2\110"+
    "\23\105\1\111\2\105\1\u0133\43\105\16\112\1\0\1\113"+
    "\2\114\1\115\22\112\1\116\2\112\1\u0134\43\112\16\117"+
    "\1\0\1\120\2\121\1\117\1\122\21\117\1\123\2\117"+
    "\1\u0135\43\117\16\203\1\0\1\203\2\0\17\203\1\240"+
    "\3\203\1\241\1\203\1\u0136\44\203\16\124\1\0\1\124"+
    "\2\0\16\124\1\u0137\1\203\3\124\1\204\46\124\16\125"+
    "\1\0\1\125\2\0\16\125\1\u0138\1\205\3\125\1\206"+
    "\46\125\16\207\1\0\1\207\2\0\17\207\1\246\3\207"+
    "\1\247\1\207\1\u0139\44\207\16\130\1\0\1\130\2\0"+
    "\16\130\1\u013a\1\207\3\130\1\210\46\130\16\66\1\0"+
    "\1\66\2\0\23\66\1\67\2\66\1\u013b\43\66\16\u0131"+
    "\1\0\1\u0131\2\0\23\u0131\1\u013c\46\u0131\16\u011b\1\0"+
    "\1\u011b\2\0\2\u011b\1\u013d\20\u011b\1\u0127\46\u011b\16\203"+
    "\1\0\1\203\2\0\16\203\1\u013e\1\240\3\203\1\241"+
    "\46\203\16\124\1\0\1\124\2\0\17\124\1\203\3\124"+
    "\1\204\2\124\1\u013f\43\124\16\125\1\0\1\125\2\0"+
    "\17\125\1\205\3\125\1\206\2\125\1\u0140\43\125\16\207"+
    "\1\0\1\207\2\0\16\207\1\u0141\1\246\3\207\1\247"+
    "\46\207\16\130\1\0\1\130\2\0\17\130\1\207\3\130"+
    "\1\210\2\130\1\u0142\43\130\16\66\1\u0143\1\66\2\0"+
    "\23\66\1\67\46\66\16\u0131\1\0\1\u0131\2\0\23\u0131"+
    "\1\u013c\1\u0144\45\u0131\16\u011b\1\0\1\u011b\2\0\14\u011b"+
    "\1\u0145\6\u011b\1\u0127\46\u011b\16\203\1\0\1\203\2\0"+
    "\17\203\1\240\3\203\1\241\2\203\1\u0146\43\203\16\207"+
    "\1\0\1\207\2\0\17\207\1\246\3\207\1\247\2\207"+
    "\1\u0147\43\207\45\u0143\1\u0148\46\u0143\16\u0131\1\0\1\u0131"+
    "\2\0\2\u0131\1\u0149\20\u0131\1\u013c\46\u0131\16\u011b\1\0"+
    "\1\u011b\2\0\23\u011b\1\u0127\1\u011b\1\u014a\44\u011b\45\u0143"+
    "\1\u0148\1\u014b\45\u0143\16\u0131\1\0\1\u0131\2\0\14\u0131"+
    "\1\u014c\6\u0131\1\u013c\46\u0131\16\u011b\1\0\1\u011b\2\0"+
    "\6\u011b\1\u014d\14\u011b\1\u0127\46\u011b\24\u0143\1\u014e\20\u0143"+
    "\1\u0148\46\u0143\16\u0131\1\0\1\u0131\2\0\23\u0131\1\u013c"+
    "\1\u0131\1\u014f\44\u0131\16\u011b\1\0\1\u011b\2\0\22\u011b"+
    "\1\u0150\1\u0127\46\u011b\36\u0143\1\u0151\6\u0143\1\u0148\46\u0143"+
    "\16\u0131\1\0\1\u0131\2\0\6\u0131\1\u0152\14\u0131\1\u013c"+
    "\46\u0131\16\u011b\1\0\1\u011b\2\0\16\u011b\1\u0153\4\u011b"+
    "\1\u0127\46\u011b\45\u0143\1\u0148\1\u0143\1\u0154\44\u0143\16\u0131"+
    "\1\0\1\u0131\2\0\22\u0131\1\u0155\1\u013c\46\u0131\14\u011b"+
    "\1\u0156\1\u011b\1\0\1\u011b\2\0\23\u011b\1\u0127\46\u011b"+
    "\30\u0143\1\u0157\14\u0143\1\u0148\46\u0143\16\u0131\1\0\1\u0131"+
    "\2\0\16\u0131\1\u0158\4\u0131\1\u013c\46\u0131\16\u011b\1\0"+
    "\1\u011b\2\0\13\u011b\1\u0159\7\u011b\1\u0127\46\u011b\44\u0143"+
    "\1\u015a\1\u0148\46\u0143\14\u0131\1\u015b\1\u0131\1\0\1\u0131"+
    "\2\0\23\u0131\1\u013c\46\u0131\16\u011b\1\0\1\u011b\2\0"+
    "\2\u011b\1\u015c\20\u011b\1\u0127\46\u011b\40\u0143\1\u015d\4\u0143"+
    "\1\u0148\46\u0143\16\u0131\1\0\1\u0131\2\0\13\u0131\1\u015e"+
    "\7\u0131\1\u013c\46\u0131\16\u011b\1\0\1\u011b\2\0\23\u011b"+
    "\1\u0127\1\u011b\1\u015f\44\u011b\14\u0143\1\u0160\30\u0143\1\u0148"+
    "\46\u0143\16\u0131\1\0\1\u0131\2\0\2\u0131\1\u0161\20\u0131"+
    "\1\u013c\46\u0131\16\u011b\1\0\1\u011b\2\0\16\u011b\1\u0162"+
    "\4\u011b\1\u0127\46\u011b\45\u0143\1\u0148\3\u0143\1\u0163\42\u0143"+
    "\16\u0131\1\0\1\u0131\2\0\23\u0131\1\u013c\1\u0131\1\u0164"+
    "\44\u0131\16\u011b\1\0\1\u011b\2\0\23\u011b\1\u0127\2\u011b"+
    "\1\u0165\43\u011b\35\u0143\1\u0166\7\u0143\1\u0148\46\u0143\16\u0131"+
    "\1\0\1\u0131\2\0\16\u0131\1\u0167\4\u0131\1\u013c\46\u0131"+
    "\30\u0143\1\u0168\14\u0143\1\u0148\46\u0143\16\u0131\1\0\1\u0131"+
    "\2\0\23\u0131\1\u013c\2\u0131\1\u0169\43\u0131\37\u0143\1\u016a"+
    "\5\u0143\1\u0148\113\u0143\1\u0148\4\u0143\1\u016b\106\u0143\1\u0148"+
    "\2\u0143\1\u016c\43\u0143";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\10\1\1\11\1\1\1\11\40\1\1\11\1\1"+
    "\1\11\1\1\2\11\1\1\2\0\1\1\3\0\1\1"+
    "\1\0\7\1\1\0\1\1\6\0\1\1\4\0\1\1"+
    "\3\0\2\1\2\0\2\1\1\0\20\1\1\11\5\0"+
    "\3\1\1\0\1\1\1\11\2\0\1\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\3\0\1\1\5\0\2\1"+
    "\1\0\4\1\3\0\2\11\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\7\0\1\11\4\0\1\1\4\0\1\1\42\0\1\1"+
    "\15\0\2\1\60\0\1\1\13\0\1\1\11\0\5\1"+
    "\6\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private StringBuilder comentario;
	private Token yyval;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		errores = 0;
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores léxicos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() > 0){
			tokens.add(yyval);
		}
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		return tipo;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errores++;token(0);gestorErrores.error(Errores.CARACTER_INVALIDO, yyval);
            }
          case 86: break;
          case 2: 
            { String txt = yytext(); 
						 int tipo = Reservados.buscarId(txt, Parser.ID);
						 if(tipo==Parser.SUB) yybegin(VAR);
						 return token(txt, tipo);
            }
          case 87: break;
          case 3: 
            { return token(Parser.ENTERO);
            }
          case 88: break;
          case 4: 
            { return token('.');
            }
          case 89: break;
          case 5: 
            { return token('+');
            }
          case 90: break;
          case 6: 
            { return token('-');
            }
          case 91: break;
          case 7: 
            { 
            }
          case 92: break;
          case 8: 
            { return token(Parser.SUELO);
            }
          case 93: break;
          case 9: 
            { return token('/');
            }
          case 94: break;
          case 10: 
            { yybegin(PD);comentario = new StringBuilder(100);
            }
          case 95: break;
          case 11: 
            { return token('<');
            }
          case 96: break;
          case 12: 
            { return token('>');
            }
          case 97: break;
          case 13: 
            { yybegin(VAR);return token('$');
            }
          case 98: break;
          case 14: 
            { yybegin(VAR);return token('@');
            }
          case 99: break;
          case 15: 
            { yybegin(VAR);return token('%');
            }
          case 100: break;
          case 16: 
            { return token(':');
            }
          case 101: break;
          case 17: 
            { yybegin(VAR);return token('&');
            }
          case 102: break;
          case 18: 
            { return token('*');
            }
          case 103: break;
          case 19: 
            { return token('|');
            }
          case 104: break;
          case 20: 
            { return token('~');
            }
          case 105: break;
          case 21: 
            { return token('^');
            }
          case 106: break;
          case 22: 
            { return token('!');
            }
          case 107: break;
          case 23: 
            { return token('=');
            }
          case 108: break;
          case 24: 
            { return token('(');
            }
          case 109: break;
          case 25: 
            { return token(')');
            }
          case 110: break;
          case 26: 
            { return token('[');
            }
          case 111: break;
          case 27: 
            { return token(']');
            }
          case 112: break;
          case 28: 
            { return token('{');
            }
          case 113: break;
          case 29: 
            { return token('}');
            }
          case 114: break;
          case 30: 
            { return token(',');
            }
          case 115: break;
          case 31: 
            { return token('?');
            }
          case 116: break;
          case 32: 
            { return token(';');
            }
          case 117: break;
          case 33: 
            { yypushback(1);yybegin(YYINITIAL);
            }
          case 118: break;
          case 34: 
            { return token(Parser.ID);
            }
          case 119: break;
          case 35: 
            { return token(Parser.SIGIL);
            }
          case 120: break;
          case 36: 
            { comentario.append(yytext());
            }
          case 121: break;
          case 37: 
            { yybegin(YYINITIAL);return token(comentario.toString(), Parser.COMENTARIO, true);
            }
          case 122: break;
          case 38: 
            { return token(Parser.DECIMAL);
            }
          case 123: break;
          case 39: 
            { return token(Parser.DOS_PUNTOS);
            }
          case 124: break;
          case 40: 
            { return token(Parser.CONCAT_IGUAL);
            }
          case 125: break;
          case 41: 
            { return token(Parser.MAS_MAS);
            }
          case 126: break;
          case 42: 
            { return token(Parser.MAS_IGUAL);
            }
          case 127: break;
          case 43: 
            { return token(Parser.MENOS_MENOS);
            }
          case 128: break;
          case 44: 
            { return token(Parser.FLECHA);
            }
          case 129: break;
          case 45: 
            { return token(Parser.MENOS_IGUAL);
            }
          case 130: break;
          case 46: 
            { return token(Parser.CADENA_SIMPLE);
            }
          case 131: break;
          case 47: 
            { return token(Parser.CADENA_DOBLE);
            }
          case 132: break;
          case 48: 
            { return token(Parser.CADENA_COMANDO);
            }
          case 133: break;
          case 49: 
            { return token(Parser.X_IGUAL);
            }
          case 134: break;
          case 50: 
            { return token(Parser.DIV_IGUAL);
            }
          case 135: break;
          case 51: 
            { return token(Parser.DESP_I);
            }
          case 136: break;
          case 52: 
            { return token(Parser.NUM_LE);
            }
          case 137: break;
          case 53: 
            { return token(Parser.DESP_D);
            }
          case 138: break;
          case 54: 
            { return token(Parser.NUM_GE);
            }
          case 139: break;
          case 55: 
            { return token(Parser.MOD_IGUAL);
            }
          case 140: break;
          case 56: 
            { return token(Parser.AMBITO);
            }
          case 141: break;
          case 57: 
            { return token(Parser.LAND);
            }
          case 142: break;
          case 58: 
            { return token(Parser.AND_IGUAL);
            }
          case 143: break;
          case 59: 
            { return token(Parser.POW);
            }
          case 144: break;
          case 60: 
            { return token(Parser.MULTI_IGUAL);
            }
          case 145: break;
          case 61: 
            { return token(Parser.LOR);
            }
          case 146: break;
          case 62: 
            { return token(Parser.OR_IGUAL);
            }
          case 147: break;
          case 63: 
            { return token(Parser.SMART_EQ);
            }
          case 148: break;
          case 64: 
            { return token(Parser.XOR_IGUAL);
            }
          case 149: break;
          case 65: 
            { return token(Parser.STR_NO_REX);
            }
          case 150: break;
          case 66: 
            { return token(Parser.NUM_NE);
            }
          case 151: break;
          case 67: 
            { return token(Parser.STR_REX);
            }
          case 152: break;
          case 68: 
            { return token(Parser.NUM_EQ);
            }
          case 153: break;
          case 69: 
            { return token(Parser.M_REGEX);
            }
          case 154: break;
          case 70: 
            { return token(Parser.DESP_I_IGUAL);
            }
          case 155: break;
          case 71: 
            { return token(Parser.CMP);
            }
          case 156: break;
          case 72: 
            { return token(Parser.DESP_D_IGUAL);
            }
          case 157: break;
          case 73: 
            { return token(Parser.LAND_IGUAL);
            }
          case 158: break;
          case 74: 
            { return token(Parser.POW_IGUAL);
            }
          case 159: break;
          case 75: 
            { return token(Parser.LOR_IGUAL);
            }
          case 160: break;
          case 76: 
            { return token(yytext(), Parser.PD_NUM, true);
            }
          case 161: break;
          case 77: 
            { String t = yytext(); Integer tipo = Reservados.buscarEtiqueta(t);
							if (tipo == null){comentario.append(t);}else{return token(t, tipo, true);}
            }
          case 162: break;
          case 78: 
            { return token(Parser.S_REGEX);
            }
          case 163: break;
          case 79: 
            { return token(Parser.Y_REGEX);
            }
          case 164: break;
          case 80: 
            { return token(yytext(), Parser.PD_VAR, true);
            }
          case 165: break;
          case 81: 
            { return token(Parser.STDIN);
            }
          case 166: break;
          case 82: 
            { return token(Parser.STDERR);
            }
          case 167: break;
          case 83: 
            { return token(Parser.STDOUT);
            }
          case 168: break;
          case 84: 
            { return token(Parser.LINEA_JAVA);
            }
          case 169: break;
          case 85: 
            { return token(Parser.IMPORT_JAVA);
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
