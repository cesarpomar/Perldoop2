//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package perldoop.sintactico;



//#line 2 "parser.y"
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import perldoop.modelo.Opciones;
import perldoop.error.GestorErrores;
import perldoop.modelo.sintactico.ParserVal;
import perldoop.modelo.arbol.*;
import perldoop.modelo.arbol.fuente.*;
import perldoop.modelo.arbol.funciondef.*;
import perldoop.modelo.arbol.funcionsub.*;
import perldoop.modelo.arbol.cuerpo.*;
import perldoop.modelo.arbol.sentencia.*;
import perldoop.modelo.arbol.expresion.*;
import perldoop.modelo.arbol.lista.*;
import perldoop.modelo.arbol.modificador.*;
import perldoop.modelo.arbol.flujo.*;
import perldoop.modelo.arbol.asignacion.*;
import perldoop.modelo.arbol.numero.*;
import perldoop.modelo.arbol.cadena.*;
import perldoop.modelo.arbol.variable.*;
import perldoop.modelo.arbol.varmulti.*;
import perldoop.modelo.arbol.paquete.*;
import perldoop.modelo.arbol.coleccion.*;
import perldoop.modelo.arbol.acceso.*;
import perldoop.modelo.arbol.funcion.*;
import perldoop.modelo.arbol.abrirbloque.*;
import perldoop.modelo.arbol.bloque.*;
import perldoop.modelo.arbol.condicional.*;
import perldoop.modelo.arbol.regulares.*;
import perldoop.modelo.arbol.binario.*;
import perldoop.modelo.arbol.logico.*;
import perldoop.modelo.arbol.comparacion.*;
import perldoop.modelo.arbol.aritmetica.*;
import perldoop.modelo.arbol.cadenatexto.CadenaTexto;
//#line 52 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:ParserVal
String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[] = new ParserVal[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
final void val_push(ParserVal val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    ParserVal[] newstack = new ParserVal[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final ParserVal val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final ParserVal val_peek(int relative)
{
  return valstk[valptr-relative];
}
final ParserVal dup_yyval(ParserVal val)
{
  return val;
}
//#### end semantic value section ####
public final static short PD_COL=257;
public final static short PD_REF=258;
public final static short PD_TIPO=259;
public final static short PD_NUM=260;
public final static short PD_VAR=261;
public final static short COMENTARIO=262;
public final static short DECLARACION_TIPO=263;
public final static short IMPORT_JAVA=264;
public final static short LINEA_JAVA=265;
public final static short ID=266;
public final static short VAR=267;
public final static short ENTERO=268;
public final static short DECIMAL=269;
public final static short M_REX=270;
public final static short S_REX=271;
public final static short Y_REX=272;
public final static short TEXTO=273;
public final static short REX_MOD=274;
public final static short SEP=275;
public final static short STDIN=276;
public final static short STDOUT=277;
public final static short STDERR=278;
public final static short MY=279;
public final static short SUB=280;
public final static short OUR=281;
public final static short PACKAGE=282;
public final static short WHILE=283;
public final static short DO=284;
public final static short FOR=285;
public final static short UNTIL=286;
public final static short IF=287;
public final static short ELSIF=288;
public final static short ELSE=289;
public final static short UNLESS=290;
public final static short LAST=291;
public final static short NEXT=292;
public final static short RETURN=293;
public final static short Q=294;
public final static short QQ=295;
public final static short QR=296;
public final static short QW=297;
public final static short QX=298;
public final static short LLOR=299;
public final static short LLXOR=300;
public final static short LLAND=301;
public final static short LLNOT=302;
public final static short MULTI_IGUAL=303;
public final static short DIV_IGUAL=304;
public final static short MOD_IGUAL=305;
public final static short SUMA_IGUAL=306;
public final static short MAS_IGUAL=307;
public final static short MENOS_IGUAL=308;
public final static short DESP_I_IGUAL=309;
public final static short DESP_D_IGUAL=310;
public final static short AND_IGUAL=311;
public final static short OR_IGUAL=312;
public final static short XOR_IGUAL=313;
public final static short POW_IGUAL=314;
public final static short LAND_IGUAL=315;
public final static short LOR_IGUAL=316;
public final static short DLOR_IGUAL=317;
public final static short CONCAT_IGUAL=318;
public final static short X_IGUAL=319;
public final static short DOS_PUNTOS=320;
public final static short LOR=321;
public final static short DLOR=322;
public final static short LAND=323;
public final static short NUM_EQ=324;
public final static short NUM_NE=325;
public final static short STR_EQ=326;
public final static short STR_NE=327;
public final static short CMP=328;
public final static short CMP_NUM=329;
public final static short SMART_EQ=330;
public final static short NUM_LE=331;
public final static short NUM_GE=332;
public final static short STR_LT=333;
public final static short STR_LE=334;
public final static short STR_GT=335;
public final static short STR_GE=336;
public final static short DESP_I=337;
public final static short DESP_D=338;
public final static short X=339;
public final static short STR_REX=340;
public final static short STR_NO_REX=341;
public final static short UNITARIO=342;
public final static short POW=343;
public final static short MAS_MAS=344;
public final static short MENOS_MENOS=345;
public final static short FLECHA=346;
public final static short AMBITO=347;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    4,    5,    6,    6,    8,    3,
    3,    7,    7,    7,    7,    7,    7,    7,    7,    7,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,    9,   28,   28,   28,   10,
   10,   10,   10,   10,   10,   12,   12,   12,   12,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   29,   30,   30,   30,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   18,   18,   31,   31,   13,   13,
   32,   32,   33,   33,   33,   33,   24,   24,   25,   25,
   25,   25,   25,   25,   26,   26,   26,   26,   20,   20,
   20,   20,   20,   20,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   27,   27,   27,   27,   27,   27,   34,   34,
   35,   36,   36,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   37,   37,   37,
};
final static short yylen[] = {                            2,
    1,    2,    0,    2,    4,    2,    1,    2,    1,    0,
    1,    3,    1,    1,    1,    4,    3,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    1,    3,    1,    3,    2,    1,    0,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
    3,    4,    4,    4,    4,    4,    1,    0,    2,    2,
    2,    2,    2,    3,    3,    3,    3,    4,    3,    3,
    3,    3,    3,    3,    4,    4,    3,    2,    3,    2,
    3,    2,    3,    2,    3,    2,    1,    1,    2,    3,
    2,    2,    2,    2,    3,    2,    2,    1,    3,    3,
    2,    3,    3,    3,    3,    3,    3,    2,    3,    3,
    2,    3,    5,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
    2,    2,    7,    6,    7,    6,    9,    9,    0,    1,
    0,    0,    1,    3,    8,    8,   10,   10,   12,    7,
    6,    9,    9,    0,    8,    4,
};
final static short yydefred[] = {                         3,
    0,    0,    0,    0,    4,    0,    0,   18,   19,    0,
   67,   68,    0,    0,    0,  171,  171,  171,  171,  171,
  171,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   13,    0,   78,   78,    0,    0,    0,    2,    0,
    7,   11,    0,   14,   15,    0,    0,   21,   22,   23,
   24,   25,   26,   27,   28,   29,   30,   31,   32,   34,
   36,  107,  108,    6,    0,   20,    0,  100,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,   46,   48,    0,    0,
   78,   78,    0,   78,    0,   33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  102,    0,  104,    0,  106,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    8,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  161,  162,
    0,  109,    0,    0,   91,    0,   89,   90,   94,    0,
   92,   93,   17,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,   98,    0,  101,  103,  174,  105,   69,
   70,   80,   79,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   99,    0,    0,    0,    0,   37,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   78,    0,   78,    0,  110,    5,   95,   96,
   16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,   74,   75,   73,   76,   97,    0,    0,   78,   78,
   78,    0,   78,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  173,    0,    0,  181,    0,    0,    0,    0,
   78,   78,  170,  164,    0,  166,    0,    0,    0,    0,
  180,    0,    0,    0,  163,    0,    0,  165,  175,    0,
    0,    0,  176,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  182,  183,  167,  168,  177,  178,    0,    0,
    0,    0,    0,    0,  179,    0,  186,    0,    0,    0,
  185,
};
final static short yydgoto[] = {                          1,
    2,    3,   49,    5,    6,   50,   51,   52,   53,  141,
   54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
   64,   65,   66,   67,   68,   69,   70,   71,  124,  125,
  111,   72,   73,  374,   90,  325,  403,
};
final static short yysindex[] = {                         0,
    0, -277, 2000, -247,    0, -102,  -18,    0,    0,  390,
    0,    0,   11,   37, -213,    0,    0,    0,    0,    0,
    0,    4,    9, 2105, -205, -199, -189, -188, -186, 2704,
 -175, 2704, 2704, 2287, 2704, 2704, 2704, 2704, 2381, 2401,
 1956,    0, -179,    0,    0, 2067, 2421, 2704,    0, 2000,
    0,    0, -165,    0,    0, -170, 2831,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2000,    0, 2495,    0, 4246, -163,
 2704, -162, -160, -157, 2704, -155, -154,  -48, -164,   76,
    1,   21,   83,   91,  151,    0,    0,    0, 2886,  -81,
    0,    0,  -79,    0, 4246,    0,  -20,  -20, -149,  -20,
  -68,  -20,  -20,  -51,  -51,    0,  163,    0,  114,    0,
   86,  -90,  173,  179,  322,  118, -149,  -49,  -20,  -42,
 -149,  -20,  -41,  -20,    0, 2704, 2704, 2704, 2704, 2704,
  168,  410, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704,
 2704, 2704, 2704, 2704, 2704,  -69, -208, 2704,    0,    0,
  -78,    0,  103,  104,    0,  189,    0,    0,    0,  190,
    0,    0,    0,  -44, 2704, 2000,   -5,   42,  -28, 2381,
  -34,  -27,  192,  175, 2704, 2704, 2704,    0,   43,   44,
   52,   56,   62,    0,   -7,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -149,   45,   -7,   -7, 4146, 4146,
 4146, 4146, 4146,    0,    0, 4246, 4196, 4196, 4246,    0,
 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246,
 4246, 4246, 4246, 4246, 4246, 4246, 4246, 3196, 4284, 4311,
 4311, 4621,  482,  482, 2269,  447,  447,  447,  447,  447,
  447,  447,  423,  423,  423,  423,  423,  423,  423,  423,
 1318, 1318,  -35,  -35,  -35,   96,   96,   96,   96,   68,
   69,   77,    0,   78,    0,  -20,    0,    0,    0,    0,
    0, 3251,  226,  163,  258,  233, 2000, 3306, 3361, 3671,
    0,    0,    0,    0,    0,    0,   -7, 2704,    0,    0,
    0,   82,    0,   89,  242, -203, 2704, 2000,  241,  244,
  247,  248,  605,   97,   98,   99,  106,  102,  106, 2000,
  341,  342,    0,  324,  259,    0, 2000, 2000, 2000,  106,
    0,    0,    0,    0,  106,    0,  260, 2704, 2704, 2704,
    0,  264,  265,  266,    0,  119,  120,    0,    0, 3726,
 3781,  352,    0, -259, -259,  106,  106,  337,  338,  276,
  361,  279,    0,    0,    0,    0,    0,    0, 2000, 2704,
 2000,  281, 3836,  282,    0,  285,    0, 2000,  284, -259,
    0,
};
final static short yyrindex[] = {                         0,
    0,  404,   17,    0,    0,    0,    0,    0,    0, 4806,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
    0,    0,  351,    0,    0,    0, 1134,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  286,    0,    0,    0, 2728,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4628,    0, 5177, 5236,  570, 5541,
    0, 5600, 5659, 4688, 4747,    0,    0,    0,    0,    0,
    0,  351,    0,    0,  -30,    0,  680,    0, 5964,    0,
  993, 6023,    0, 6082,    0,    0,    0,    0,    0,    0,
    0, 5109,    0,    0,    0, 1615,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  286,    0,    0,    0,  354,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1067,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1161,    0, 1474, 1548,  355,  356,
  357,  358,  359,    0,    0, 4634, 2216, 2627, 9662,    0,
 9668, 9687, 9693, 9712, 9718, 9751, 9757, 9966, 9987,10020,
10026,10045,10051,10070,10076,10095,10114,    0, 9588, 9266,
 9548, 9225, 9143, 9184, 8325, 8611, 8652, 8693, 8734, 8775,
 9061, 9102, 7451, 7744, 7792, 7840, 7888, 8181, 8229, 8277,
 7337, 7394, 6922, 6979, 7280, 6446, 6504, 6807, 6865,    0,
    0,    0,    0,    0,    0, 6387,    0,    0,    0,    0,
    0,    0,    0,  366,    0,    0,  286,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1642,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  354,  286,    0,    0,
    0,    0, 9625,    0,    0,    0, 2773,    0, 2773,  286,
    0,    0,    0,    0,    0,    0,  286,  286,  286, 2773,
    0,    0,    0,    0, 2773,    0,    0,    0,    0,  379,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  296,  296, 2773, 2773,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  286,    0,
  286,    0,    0,    0,    0,    0,    0,  286,    0,  296,
    0,
};
final static short yygindex[] = {                         0,
    0,    0,   -6,    0,    0,    0,  381,  391,  -31,    0,
    0,    0,  419,  -10,    0,    0,  -86,    0,    0,    0,
    0,    0,    0,    0,    0,  407,    0,  299,    7,    0,
  -13,  -87,  -15, -315,  203, -331, -377,
};
final static int YYTABLESIZE=10415;
static short yytable[][] = new short[2][];
static { yytable0(); yytable1();}
static void yytable0(){
yytable[0] = new short[] {
    79,   128,   194,     4,    77,   224,   223,   192,   117,
   119,   122,   213,   193,    40,    99,   321,   364,    10,
   404,    74,   105,    75,   107,   108,   110,   112,   113,
   114,   115,   401,   402,    82,    80,   130,   133,   239,
   129,   132,   134,   243,    40,    76,   202,   421,   376,
    77,   204,    82,    80,   392,   206,    81,   126,    88,
   210,   385,    40,   221,   219,    83,   388,   220,   314,
    96,   202,     9,    77,   315,    97,   203,   100,    40,
    77,    86,    84,    83,   101,    85,    86,    84,   361,
   405,   406,   362,   202,   222,   102,   103,    77,   104,
   202,    10,   202,   202,   123,   202,   142,   202,   202,
   202,   202,    87,   214,    77,   205,   207,    87,   208,
   230,   231,   209,   233,   211,   212,   202,   246,   215,
   202,   136,   202,   137,   138,   139,   225,   216,   140,
   249,   250,   251,   252,   253,   226,   256,   257,   258,
   259,   326,   261,   262,   263,   264,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,
   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,
   295,   296,   297,   298,   299,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   317,    40,   316,
   324,     9,   227,   229,   136,   232,   137,   138,   139,
   234,   235,   140,   310,   311,   312,   236,   322,   313,
   237,   130,   133,   323,   238,   240,   241,   244,   328,
   329,   330,   245,    77,    91,    92,    93,    94,    95,
   247,   248,   254,   318,   239,   319,   320,    39,   127,
   202,   202,   202,   202,   202,   109,   131,   202,   202,
   202,   202,    77,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   202,   202,
   202,   202,   202,   202,   202,   202,   202,   201,   184,
    10,   327,    78,   217,   202,   218,   255,   195,   196,
   197,   202,   198,   199,   200,   201,   337,   202,   202,
   202,   363,   347,   331,   332,   342,   349,   344,   198,
   199,   200,   201,   333,   353,   184,   184,   334,   184,
   184,   184,   184,   184,   335,   202,   184,   336,   184,
   365,   339,   340,     9,   354,   355,   356,   363,   358,
   346,   341,   343,   377,   184,   348,   357,   221,   219,
   184,   382,   383,   384,   359,   360,   366,   367,   390,
   391,   368,   369,   370,   371,   372,   202,   202,   375,
   386,   387,   373,   378,   379,   380,   381,   389,   222,
   184,   184,   393,   394,   395,   184,   400,   396,   397,
   407,   408,   202,   409,   413,   410,   411,   412,     1,
   414,   415,   417,   418,   420,    40,    10,   419,   172,
    43,    45,    44,    41,    42,   184,   172,   184,   184,
    35,    44,   173,    46,    34,    31,    43,    39,   135,
   121,    32,    89,    33,   196,   197,   106,   198,   199,
   200,   201,    35,    44,   260,    46,    34,    31,    43,
    39,     0,     0,    32,    47,    33,     0,     0,     0,
     0,   194,     0,     0,     0,     0,   192,   189,     0,
   190,   191,   193,     0,     0,     0,    47,     0,     0,
     0,     0,     0,     0,    40,    48,     0,   194,     0,
    45,     0,     0,   192,   189,     0,   190,   191,   193,
     0,     0,     0,     0,     0,     0,    40,    48,     0,
     0,     0,    45,   179,     0,   181,     0,     0,     0,
    77,    40,     0,    36,     0,     0,   194,   171,     0,
     0,     0,   192,   189,     0,   190,   191,   193,     0,
     0,     0,    77,     0,     0,    36,     0,    40,     0,
     0,     0,   179,     0,   181,     0,    77,     0,     0,
     0,     0,     0,   184,     0,     0,     0,     0,     0,
   184,   184,     0,     0,   184,     0,   184,   184,     0,
     0,     0,     0,    77,     0,     0,    40,     0,   184,
   184,   184,   184,   184,   184,   184,   184,   184,     0,
     0,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   242,     0,     0,   184,     0,     0,   217,     0,
   218,    83,    77,    83,    83,    83,     0,    83,    83,
    83,    83,    83,    83,    83,    83,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    83,    83,
    83,    83,    83,    83,    83,     0,     0,     0,     0,
     0,   184,   184,   194,   171,     0,     0,     0,   192,
   189,     0,   190,   191,   193,     0,     0,     0,    10,
     0,    11,    12,     0,    83,     0,    83,    83,   179,
    83,   181,   164,    13,     0,    14,     0,     0,     0,
     0,    10,     0,    11,    12,     0,     0,     0,     0,
    25,    26,    27,    28,    29,    13,     0,    14,    30,
    83,    83,    83,    40,     0,     0,   170,     0,     0,
     0,     0,    25,    26,    27,    28,    29,     0,     0,
     0,    30,     0,    81,     0,    81,    81,    81,     0,
    81,    81,    81,    81,    81,    81,    81,    81,    77,
   169,     0,     0,     0,     0,    37,    38,     0,    78,
    81,    81,    81,    81,    81,    81,    81,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    37,    38,
     0,   255,     0,     0,   187,   188,   195,   196,   197,
     0,   198,   199,   200,   201,     0,    81,     0,    81,
    81,     0,    81,     0,   180,   182,   183,   184,   185,
   186,   187,   188,   195,   196,   197,     0,   198,   199,
   200,   201,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    81,    81,    81,   172,   173,   174,   175,
   176,   177,   178,   180,   182,   183,   184,   185,   186,
   187,   188,   195,   196,   197,     0,   198,   199,   200,
   201,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,     0,    83,
     0,     0,     0,    83,     0,    83,     0,    83,     0,
    83,    83,    83,     0,     0,    83,     0,     0,     0,
     0,     0,     0,     0,     0,    83,    83,    83,     0,
    83,    83,    83,     0,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,     0,    83,    83,    83,    83,     0,
     0,     0,     0,     0,     0,     0,     0,   165,   166,
   167,   168,   172,   173,   174,   175,   176,   177,   178,
   180,   182,   183,   184,   185,   186,   187,   188,   195,
   196,   197,     0,   198,   199,   200,   201,     0,    81,
     0,    81,     0,     0,     0,    81,     0,    81,     0,
    81,     0,    81,    81,    81,     0,     0,    81,     0,
     0,     0,     0,     0,     0,     0,     0,    81,    81,
    81,     0,    81,    81,    81,     0,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    81,    81,     0,    81,    81,    81,
    81,    82,     0,    82,    82,    82,     0,    82,    82,
    82,    82,    82,    82,    82,    82,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    82,    82,
    82,    82,    82,    82,    82,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    82,     0,    82,    82,     0,
    82,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,    86,    86,    86,     0,
    86,    86,    86,    86,    86,    86,    86,    86,     0,
    82,    82,    82,     0,     0,     0,     0,     0,     0,
    86,    86,    86,    86,    86,    86,    86,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,     0,    86,
    86,     0,    86,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    39,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    86,    86,    86,    39,     0,    87,     0,
    87,    87,    87,     0,    87,    87,    87,    87,    87,
    87,    87,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    87,    87,    87,    87,    87,
    87,    87,     0,    39,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    87,     0,    87,    87,     0,    87,     0,    39,
     0,     0,     0,     0,     0,     0,    82,     0,    82,
     0,     0,     0,    82,     0,    82,     0,    82,     0,
    82,    82,    82,     0,     0,    82,    87,    87,    87,
     0,     0,     0,     0,     0,    82,    82,    82,     0,
    82,    82,    82,     0,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,     0,    82,    82,    82,    82,    86,
     0,    86,     0,     0,     0,    86,     0,    86,     0,
    86,     0,    86,    86,    86,   194,     0,    86,     0,
     0,   192,   189,     0,   190,   191,   193,    86,    86,
    86,     0,    86,    86,    86,     0,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    40,    86,    86,    86,
    86,     0,     0,     0,    39,     0,    39,    39,    39,
     0,     0,    39,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    87,     0,    87,     0,     0,     0,
    87,    77,    87,     0,    87,     0,    87,    87,    87,
     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,    87,    87,    87,     0,    87,    87,    87,
     0,    87,    87,    87,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,
     0,    87,    87,    87,    87,    84,     0,    84,    84,
    84,     0,    84,    84,    84,    84,    84,    84,    84,
    84,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    84,    84,    84,    84,    84,    84,    84,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    84,
     0,    84,    84,     0,    84,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    85,     0,
    85,    85,    85,     0,    85,    85,    85,    85,    85,
    85,    85,    85,     0,    84,    84,    84,     0,     0,
     0,     0,     0,     0,    85,    85,    85,    85,    85,
    85,    85,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    85,     0,    85,    85,     0,    85,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,   195,   196,   197,     0,   198,   199,   200,   201,
     0,     0,     0,     0,     0,     0,    85,    85,    85,
    38,     0,    88,     0,    88,    88,    88,     0,    88,
    88,    88,    88,    88,    88,    88,    88,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    88,
    88,    88,    88,    88,    88,    88,     0,    38,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    88,     0,    88,    88,
     0,    88,     0,    38,     0,     0,     0,     0,     0,
     0,    84,     0,    84,     0,     0,     0,    84,     0,
    84,     0,    84,     0,    84,    84,    84,     0,     0,
    84,    88,    88,    88,     0,     0,     0,     0,     0,
    84,    84,    84,     0,    84,    84,    84,     0,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    84,    84,    84,     0,    84,
    84,    84,    84,    85,     0,    85,     0,     0,     0,
    85,     0,    85,     0,    85,     0,    85,    85,    85,
     0,     0,    85,     0,     0,     0,     0,     0,     0,
     0,     0,    85,    85,    85,     0,    85,    85,    85,
     0,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,
     0,    85,    85,    85,    85,     0,     0,     0,    38,
     0,    38,    38,    38,     0,     0,    38,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,     0,
    88,     0,     0,     0,    88,     0,    88,     0,    88,
     0,    88,    88,    88,     0,     0,    88,     0,     0,
     0,     0,     0,     0,     0,     0,    88,    88,    88,
     0,    88,    88,    88,     0,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,     0,    88,    88,    88,    88,
    35,    44,     0,    46,    34,    31,    43,    39,     0,
     0,    32,     0,    33,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    42,
     0,     0,     0,     0,    47,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    35,
    44,     0,    46,    34,    31,    43,    39,     0,     0,
    32,     0,    33,     0,    40,    48,     0,     0,     0,
    45,     0,     0,     0,     0,     0,     0,    42,     0,
     0,     0,     0,    47,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    41,     0,   120,    36,     0,     0,     0,     0,     0,
     0,     0,     0,    40,    48,     0,     0,     0,    45,
     0,     0,     0,    35,    44,   128,    46,    34,    31,
    43,    39,     0,     0,    32,     0,    33,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    41,
     0,     0,    36,     0,     0,     0,     0,    47,     0,
     0,     0,     0,     0,     0,    35,    44,     0,    46,
    34,    31,    43,    39,     0,     0,    32,     0,    33,
     0,     0,     0,     0,     0,     0,     0,    40,    48,
     0,     0,     0,    45,    98,     0,     0,     0,     0,
    47,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    77,     0,     0,    36,     0,     0,
    40,    48,     0,     0,     0,    45,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     7,     0,
     0,     0,     0,     0,     8,     9,     0,     0,    10,
     0,    11,    12,     0,     0,    77,     0,     0,    36,
     0,     0,     0,    13,     0,    14,    15,    16,    17,
    18,    19,    20,     0,     0,    21,    22,    23,    24,
    25,    26,    27,    28,    29,     0,     7,   129,    30,
     0,   129,     0,     8,     9,     0,     0,    10,     0,
    11,    12,     0,     0,     0,     0,   129,   129,     0,
     0,     0,    13,     0,    14,    15,    16,    17,    18,
    19,    20,     0,     0,    21,    22,    23,    24,    25,
    26,    27,    28,    29,     0,    37,    38,    30,     0,
     0,     0,   194,     0,     0,   129,     0,   192,   189,
     0,   190,   191,   193,     0,     0,     0,    35,    44,
     0,    46,    34,    31,    43,    39,     0,   179,    32,
   181,    33,    10,   127,    11,    12,     0,     0,     0,
     0,   129,     0,     0,    37,    38,    13,     0,    14,
     0,     0,    47,     0,     0,     0,     0,     0,     0,
     0,     0,    40,    25,    26,    27,    28,    29,     0,
     0,     0,    30,     0,    10,     0,    11,    12,     0,
     0,     0,    40,    48,     0,     0,     0,    45,    13,
     0,    14,     0,     0,     0,     0,     0,    77,     0,
     0,     0,     0,     0,     0,    25,    26,    27,    28,
    29,     0,     0,     0,    30,     0,     0,    77,    37,
    38,    36,    35,    44,     0,    46,    34,    31,    43,
    39,   116,     0,    32,     0,    33,     0,     0,     0,
     0,     0,     0,     0,    35,    44,     0,    46,    34,
    31,    43,    39,     0,     0,    32,    47,    33,     0,
     0,    37,    38,     0,     0,     0,    35,    44,     0,
    46,    34,    31,    43,    39,     0,     0,    32,    47,
    33,     0,     0,     0,     0,     0,    40,    48,     0,
     0,     0,    45,     0,     0,     0,     0,     0,     0,
     0,    47,     0,     0,     0,     0,     0,     0,    40,
    48,   118,     0,     0,    45,     0,   129,     0,   129,
   129,   129,    77,     0,   129,    36,     0,     0,     0,
     0,    40,    48,     0,   129,   129,    45,     0,     0,
     0,     0,     0,     0,    77,     0,     0,    36,    35,
    44,     0,    46,    34,    31,    43,    39,     0,     0,
    32,     0,    33,     0,     0,     0,    77,     0,     0,
    36,     0,     0,     0,     0,     0,    10,   109,    11,
    12,     0,     0,    47,     0,     0,     0,     0,     0,
     0,    13,     0,    14,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    25,    26,
    27,    28,    29,    40,    48,     0,    30,     0,    45,
     0,   172,   173,   174,   175,   176,   177,   178,   180,
   182,   183,   184,   185,   186,   187,   188,   195,   196,
   197,     0,   198,   199,   200,   201,     0,     0,    77,
     0,   120,    36,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    37,    38,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    10,     0,    11,    12,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    13,     0,    14,     0,
     0,     0,     0,    10,   132,    11,    12,   132,     0,
     0,     0,    25,    26,    27,    28,    29,    13,     0,
    14,    30,     0,   132,   132,    10,   131,    11,    12,
     0,     0,     0,     0,    25,    26,    27,    28,    29,
    13,     0,    14,    30,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    25,    26,    27,
    28,    29,   132,     0,     0,    30,     0,    37,    38,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    35,    44,     0,    46,    34,    31,    43,    39,
    37,    38,    32,     0,    33,     0,     0,   132,     0,
     0,     0,     0,     0,     0,     0,     0,    10,     0,
    11,    12,    37,    38,     0,    47,   117,     0,     0,
   117,     0,    13,     0,    14,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,   117,     0,    25,
    26,    27,    28,    29,     0,    40,    48,    30,     0,
     0,    45,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   169,   169,     0,     0,   169,   169,   169,
   169,   169,   169,   169,   117,     0,     0,     0,     0,
     0,    77,     0,     0,    36,   169,   169,   169,   169,
   169,   169,     0,     0,    37,    38,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   117,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   169,     0,   169,   169,   194,   171,     0,
     0,     0,   192,   189,   146,   190,   191,   193,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   179,   147,   181,   164,     0,   169,   169,
   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,     0,   132,   132,   132,     0,
     0,   132,     0,     0,     0,     0,    40,   194,   171,
   170,   132,   132,   192,   189,     0,   190,   191,   193,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   228,   179,   147,   181,   164,     0,     0,
     0,     0,    77,   169,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    10,     0,    11,    12,     0,     0,     0,    40,     0,
     0,   170,     0,     0,    13,     0,    14,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    25,    26,    27,    28,    29,     0,     0,     0,
    30,     0,     0,    77,   169,   117,     0,   117,   117,
   117,     0,     0,   117,     0,     0,     0,     0,     0,
     0,     0,     0,   117,   117,   117,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    37,    38,     0,
     0,     0,     0,     0,     0,   169,     0,   169,   169,
   169,     0,     0,   169,     0,     0,     0,     0,     0,
     0,     0,     0,   169,   169,   169,     0,   169,   169,
   169,     0,   169,   169,   169,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,     0,   169,   169,   169,   169,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   143,   144,
   145,     0,   148,   149,   150,     0,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   165,   166,   167,   168,   172,   173,   174,   175,
   176,   177,   178,   180,   182,   183,   184,   185,   186,
   187,   188,   195,   196,   197,     0,   198,   199,   200,
   201,     0,     0,     0,     0,     0,     0,     0,   143,
   144,   145,     0,   148,   149,   150,     0,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   165,   166,   167,   168,   172,   173,   174,
   175,   176,   177,   178,   180,   182,   183,   184,   185,
   186,   187,   188,   195,   196,   197,     0,   198,   199,
   200,   201,   194,   171,     0,     0,     0,   192,   189,
     0,   190,   191,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   338,     0,   179,   147,
   181,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    40,   194,   171,   170,     0,   345,   192,
   189,     0,   190,   191,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   179,
   147,   181,   164,     0,     0,     0,     0,    77,   169,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    40,   194,   171,   170,     0,   350,
   192,   189,     0,   190,   191,   193,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   179,   147,   181,   164,     0,     0,     0,     0,    77,
   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    40,   194,   171,   170,     0,
   351,   192,   189,     0,   190,   191,   193,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   179,   147,   181,   164,     0,     0,     0,     0,
    77,   169,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,     0,     0,   170,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    77,   169,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   143,   144,   145,     0,   148,   149,
   150,     0,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   165,   166,   167,
   168,   172,   173,   174,   175,   176,   177,   178,   180,
   182,   183,   184,   185,   186,   187,   188,   195,   196,
   197,     0,   198,   199,   200,   201,     0,     0,     0,
     0,     0,     0,     0,   143,   144,   145,     0,   148,
   149,   150,     0,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   165,   166,
   167,   168,   172,   173,   174,   175,   176,   177,   178,
   180,   182,   183,   184,   185,   186,   187,   188,   195,
   196,   197,     0,   198,   199,   200,   201,     0,     0,
     0,     0,     0,     0,     0,   143,   144,   145,     0,
   148,   149,   150,     0,   151,   152,   153,   154,   155,
   156,   157,   158,   159,   160,   161,   162,   163,   165,
   166,   167,   168,   172,   173,   174,   175,   176,   177,
   178,   180,   182,   183,   184,   185,   186,   187,   188,
   195,   196,   197,     0,   198,   199,   200,   201,     0,
     0,     0,     0,     0,     0,     0,   143,   144,   145,
     0,   148,   149,   150,     0,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,
   165,   166,   167,   168,   172,   173,   174,   175,   176,
   177,   178,   180,   182,   183,   184,   185,   186,   187,
   188,   195,   196,   197,     0,   198,   199,   200,   201,
   194,   171,     0,     0,   352,   192,   189,     0,   190,
   191,   193,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   179,   147,   181,   164,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    40,   194,   171,   170,     0,   398,   192,   189,     0,
   190,   191,   193,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   179,   147,   181,
   164,     0,     0,     0,     0,    77,   169,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    40,   194,   171,   170,     0,   399,   192,   189,
     0,   190,   191,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   179,   147,
   181,   164,     0,     0,     0,     0,    77,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    40,   194,   171,   170,     0,   416,   192,
   189,     0,   190,   191,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   179,
   147,   181,   164,     0,     0,     0,     0,    77,   169,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    40,     0,     0,   170,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,
   169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   143,   144,   145,     0,   148,   149,   150,     0,
   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   165,   166,   167,   168,   172,
   173,   174,   175,   176,   177,   178,   180,   182,   183,
   184,   185,   186,   187,   188,   195,   196,   197,     0,
   198,   199,   200,   201,     0,     0,     0,     0,     0,
     0,     0,   143,   144,   145,     0,   148,   149,   150,
     0,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   165,   166,   167,   168,
   172,   173,   174,   175,   176,   177,   178,   180,   182,
   183,   184,   185,   186,   187,   188,   195,   196,   197,
     0,   198,   199,   200,   201,     0,     0,     0,     0,
     0,     0,     0,   143,   144,   145,     0,   148,   149,
   150,     0,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   165,   166,   167,
   168,   172,   173,   174,   175,   176,   177,   178,   180,
   182,   183,   184,   185,   186,   187,   188,   195,   196,
   197,     0,   198,   199,   200,   201,     0,     0,     0,
     0,     0,     0,     0,   143,   144,   145,     0,   148,
   149,   150,     0,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   165,   166,
   167,   168,   172,   173,   174,   175,   176,   177,   178,
   180,   182,   183,   184,   185,   186,   187,   188,   195,
   196,   197,     0,   198,   199,   200,   201,   194,   171,
     0,     0,     0,   192,   189,     0,   190,   191,   193,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   179,   147,   181,   164,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   194,   171,     0,     0,    40,   192,
   189,   170,   190,   191,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   179,
   147,   181,   164,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    77,   169,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   194,
   171,     0,     0,    40,   192,   189,   170,   190,   191,
   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   179,   147,   181,   164,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,
   169,   194,   171,     0,     0,     0,   192,   189,     0,
   190,   191,   193,     0,     0,     0,     0,     0,    40,
     0,     0,   170,     0,     0,     0,   179,     0,   181,
     0,   194,   171,     0,     0,     0,   192,   189,     0,
   190,   191,   193,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    77,   169,   179,     0,   181,
     0,    40,     0,     0,   170,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    40,     0,     0,   170,     0,    77,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    77,   169,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,
   144,   145,     0,   148,   149,   150,     0,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   165,   166,   167,   168,   172,   173,   174,
   175,   176,   177,   178,   180,   182,   183,   184,   185,
   186,   187,   188,   195,   196,   197,     0,   198,   199,
   200,   201,     0,     0,     0,     0,   145,     0,   148,
   149,   150,     0,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   165,   166,
   167,   168,   172,   173,   174,   175,   176,   177,   178,
   180,   182,   183,   184,   185,   186,   187,   188,   195,
   196,   197,     0,   198,   199,   200,   201,     0,     0,
     0,     0,     0,     0,   148,   149,   150,     0,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   165,   166,   167,   168,   172,   173,
   174,   175,   176,   177,   178,   180,   182,   183,   184,
   185,   186,   187,   188,   195,   196,   197,     0,   198,
   199,   200,   201,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   166,   167,   168,
   172,   173,   174,   175,   176,   177,   178,   180,   182,
   183,   184,   185,   186,   187,   188,   195,   196,   197,
     0,   198,   199,   200,   201,     0,     0,     0,   168,
   172,   173,   174,   175,   176,   177,   178,   180,   182,
   183,   184,   185,   186,   187,   188,   195,   196,   197,
     0,   198,   199,   200,   201,   194,   171,     0,     0,
     0,   192,   189,     0,   190,   191,   193,   131,     0,
     0,   131,     0,     0,   115,     0,     0,   115,     0,
     0,   179,     0,   181,     0,     0,   131,   131,     0,
     0,     0,     0,   115,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    40,     0,     0,   170,
     0,     0,     0,     0,     0,   131,     0,     0,     0,
   159,   159,   115,     0,   159,   159,   159,   159,   159,
   159,   159,     0,     0,     0,     0,     0,     0,     0,
     0,    77,   169,   159,   159,   159,   159,   159,   159,
     0,   131,     0,     0,     0,     0,     0,   115,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   159,   159,     0,   160,   160,     0,     0,
   160,   160,   160,   160,   160,   160,   160,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   160,
   160,   160,   160,   160,   160,     0,   159,   159,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,   160,
     0,     0,     0,     0,     0,   118,   118,     0,   118,
     0,   118,   118,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   118,   118,   118,   118,   118,
   118,     0,   160,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   118,   118,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   131,     0,   131,
   131,   131,     0,   115,   131,   115,   115,   115,     0,
     0,   115,     0,     0,   131,   131,   131,   118,   118,
     0,   115,   115,   115,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   172,   173,   174,   175,   176,
   177,   178,   180,   182,   183,   184,   185,   186,   187,
   188,   195,   196,   197,     0,   198,   199,   200,   201,
     0,     0,     0,   159,     0,   159,   159,   159,     0,
     0,   159,     0,     0,     0,     0,     0,     0,     0,
     0,   159,   159,   159,     0,   159,   159,   159,     0,
   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   160,
   159,   160,   160,   160,     0,     0,   160,     0,     0,
     0,     0,     0,     0,     0,     0,   160,   160,   160,
     0,   160,   160,   160,     0,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   160,   160,   160,   118,   160,   118,   118,   118,
     0,     0,   118,     0,     0,     0,     0,     0,     0,
     0,     0,   118,   118,   118,     0,   118,   118,   118,
     0,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,
     0,   118,   116,   116,   118,   116,     0,   116,   116,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   116,   116,   116,   116,   116,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   116,   116,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   157,   157,     0,     0,   157,   157,
   157,   157,   157,   157,   157,     0,     0,     0,     0,
     0,     0,     0,     0,   116,   116,   157,   157,   157,
   157,   157,   157,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,   157,     0,   158,
   158,     0,     0,   158,   158,   158,   158,   158,   158,
   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   158,   158,   158,   158,   158,   158,     0,
   157,   157,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   158,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   158,   158,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   116,     0,   116,   116,   116,     0,     0,   116,
     0,     0,     0,     0,     0,     0,     0,     0,   116,
   116,   116,     0,   116,   116,   116,     0,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,     0,   116,     0,
     0,   116,     0,     0,     0,     0,   157,     0,   157,
   157,   157,     0,     0,   157,     0,     0,     0,     0,
     0,     0,     0,     0,   157,   157,   157,     0,   157,
   157,   157,     0,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   158,     0,   158,   158,   158,     0,     0,
   158,     0,     0,     0,     0,     0,     0,     0,     0,
   158,   158,   158,     0,   158,   158,   158,     0,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   113,   113,
     0,     0,   113,   113,   113,   113,   113,   113,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,   113,   113,   113,   113,   113,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   113,   113,     0,   128,   128,     0,     0,   128,   128,
   128,   128,   128,   128,   128,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   128,   128,   128,
   128,   128,   128,     0,   113,   113,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   128,   128,     0,   121,
   121,     0,     0,   121,   121,   121,   121,   121,   121,
   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   121,   121,   121,   121,   121,   121,     0,
   128,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   113,     0,   113,   113,   113,     0,     0,   113,
     0,     0,     0,     0,     0,     0,     0,     0,   113,
   113,   113,     0,   113,   113,   113,     0,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   128,     0,   128,
   128,   128,     0,     0,   128,     0,     0,     0,     0,
     0,     0,     0,     0,   128,   128,   128,     0,   128,
   128,   128,     0,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   121,     0,   121,   121,   121,     0,     0,
   121,     0,     0,     0,     0,     0,     0,     0,     0,
   121,   121,   121,     0,   121,   121,   121,     0,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   111,   111,
     0,     0,   111,   111,   111,   111,   111,   111,   111,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   111,   111,   111,   111,   111,   111,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   111,   111,     0,   112,   112,     0,     0,   112,   112,
   112,   112,   112,   112,   112,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   112,   112,   112,
   112,   112,   112,     0,   111,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   112,   112,     0,   114,
   114,     0,     0,   114,   114,   114,   114,   114,   114,
   114,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   114,   114,   114,   114,   114,   114,     0,
   112,   112,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,   114,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   114,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   111,     0,   111,   111,   111,     0,     0,   111,
     0,     0,     0,     0,     0,     0,     0,     0,   111,
   111,   111,     0,   111,   111,   111,     0,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   112,     0,   112,
   112,   112,     0,     0,   112,     0,     0,     0,     0,
     0,     0,     0,     0,   112,   112,   112,     0,   112,
   112,   112,     0,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   114,     0,   114,   114,   114,     0,     0,
   114,     0,     0,     0,     0,     0,     0,     0,     0,
   114,   114,   114,     0,   114,   114,   114,     0,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   153,   153,
     0,     0,   153,   153,   153,   153,   153,   153,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   153,   153,   153,   153,   153,   153,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   153,   153,     0,   151,   151,     0,     0,   151,   151,
   151,   151,   151,   151,   151,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   151,   151,   151,
   151,   151,   151,     0,   153,   153,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   151,   151,   152,   152,
     0,     0,   152,   152,   152,   152,   152,   152,   152,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   152,   152,   152,   152,   152,   152,     0,     0,
   151,   151,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   152,   152,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   152,   152,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   153,     0,   153,   153,   153,     0,     0,   153,
     0,     0,     0,     0,     0,     0,     0,     0,   153,
   153,   153,     0,   153,   153,   153,     0,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   151,     0,   151,
   151,   151,     0,     0,   151,     0,     0,     0,     0,
     0,     0,     0,     0,   151,   151,   151,     0,   151,
   151,   151,     0,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
     0,   152,     0,   152,   152,   152,     0,     0,   152,
     0,     0,     0,     0,     0,     0,     0,     0,   152,
   152,   152,     0,   152,   152,   152,     0,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   156,   156,     0,     0,   156,
   156,   156,   156,   156,   156,   156,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,   156,
   156,   156,   156,   156,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   156,   156,   154,
   154,     0,     0,   154,   154,   154,   154,   154,   154,
   154,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   154,   154,   154,   154,   154,   154,     0,
     0,   156,   156,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   154,   154,   149,     0,     0,   149,     0,   149,
   149,   149,   149,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   149,   149,   149,   149,
   149,   149,     0,     0,     0,   154,   154,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   149,   149,   150,     0,     0,
   150,     0,   150,   150,   150,   150,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   150,
   150,   150,   150,   150,   150,     0,     0,     0,   149,
   149,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   150,   150,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   156,     0,
   156,   156,   156,     0,     0,   156,     0,     0,     0,
     0,     0,   150,   150,     0,   156,   156,   156,     0,
   156,   156,   156,     0,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,     0,   154,     0,   154,   154,   154,     0,     0,
   154,     0,     0,     0,     0,     0,     0,     0,     0,
   154,   154,   154,     0,   154,   154,   154,     0,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   149,     0,   149,   149,
   149,     0,     0,   149,     0,     0,     0,     0,     0,
     0,     0,     0,   149,   149,   149,     0,   149,   149,
   149,     0,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,     0,   150,
     0,   150,   150,   150,     0,     0,   150,     0,     0,
     0,     0,     0,     0,     0,     0,   150,   150,   150,
     0,   150,   150,   150,     0,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   155,     0,     0,   155,     0,   155,   155,   155,
   155,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   155,   155,   155,   155,   155,   155,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   155,   155,   123,     0,     0,   123,     0,
     0,   123,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   123,   123,   123,
   123,   123,   123,     0,     0,     0,   155,   155,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   123,   124,     0,
     0,   124,     0,     0,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   124,   124,   124,   124,   124,   124,     0,     0,     0,
   123,   123,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   124,
   124,   136,     0,     0,   136,     0,     0,   136,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,   136,     0,   136,     0,   136,
     0,     0,     0,   124,   124,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   136,   136,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   155,     0,   155,   155,   155,     0,
     0,   155,     0,     0,     0,     0,   136,   136,     0,
     0,   155,   155,   155,     0,   155,   155,   155,     0,
   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,     0,   123,     0,   123,
   123,   123,     0,     0,   123,     0,     0,     0,     0,
     0,     0,     0,     0,   123,   123,   123,     0,   123,
   123,   123,     0,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,     0,
   124,     0,   124,   124,   124,     0,     0,   124,     0,
     0,     0,     0,     0,     0,     0,     0,   124,   124,
   124,     0,   124,   124,   124,     0,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,     0,   136,     0,   136,   136,   136,     0,
     0,   136,     0,     0,     0,     0,     0,     0,     0,
     0,   136,   136,   136,     0,   136,   136,   136,     0,
   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   137,     0,     0,
   137,     0,     0,   137,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,
   137,     0,   137,     0,   137,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   138,     0,     0,   138,     0,     0,   138,   137,   137,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   138,   138,     0,   138,     0,   138,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   137,   137,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,   139,     0,     0,
   139,   138,   138,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   139,   139,     0,   139,
     0,   139,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   138,   138,     0,     0,
     0,     0,     0,     0,     0,     0,   143,     0,     0,
   143,     0,     0,   143,   139,   139,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,
   143,     0,   143,     0,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   139,
   139,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   143,   143,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   143,   143,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   137,
     0,   137,   137,   137,     0,     0,   137,     0,     0,
     0,     0,     0,     0,     0,     0,   137,   137,   137,
     0,   137,   137,   137,     0,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   138,     0,   138,   138,   138,     0,     0,
   138,     0,     0,     0,     0,     0,     0,     0,     0,
   138,   138,   138,     0,   138,   138,   138,     0,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   139,     0,   139,   139,
   139,     0,     0,   139,     0,     0,     0,     0,     0,
     0,     0,     0,   139,   139,   139,     0,   139,   139,
   139,     0,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   143,
     0,   143,   143,   143,     0,     0,   143,     0,     0,
     0,     0,     0,     0,     0,     0,   143,   143,   143,
     0,   143,   143,   143,     0,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   144,     0,     0,   144,     0,     0,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   144,   144,     0,   144,     0,
   144,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   145,     0,     0,   145,
     0,     0,   145,   144,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   145,   145,
     0,   145,     0,   145,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   144,   144,
     0,     0,     0,     0,     0,     0,     0,     0,   146,
     0,     0,   146,     0,     0,   146,   145,   145,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   146,   146,     0,   146,     0,   146,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   145,   145,     0,     0,     0,     0,     0,     0,
     0,     0,   120,     0,     0,   120,     0,     0,   120,
   146,   146,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   120,   120,     0,   120,     0,
   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   146,   146,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   120,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   120,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   144,     0,   144,   144,   144,
     0,     0,   144,     0,     0,     0,     0,     0,     0,
     0,     0,   144,   144,   144,     0,   144,   144,   144,
     0,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   145,     0,
   145,   145,   145,     0,     0,   145,     0,     0,     0,
     0,     0,     0,     0,     0,   145,   145,   145,     0,
   145,   145,   145,     0,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   146,     0,   146,   146,   146,     0,     0,   146,
     0,     0,     0,     0,     0,     0,     0,     0,   146,
   146,   146,     0,   146,   146,   146,     0,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   120,     0,   120,   120,   120,
     0,     0,   120,     0,     0,     0,     0,     0,     0,
     0,     0,   120,   120,   120,     0,   120,   120,   120,
     0,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,
   134,     0,     0,   134,     0,     0,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,   134,     0,   134,     0,   134,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   135,     0,     0,   135,
     0,     0,   135,     0,     0,     0,     0,     0,     0,
     0,   134,   134,     0,     0,     0,     0,   135,   135,
     0,   135,     0,   135,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   141,     0,     0,   141,   134,   134,   141,     0,
     0,     0,     0,     0,     0,     0,   135,   135,     0,
     0,     0,     0,   141,   141,     0,   141,     0,   141,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   142,     0,     0,
   142,   135,   135,   142,     0,     0,     0,     0,     0,
     0,     0,   141,   141,     0,     0,     0,     0,   142,
   142,     0,   142,     0,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   147,     0,     0,   147,   141,   141,   147,
     0,     0,     0,     0,     0,     0,     0,   142,   142,
     0,     0,     0,     0,   147,   147,     0,   147,     0,
   147,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   142,   142,     0,     0,     0,     0,     0,
     0,     0,     0,   147,   147,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,     0,   134,   134,   134,   147,   147,
   134,     0,     0,     0,     0,     0,     0,     0,     0,
   134,   134,   134,     0,   134,   134,   134,     0,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   135,     0,
   135,   135,   135,     0,     0,   135,     0,     0,     0,
     0,     0,     0,     0,     0,   135,   135,   135,     0,
   135,   135,   135,     0,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   141,     0,   141,   141,   141,     0,
     0,   141,     0,     0,     0,     0,     0,     0,     0,
     0,   141,   141,   141,     0,   141,   141,   141,     0,};
}
static void yytable1(){
yytable[1] = new short[] {
   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   142,
     0,   142,   142,   142,     0,     0,   142,     0,     0,
     0,     0,     0,     0,     0,     0,   142,   142,   142,
     0,   142,   142,   142,     0,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   147,     0,   147,   147,   147,
     0,     0,   147,     0,     0,     0,     0,     0,     0,
     0,     0,   147,   147,   147,     0,   147,   147,   147,
     0,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,
   140,     0,     0,   140,     0,     0,   140,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,   140,     0,   140,     0,   140,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   148,     0,     0,   148,
     0,     0,   148,     0,     0,     0,     0,     0,     0,
     0,   140,   140,     0,     0,     0,     0,   148,   148,
     0,   148,     0,   148,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   119,   140,   140,   119,     0,
     0,     0,     0,     0,     0,     0,   148,   148,     0,
     0,     0,     0,   119,   119,     0,   119,     0,   119,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   148,   148,   122,     0,     0,     0,     0,     0,
     0,     0,   119,   119,     0,     0,     0,     0,   122,
   122,     0,   122,     0,   122,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   127,   119,   119,   127,
     0,     0,     0,     0,     0,     0,     0,   122,   122,
     0,     0,     0,     0,   127,   127,     0,   127,     0,
   127,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,   122,   122,   125,     0,     0,     0,     0,
     0,     0,     0,   127,     0,     0,     0,     0,     0,
   125,   125,     0,   125,     0,   125,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,     0,   140,   140,   140,     0,   127,
   140,     0,     0,     0,     0,     0,     0,     0,   125,
   140,   140,   140,     0,   140,   140,   140,     0,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   148,     0,
   148,   148,   148,     0,   125,   148,     0,     0,     0,
     0,     0,     0,     0,     0,   148,   148,   148,     0,
   148,   148,   148,     0,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   119,     0,   119,   119,   119,     0,
     0,   119,     0,     0,     0,     0,     0,     0,     0,
     0,   119,   119,   119,     0,   119,   119,   119,     0,
   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   122,
     0,   122,   122,   122,     0,     0,   122,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   122,   122,
     0,   122,   122,   122,     0,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   127,     0,   127,   127,   127,
     0,     0,   127,     0,     0,     0,     0,     0,     0,
     0,     0,   127,   127,   127,     0,   127,   127,   127,
     0,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,
   125,     0,   125,   125,   125,     0,     0,   125,     0,
     0,     0,     0,     0,     0,     0,     0,   125,   125,
   125,     0,   125,   125,   125,     0,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,
   125,   125,   125,   125,   126,     0,     0,   126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   126,   126,     0,   126,     0,   126,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    35,
     0,     0,    35,     0,     0,     0,     0,     0,     0,
     0,     0,   126,     0,     0,     0,     0,    35,    35,
     0,    35,     0,    35,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   133,     0,     0,   133,     0,     0,     0,   126,     0,
     0,     0,     0,     0,     0,     0,    35,     0,   133,
   133,     0,   133,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   130,     0,     0,   130,     0,     0,    50,     0,
     0,    50,    35,     0,     0,     0,     0,   133,     0,
   130,   130,     0,     0,     0,     0,    50,    50,    53,
     0,     0,    53,     0,     0,    54,     0,     0,    54,
     0,     0,     0,     0,     0,     0,     0,    53,    53,
     0,     0,     0,   133,    54,    54,    55,     0,   130,
    55,     0,     0,    51,     0,    50,    51,     0,     0,
     0,     0,     0,     0,     0,    55,    55,     0,     0,
     0,     0,    51,    51,     0,     0,    53,     0,     0,
     0,     0,     0,    54,   130,     0,     0,     0,     0,
    52,    50,     0,    52,     0,     0,    61,     0,     0,
    61,     0,     0,     0,    55,     0,     0,     0,    52,
    52,    51,    53,     0,     0,    61,    61,     0,    54,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   126,     0,   126,   126,   126,     0,
    55,   126,     0,     0,     0,     0,    51,    52,     0,
     0,   126,   126,   126,    61,   126,   126,   126,     0,
   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,    35,     0,
    35,    35,    35,    52,     0,    35,     0,     0,     0,
    61,     0,     0,     0,     0,    35,    35,    35,     0,
    35,    35,    35,     0,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    35,    35,    35,   133,
     0,   133,   133,   133,     0,     0,   133,     0,     0,
     0,     0,     0,     0,     0,     0,   133,   133,   133,
     0,   133,   133,   133,     0,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,
   130,     0,   130,   130,   130,     0,    50,   130,    50,
    50,    50,     0,     0,    50,     0,     0,   130,   130,
   130,     0,     0,     0,    50,    50,    50,    53,     0,
    53,    53,    53,     0,    54,    53,    54,    54,    54,
     0,     0,    54,     0,     0,    53,    53,    53,     0,
     0,     0,    54,    54,    54,    55,     0,    55,    55,
    55,     0,    51,    55,    51,    51,    51,     0,    60,
    51,     0,    60,    55,    55,    55,     0,     0,     0,
    51,    51,    51,     0,     0,     0,     0,    60,    60,
     0,     0,    57,     0,     0,    57,     0,     0,    52,
     0,    52,    52,    52,     0,    61,    52,    61,    61,
    61,    57,    57,    61,     0,     0,    52,    52,    52,
     0,     0,     0,    61,    61,    61,    60,     0,    58,
     0,     0,    58,     0,     0,    59,     0,     0,    59,
     0,     0,     0,     0,     0,     0,     0,    58,    58,
    57,     0,     0,     0,    59,    59,    56,     0,     0,
    56,     0,    60,    62,     0,     0,    62,     0,     0,
     0,     0,     0,     0,     0,    56,    56,     0,     0,
     0,     0,    62,    62,    63,    57,    58,    63,     0,
     0,    64,     0,    59,    64,     0,     0,     0,     0,
     0,     0,     0,    63,    63,     0,     0,     0,     0,
    64,    64,    66,     0,    56,    66,     0,     0,     0,
     0,    62,    58,     0,     0,     0,     0,     0,    59,
     0,    66,    66,    65,     0,     0,    65,     0,     0,
     0,     0,    63,     0,     0,     0,     0,     0,    64,
    56,     0,    65,    65,     0,     0,    62,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    66,     0,     0,     0,     0,     0,     0,    63,     0,
     0,     0,     0,     0,    64,     0,     0,     0,     0,
     0,    65,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    66,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    65,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    60,     0,
    60,    60,    60,     0,     0,    60,     0,     0,     0,
     0,     0,     0,     0,     0,    60,    60,    60,     0,
     0,    57,     0,    57,    57,    57,     0,     0,    57,
     0,     0,     0,     0,     0,     0,     0,     0,    57,
    57,    57,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,
    58,    58,    58,     0,    59,    58,    59,    59,    59,
     0,     0,    59,     0,     0,    58,    58,    58,     0,
     0,     0,    59,    59,    59,    56,     0,    56,    56,
    56,     0,    62,    56,    62,    62,    62,     0,     0,
    62,     0,     0,    56,    56,    56,     0,     0,     0,
    62,    62,    62,    63,     0,    63,    63,    63,     0,
    64,    63,    64,    64,    64,     0,     0,    64,     0,
     0,    63,    63,    63,     0,     0,     0,    64,    64,
    64,    66,     0,    66,    66,    66,     0,     0,    66,
     0,     0,     0,     0,     0,     0,     0,     0,    66,
    66,    66,    65,     0,    65,    65,    65,     0,     0,
    65,     0,     0,     0,     0,     0,     0,     0,     0,
    65,    65,    65};
}

 
static short yycheck[][] = new short[2][];
static { yycheck0(); yycheck1();}
static void yycheck0(){
yycheck[0] = new short[] {
    10,    35,    37,   280,    34,    92,    92,    42,    39,
    40,    41,    59,    47,    91,    24,    59,   347,     0,
   395,   266,    30,   123,    32,    33,    34,    35,    36,
    37,    38,   288,   289,    36,    37,    46,    47,   125,
    46,    47,    48,   125,    91,    59,    57,   420,   359,
   123,    77,    36,    37,   380,    81,    40,    45,   266,
    85,   370,    91,    36,    37,    64,   375,    40,   270,
    59,    79,     0,    96,   275,    59,    75,   275,    91,
   123,    36,    37,    64,   275,    40,    36,    37,   283,
   396,   397,   286,    99,    64,   275,   275,   123,   275,
   105,   266,   107,   108,   273,   110,   266,   112,   113,
   114,   115,    64,   266,   123,   267,   267,    64,   267,
   101,   102,   267,   104,   267,   267,   129,   128,    40,
   132,   283,   134,   285,   286,   287,    40,   123,   290,
   136,   137,   138,   139,   140,    40,   142,   143,   144,
   145,   223,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   182,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   201,    91,   198,
   220,   125,    40,   273,   283,   273,   285,   286,   287,
   347,   267,   290,   270,   271,   272,    41,   215,   275,
    93,   221,   222,   216,   125,    39,    34,    96,   225,
   226,   227,   267,   123,    17,    18,    19,    20,    21,
   267,   267,    59,   125,   125,    41,    41,    40,   267,
   249,   250,   251,   252,   253,   267,   267,   256,   257,
   258,   259,   275,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,   289,   290,   291,   292,   293,
   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   346,     0,
   280,   123,   347,   279,   316,   281,   347,   339,   340,
   341,   322,   343,   344,   345,   346,   267,   328,   329,
   330,   347,    59,   275,   275,   313,   327,   315,   343,
   344,   345,   346,   275,   338,    33,    34,   275,    36,
    37,    38,    39,    40,   275,   353,    43,   347,    45,
   348,   275,   275,   280,   339,   340,   341,   380,   343,
   125,   275,   275,   360,    59,   123,   275,    36,    37,
    64,   367,   368,   369,   275,   123,   125,   123,   378,
   379,   123,   123,   275,   275,   275,   390,   391,   275,
   371,   372,   274,    40,    40,    59,   125,   125,    64,
    91,    92,   125,   125,   125,    96,    41,   275,   275,
    59,    59,   413,   123,   410,    40,   123,   409,     0,
   411,   125,   125,   123,   125,    59,   125,   418,    59,
    59,    59,    59,    59,    59,   123,    41,   125,   126,
    33,    34,    59,    36,    37,    38,    39,    40,    50,
    41,    43,    15,    45,   340,   341,    31,   343,   344,
   345,   346,    33,    34,   146,    36,    37,    38,    39,
    40,    -1,    -1,    43,    64,    45,    -1,    -1,    -1,
    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    37,    -1,
    96,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,
    -1,    -1,    96,    60,    -1,    62,    -1,    -1,    -1,
   123,    91,    -1,   126,    -1,    -1,    37,    38,    -1,
    -1,    -1,    42,    43,    -1,    45,    46,    47,    -1,
    -1,    -1,   123,    -1,    -1,   126,    -1,    91,    -1,
    -1,    -1,    60,    -1,    62,    -1,   123,    -1,    -1,
    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,    -1,
   262,   263,    -1,    -1,   266,    -1,   268,   269,    -1,
    -1,    -1,    -1,   123,    -1,    -1,    91,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,    -1,
    -1,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   273,    -1,    -1,   302,    -1,    -1,   279,    -1,
   281,    34,   123,    36,    37,    38,    -1,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,
    -1,   344,   345,    37,    38,    -1,    -1,    -1,    42,
    43,    -1,    45,    46,    47,    -1,    -1,    -1,   266,
    -1,   268,   269,    -1,    91,    -1,    93,    94,    60,
    96,    62,    63,   279,    -1,   281,    -1,    -1,    -1,
    -1,   266,    -1,   268,   269,    -1,    -1,    -1,    -1,
   294,   295,   296,   297,   298,   279,    -1,   281,   302,
   123,   124,   125,    91,    -1,    -1,    94,    -1,    -1,
    -1,    -1,   294,   295,   296,   297,   298,    -1,    -1,
    -1,   302,    -1,    34,    -1,    36,    37,    38,    -1,
    40,    41,    42,    43,    44,    45,    46,    47,   123,
   124,    -1,    -1,    -1,    -1,   344,   345,    -1,   347,
    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,   345,
    -1,   347,    -1,    -1,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    -1,    91,    -1,    93,
    94,    -1,    96,    -1,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,    -1,   343,   344,
   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,   124,   125,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   341,    -1,   343,   344,   345,
   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,   275,
    -1,    -1,    -1,   279,    -1,   281,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,    -1,   343,   344,   345,   346,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,    -1,   343,   344,   345,   346,    -1,   273,
    -1,   275,    -1,    -1,    -1,   279,    -1,   281,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,
   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   341,    -1,   343,   344,   345,
   346,    34,    -1,    36,    37,    38,    -1,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    93,    94,    -1,
    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    36,    37,    38,    -1,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,
   123,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,
    94,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,   124,   125,    59,    -1,    34,    -1,
    36,    37,    38,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    63,    64,    -1,    93,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    93,    94,    -1,    96,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,   275,
    -1,    -1,    -1,   279,    -1,   281,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,   123,   124,   125,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,    -1,   343,   344,   345,   346,   273,
    -1,   275,    -1,    -1,    -1,   279,    -1,   281,    -1,
   283,    -1,   285,   286,   287,    37,    -1,   290,    -1,
    -1,    42,    43,    -1,    45,    46,    47,   299,   300,
   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   341,    91,   343,   344,   345,
   346,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   273,    -1,   275,    -1,    -1,    -1,
   279,   123,   281,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    34,    -1,    36,    37,
    38,    -1,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    93,    94,    -1,    96,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    36,    37,    38,    -1,    40,    41,    42,    43,    44,
    45,    46,    47,    -1,   123,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    93,    94,    -1,    96,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,   339,   340,   341,    -1,   343,   344,   345,   346,
    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,   125,
    59,    -1,    34,    -1,    36,    37,    38,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    64,    -1,    93,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,    94,
    -1,    96,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,   273,    -1,   275,    -1,    -1,    -1,   279,    -1,
   281,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,    -1,   343,
   344,   345,   346,   273,    -1,   275,    -1,    -1,    -1,
   279,    -1,   281,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    -1,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,
   275,    -1,    -1,    -1,   279,    -1,   281,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,    -1,   343,   344,   345,   346,
    33,    34,    -1,    36,    37,    38,    39,    40,    -1,
    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
    34,    -1,    36,    37,    38,    39,    40,    -1,    -1,
    43,    -1,    45,    -1,    91,    92,    -1,    -1,    -1,
    96,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   123,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    96,
    -1,    -1,    -1,    33,    34,    35,    36,    37,    38,
    39,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,   126,    -1,    -1,    -1,    -1,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,
    37,    38,    39,    40,    -1,    -1,    43,    -1,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    96,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,
    91,    92,    -1,    -1,    -1,    96,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   256,    -1,
    -1,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,
    -1,   268,   269,    -1,    -1,   123,    -1,    -1,   126,
    -1,    -1,    -1,   279,    -1,   281,   282,   283,   284,
   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
   294,   295,   296,   297,   298,    -1,   256,    41,   302,
    -1,    44,    -1,   262,   263,    -1,    -1,   266,    -1,
   268,   269,    -1,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,   279,    -1,   281,   282,   283,   284,   285,
   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
   295,   296,   297,   298,    -1,   344,   345,   302,    -1,
    -1,    -1,    37,    -1,    -1,    93,    -1,    42,    43,
    -1,    45,    46,    47,    -1,    -1,    -1,    33,    34,
    -1,    36,    37,    38,    39,    40,    -1,    60,    43,
    62,    45,   266,   267,   268,   269,    -1,    -1,    -1,
    -1,   125,    -1,    -1,   344,   345,   279,    -1,   281,
    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,   294,   295,   296,   297,   298,    -1,
    -1,    -1,   302,    -1,   266,    -1,   268,   269,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    96,   279,
    -1,   281,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,    -1,    -1,    -1,    -1,   294,   295,   296,   297,
   298,    -1,    -1,    -1,   302,    -1,    -1,   123,   344,
   345,   126,    33,    34,    -1,    36,    37,    38,    39,
    40,    41,    -1,    43,    -1,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    -1,    -1,    43,    64,    45,    -1,
    -1,   344,   345,    -1,    -1,    -1,    33,    34,    -1,
    36,    37,    38,    39,    40,    -1,    -1,    43,    64,
    45,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,
    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    92,    93,    -1,    -1,    96,    -1,   283,    -1,   285,
   286,   287,   123,    -1,   290,   126,    -1,    -1,    -1,
    -1,    91,    92,    -1,   299,   300,    96,    -1,    -1,
    -1,    -1,    -1,    -1,   123,    -1,    -1,   126,    33,
    34,    -1,    36,    37,    38,    39,    40,    -1,    -1,
    43,    -1,    45,    -1,    -1,    -1,   123,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,   266,   267,   268,
   269,    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,
    -1,   279,    -1,   281,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   294,   295,
   296,   297,   298,    91,    92,    -1,   302,    -1,    96,
    -1,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,    -1,   343,   344,   345,   346,    -1,    -1,   123,
    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   344,   345,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   266,    -1,   268,   269,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   279,    -1,   281,    -1,
    -1,    -1,    -1,   266,    41,   268,   269,    44,    -1,
    -1,    -1,   294,   295,   296,   297,   298,   279,    -1,
   281,   302,    -1,    58,    59,   266,   267,   268,   269,
    -1,    -1,    -1,    -1,   294,   295,   296,   297,   298,
   279,    -1,   281,   302,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   294,   295,   296,
   297,   298,    93,    -1,    -1,   302,    -1,   344,   345,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    33,    34,    -1,    36,    37,    38,    39,    40,
   344,   345,    43,    -1,    45,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,
   268,   269,   344,   345,    -1,    64,    41,    -1,    -1,
    44,    -1,   279,    -1,   281,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,   294,
   295,   296,   297,   298,    -1,    91,    92,   302,    -1,
    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,
    44,    45,    46,    47,    93,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,   126,    58,    59,    60,    61,
    62,    63,    -1,    -1,   344,   345,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    93,    94,    37,    38,    -1,
    -1,    -1,    42,    43,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    60,    61,    62,    63,    -1,   123,   124,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,    91,    37,    38,
    94,   299,   300,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   266,    -1,   268,   269,    -1,    -1,    -1,    91,    -1,
    -1,    94,    -1,    -1,   279,    -1,   281,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   294,   295,   296,   297,   298,    -1,    -1,    -1,
   302,    -1,    -1,   123,   124,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   344,   345,    -1,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,   303,   304,
   305,    -1,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,    -1,   343,   344,   345,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,
   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,   339,   340,   341,    -1,   343,   344,   345,
   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,    -1,   343,   344,
   345,   346,    37,    38,    -1,    -1,    -1,    42,    43,
    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    37,    38,    94,    -1,    41,    42,
    43,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,   123,   124,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    37,    38,    94,    -1,    41,
    42,    43,    -1,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,   123,
   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    37,    38,    94,    -1,
    41,    42,    43,    -1,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,   303,   304,
   305,    -1,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,    -1,   343,   344,   345,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,    -1,   343,   344,   345,   346,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   340,   341,    -1,   343,   344,   345,   346,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,    -1,   343,   344,   345,   346,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,
    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    37,    38,    94,    -1,    41,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,
    63,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    37,    38,    94,    -1,    41,    42,    43,
    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,   123,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    37,    38,    94,    -1,    41,    42,
    43,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,   123,   124,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,    -1,
   343,   344,   345,   346,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,   303,   304,
   305,    -1,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,   339,   340,
   341,    -1,   343,   344,   345,   346,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,    -1,   343,   344,   345,   346,    37,    38,
    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    -1,    -1,    91,    42,
    43,    94,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    -1,    -1,    91,    42,    43,    94,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
   124,    37,    38,    -1,    -1,    -1,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    94,    -1,    -1,    -1,    60,    -1,    62,
    -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,   124,    60,    -1,    62,
    -1,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    94,    -1,   123,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,    -1,   343,   344,
   345,   346,    -1,    -1,    -1,    -1,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,    -1,   343,   344,   345,   346,    -1,    -1,
    -1,    -1,    -1,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,    -1,   343,
   344,   345,   346,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    -1,    -1,    -1,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,   344,   345,   346,    37,    38,    -1,    -1,
    -1,    42,    43,    -1,    45,    46,    47,    41,    -1,
    -1,    44,    -1,    -1,    41,    -1,    -1,    44,    -1,
    -1,    60,    -1,    62,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
    37,    38,    93,    -1,    41,    42,    43,    44,    45,
    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,   124,    58,    59,    60,    61,    62,    63,
    -1,   125,    -1,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    -1,    37,    38,    -1,    -1,
    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    -1,   124,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    -1,    -1,    -1,    -1,    -1,    41,    42,    -1,    44,
    -1,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    63,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,   283,   290,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,   299,   300,   301,   124,   125,
    -1,   299,   300,   301,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,    -1,   343,   344,   345,   346,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,   339,   340,   341,   283,
   343,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,   339,   340,   341,   283,   343,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,
    -1,   343,    41,    42,   346,    44,    -1,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    37,
    38,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,    -1,   343,    -1,
    -1,   346,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    37,
    38,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    37,
    38,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   340,   341,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,   340,   341,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,   339,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   338,   339,    37,    38,    -1,    -1,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    37,
    38,    -1,    -1,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    38,    -1,    -1,    41,    -1,    43,
    44,    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    62,    63,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    38,    -1,    -1,
    41,    -1,    43,    44,    45,    46,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    -1,    -1,    -1,   124,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
    -1,    -1,   124,   125,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   337,   338,   339,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,   303,   304,
   305,    -1,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,   338,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,   337,
   338,    38,    -1,    -1,    41,    -1,    43,    44,    45,
    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    38,    -1,    -1,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,   124,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    38,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,   124,   125,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,   337,   338,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   299,   300,   301,    -1,   303,
   304,   305,    -1,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,   337,   338,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,
   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   337,   338,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,    38,    -1,    -1,
    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    -1,    41,    -1,    -1,    44,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
    44,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
    41,    -1,    -1,    44,    93,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   299,   300,   301,    -1,   303,   304,
   305,    -1,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,    38,    -1,    -1,    41,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
    -1,    -1,    44,    93,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
    -1,    -1,    41,    -1,    -1,    44,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    38,    -1,    -1,    41,   124,   125,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,
    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,
    41,   124,   125,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,   124,   125,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,   124,   125,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,};
}
static void yycheck1(){
yycheck[1] = new short[] {
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    41,   124,   125,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,
    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,   124,   125,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    58,
    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    41,   124,   125,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    41,   124,   125,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,   125,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   283,    -1,
   285,   286,   287,    -1,   125,   290,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   299,   300,   301,    -1,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   299,   300,   301,    -1,   303,   304,   305,
    -1,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,
   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,    41,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,    -1,    -1,    44,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,    58,
    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    41,    -1,
    -1,    44,   125,    -1,    -1,    -1,    -1,    93,    -1,
    58,    59,    -1,    -1,    -1,    -1,    58,    59,    41,
    -1,    -1,    44,    -1,    -1,    41,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    -1,    -1,    -1,   125,    58,    59,    41,    -1,    93,
    44,    -1,    -1,    41,    -1,    93,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    93,    -1,    -1,
    -1,    -1,    -1,    93,   125,    -1,    -1,    -1,    -1,
    41,   125,    -1,    44,    -1,    -1,    41,    -1,    -1,
    44,    -1,    -1,    -1,    93,    -1,    -1,    -1,    58,
    59,    93,   125,    -1,    -1,    58,    59,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
   125,   290,    -1,    -1,    -1,    -1,   125,    93,    -1,
    -1,   299,   300,   301,    93,   303,   304,   305,    -1,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   283,    -1,
   285,   286,   287,   125,    -1,   290,    -1,    -1,    -1,
   125,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
   303,   304,   305,    -1,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,   301,
    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   283,    -1,   285,   286,   287,    -1,   283,   290,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,   299,   300,
   301,    -1,    -1,    -1,   299,   300,   301,   283,    -1,
   285,   286,   287,    -1,   283,   290,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,   299,   300,   301,    -1,
    -1,    -1,   299,   300,   301,   283,    -1,   285,   286,
   287,    -1,   283,   290,   285,   286,   287,    -1,    41,
   290,    -1,    44,   299,   300,   301,    -1,    -1,    -1,
   299,   300,   301,    -1,    -1,    -1,    -1,    58,    59,
    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,   283,   290,   285,   286,
   287,    58,    59,   290,    -1,    -1,   299,   300,   301,
    -1,    -1,    -1,   299,   300,   301,    93,    -1,    41,
    -1,    -1,    44,    -1,    -1,    41,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    93,    -1,    -1,    -1,    58,    59,    41,    -1,    -1,
    44,    -1,   125,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    58,    59,    41,   125,    93,    44,    -1,
    -1,    41,    -1,    93,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    58,    59,    41,    -1,    93,    44,    -1,    -1,    -1,
    -1,    93,   125,    -1,    -1,    -1,    -1,    -1,   125,
    -1,    58,    59,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    93,
   125,    -1,    58,    59,    -1,    -1,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   299,   300,   301,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,   283,   290,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,   299,   300,   301,    -1,
    -1,    -1,   299,   300,   301,   283,    -1,   285,   286,
   287,    -1,   283,   290,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,   299,   300,   301,    -1,    -1,    -1,
   299,   300,   301,   283,    -1,   285,   286,   287,    -1,
   283,   290,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,   299,   300,   301,    -1,    -1,    -1,   299,   300,
   301,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
   300,   301,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   299,   300,   301};
}

 
final static short YYFINAL=1;
final static short YYMAXTOKEN=347;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'","'\"'","'#'","'$'","'%'","'&'","'\\''","'('","')'","'*'",
"'+'","','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,
"':'","';'","'<'","'='","'>'","'?'","'@'",null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'['","'\\\\'","']'","'^'",null,"'`'",null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,"PD_COL","PD_REF",
"PD_TIPO","PD_NUM","PD_VAR","COMENTARIO","DECLARACION_TIPO","IMPORT_JAVA",
"LINEA_JAVA","ID","VAR","ENTERO","DECIMAL","M_REX","S_REX","Y_REX","TEXTO",
"REX_MOD","SEP","STDIN","STDOUT","STDERR","MY","SUB","OUR","PACKAGE","WHILE",
"DO","FOR","UNTIL","IF","ELSIF","ELSE","UNLESS","LAST","NEXT","RETURN","Q","QQ",
"QR","QW","QX","LLOR","LLXOR","LLAND","LLNOT","MULTI_IGUAL","DIV_IGUAL",
"MOD_IGUAL","SUMA_IGUAL","MAS_IGUAL","MENOS_IGUAL","DESP_I_IGUAL",
"DESP_D_IGUAL","AND_IGUAL","OR_IGUAL","XOR_IGUAL","POW_IGUAL","LAND_IGUAL",
"LOR_IGUAL","DLOR_IGUAL","CONCAT_IGUAL","X_IGUAL","DOS_PUNTOS","LOR","DLOR",
"LAND","NUM_EQ","NUM_NE","STR_EQ","STR_NE","CMP","CMP_NUM","SMART_EQ","NUM_LE",
"NUM_GE","STR_LT","STR_LE","STR_GT","STR_GE","DESP_I","DESP_D","X","STR_REX",
"STR_NO_REX","UNITARIO","POW","MAS_MAS","MENOS_MENOS","FLECHA","AMBITO",
};
final static String yyrule[] = {
"$accept : raiz",
"raiz : fuente",
"fuente : masFuente cuerpo",
"masFuente :",
"masFuente : fuente funcionDef",
"funcionDef : funcionSub '{' cuerpo '}'",
"funcionSub : SUB ID",
"cuerpoR : sentencia",
"cuerpoR : cuerpoR sentencia",
"cuerpoNV : cuerpoR",
"cuerpo :",
"cuerpo : cuerpoNV",
"sentencia : lista modificador ';'",
"sentencia : ';'",
"sentencia : bloque",
"sentencia : flujo",
"sentencia : PACKAGE paqueteID ID ';'",
"sentencia : PACKAGE ID ';'",
"sentencia : COMENTARIO",
"sentencia : DECLARACION_TIPO",
"sentencia : error ';'",
"expresion : numero",
"expresion : cadena",
"expresion : variable",
"expresion : varMulti",
"expresion : asignacion",
"expresion : binario",
"expresion : aritmetica",
"expresion : logico",
"expresion : comparacion",
"expresion : coleccion",
"expresion : acceso",
"expresion : funcion",
"expresion : '&' funcion",
"expresion : regulares",
"expresion : expresion DOS_PUNTOS expresion",
"lista : listaR",
"listaR : expresion ',' listaR",
"listaR : expresion ','",
"listaR : expresion",
"modificador :",
"modificador : IF expresion",
"modificador : UNLESS expresion",
"modificador : WHILE expresion",
"modificador : UNTIL expresion",
"modificador : FOR expresion",
"flujo : NEXT ';'",
"flujo : LAST ';'",
"flujo : RETURN ';'",
"flujo : RETURN expresion ';'",
"asignacion : expresion '=' expresion",
"asignacion : expresion MAS_IGUAL expresion",
"asignacion : expresion MENOS_IGUAL expresion",
"asignacion : expresion MULTI_IGUAL expresion",
"asignacion : expresion DIV_IGUAL expresion",
"asignacion : expresion MOD_IGUAL expresion",
"asignacion : expresion POW_IGUAL expresion",
"asignacion : expresion AND_IGUAL expresion",
"asignacion : expresion OR_IGUAL expresion",
"asignacion : expresion XOR_IGUAL expresion",
"asignacion : expresion DESP_D_IGUAL expresion",
"asignacion : expresion DESP_I_IGUAL expresion",
"asignacion : expresion LAND_IGUAL expresion",
"asignacion : expresion LOR_IGUAL expresion",
"asignacion : expresion DLOR_IGUAL expresion",
"asignacion : expresion X_IGUAL expresion",
"asignacion : expresion CONCAT_IGUAL expresion",
"numero : ENTERO",
"numero : DECIMAL",
"cadena : '\\'' TEXTO '\\''",
"cadena : '\"' cadenaTexto '\"'",
"cadena : '`' cadenaTexto '`'",
"cadena : Q SEP TEXTO SEP",
"cadena : QW SEP TEXTO SEP",
"cadena : QQ SEP cadenaTexto SEP",
"cadena : QR SEP cadenaTexto SEP",
"cadena : QX SEP cadenaTexto SEP",
"cadenaTexto : cadenaTextoR",
"cadenaTextoR :",
"cadenaTextoR : cadenaTextoR variable",
"cadenaTextoR : cadenaTextoR TEXTO",
"variable : '$' VAR",
"variable : '@' VAR",
"variable : '%' VAR",
"variable : '$' paqueteVar VAR",
"variable : '@' paqueteVar VAR",
"variable : '%' paqueteVar VAR",
"variable : '$' '#' VAR",
"variable : '$' '#' paqueteVar VAR",
"variable : MY '$' VAR",
"variable : MY '@' VAR",
"variable : MY '%' VAR",
"variable : OUR '$' VAR",
"variable : OUR '@' VAR",
"variable : OUR '%' VAR",
"varMulti : MY '(' lista ')'",
"varMulti : OUR '(' lista ')'",
"paqueteVar : paqueteVar VAR AMBITO",
"paqueteVar : VAR AMBITO",
"paqueteID : paqueteID ID AMBITO",
"paqueteID : ID AMBITO",
"colParen : '(' lista ')'",
"colParen : '(' ')'",
"colRef : '[' lista ']'",
"colRef : '[' ']'",
"colRef : '{' lista '}'",
"colRef : '{' '}'",
"coleccion : colParen",
"coleccion : colRef",
"acceso : expresion colRef",
"acceso : expresion FLECHA colRef",
"acceso : '$' expresion",
"acceso : '@' expresion",
"acceso : '%' expresion",
"acceso : '\\\\' expresion",
"funcion : paqueteID ID expresion",
"funcion : paqueteID ID",
"funcion : ID expresion",
"funcion : ID",
"binario : expresion '|' expresion",
"binario : expresion '&' expresion",
"binario : '~' expresion",
"binario : expresion '^' expresion",
"binario : expresion DESP_I expresion",
"binario : expresion DESP_D expresion",
"logico : expresion LOR expresion",
"logico : expresion DLOR expresion",
"logico : expresion LAND expresion",
"logico : '!' expresion",
"logico : expresion LLOR expresion",
"logico : expresion LLAND expresion",
"logico : LLNOT expresion",
"logico : expresion LLXOR expresion",
"logico : expresion '?' expresion ':' expresion",
"comparacion : expresion NUM_EQ expresion",
"comparacion : expresion NUM_NE expresion",
"comparacion : expresion '<' expresion",
"comparacion : expresion NUM_LE expresion",
"comparacion : expresion '>' expresion",
"comparacion : expresion NUM_GE expresion",
"comparacion : expresion CMP_NUM expresion",
"comparacion : expresion STR_EQ expresion",
"comparacion : expresion STR_NE expresion",
"comparacion : expresion STR_LT expresion",
"comparacion : expresion STR_LE expresion",
"comparacion : expresion STR_GT expresion",
"comparacion : expresion STR_GE expresion",
"comparacion : expresion CMP expresion",
"comparacion : expresion SMART_EQ expresion",
"aritmetica : expresion '+' expresion",
"aritmetica : expresion '-' expresion",
"aritmetica : expresion '*' expresion",
"aritmetica : expresion '/' expresion",
"aritmetica : expresion POW expresion",
"aritmetica : expresion X expresion",
"aritmetica : expresion '.' expresion",
"aritmetica : expresion '%' expresion",
"aritmetica : '+' expresion",
"aritmetica : '-' expresion",
"aritmetica : MAS_MAS expresion",
"aritmetica : MENOS_MENOS expresion",
"aritmetica : expresion MAS_MAS",
"aritmetica : expresion MENOS_MENOS",
"regulares : expresion STR_REX M_REX SEP cadenaTexto SEP rexMod",
"regulares : expresion STR_REX SEP cadenaTexto SEP rexMod",
"regulares : expresion STR_NO_REX M_REX SEP cadenaTexto SEP rexMod",
"regulares : expresion STR_NO_REX SEP cadenaTexto SEP rexMod",
"regulares : expresion STR_REX S_REX SEP cadenaTexto SEP cadenaTexto SEP rexMod",
"regulares : expresion STR_REX Y_REX SEP cadenaTexto SEP cadenaTexto SEP rexMod",
"rexMod :",
"rexMod : REX_MOD",
"abrirBloque :",
"listaFor :",
"listaFor : lista",
"bloque : '{' cuerpoNV '}'",
"bloque : WHILE abrirBloque '(' expresion ')' '{' cuerpo '}'",
"bloque : UNTIL abrirBloque '(' expresion ')' '{' cuerpo '}'",
"bloque : DO abrirBloque '{' cuerpo '}' WHILE '(' expresion ')' ';'",
"bloque : DO abrirBloque '{' cuerpo '}' UNTIL '(' expresion ')' ';'",
"bloque : FOR abrirBloque '(' listaFor ';' listaFor ';' listaFor ')' '{' cuerpo '}'",
"bloque : FOR abrirBloque variable colParen '{' cuerpo '}'",
"bloque : FOR abrirBloque colParen '{' cuerpo '}'",
"bloque : IF abrirBloque '(' expresion ')' '{' cuerpo '}' condicional",
"bloque : UNLESS abrirBloque '(' expresion ')' '{' cuerpo '}' condicional",
"condicional :",
"condicional : ELSIF '(' expresion ')' '{' cuerpo '}' condicional",
"condicional : ELSE '{' cuerpo '}'",
};

//#line 306 "parser.y"

	private List<Simbolo> simbolos;
	private List<Terminal> terminales;
	private Iterator<Terminal> iterator;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;
	
	/**
	 * Constructor del analizador sintactico
	 * @param terminales Terminales
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Parser(List<Terminal> terminales, Opciones opciones,GestorErrores gestorErrores) {
		this.terminales = terminales;
		simbolos = new ArrayList<>(terminales.size()*10);
		iterator = terminales.iterator();
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		errores = 0;
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores sintacticos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}
	
	/**
	 * Activa el depurador nativo del analizador
	 * @param debugMe Estado
	 */
	public void debug(boolean debugMe){
		yydebug = debugMe;
	}

	/**
	 * Inicia el analisis y la creación del arbol de simbolos. Una vez terminado
	 * se obtiene una lista ordenada de los símbolos segun fueron analizados y
	 * unidos entre si en forma de arbol.
	 * @return Lista de Símbolos
	 */
	public List<Simbolo> parsear(){
		yyparse();
		return simbolos;
	}

	/**
	 * Función interna auxiliar que extraer el símbolo del ParseVal y luego lo 
	 * retorna casteado al tipo que requiere su padre.
	 * @param <T> Tipo requerido por el constructor del padre
	 * @param pv ParserVal del analizador
	 * @return Simbolo castadeado al subtipo requerido
	 */
	private <T> T s(ParserVal pv){
		return (T)pv.get();
	}

	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna encapsulado en un ParseVal del analizador.
	 * @param s Simbolo
	 * @return ParseVal
	 */
	private ParserVal set(Simbolo s){
		simbolos.add(s);
		return new ParserVal(s);
	}
	
	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna encapsulado en un ParseVal del analizador.
	 * @param s Simbolo
	 * @param add Añadir a la lista
	 * @return ParseVal
	 */
	private ParserVal set(Simbolo s, boolean add){
		if(add){
			simbolos.add(s);
		}
		return new ParserVal(s);
	}	
	
	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna.
	 * @param s Simbolo
	 * @return Simbolo s
	 */
	private <T extends Simbolo>  T add(T s){
		simbolos.add(s);
		return s;
	}
	
	/**
	 * Función interna auxiliar que simula que las expresiones estan dentro de parentesis
	 * aunque no sea asi en el codigo fuente.
	 * @param s Simbolo
	 * @return Simbolo s
	 */
	private ExpColeccion virtualCol(Expresion s){
		if(!(s instanceof ExpColeccion && ((ExpColeccion)s).getColeccion() instanceof ColParentesis)){
            Lista l = new Lista((Expresion)s);
            Coleccion col = new ColParentesis(l);
			simbolos.add(col);
			ExpColeccion expcol= new ExpColeccion(col);
			simbolos.add(expcol);		
			return expcol;
		}
		return (ExpColeccion)s;
	}

	/**
	 * Función invocada por el analizador cada vez que necesita un terminal.
	 * @return Tipo del terminal
	 */
	private int yylex (){
		if(iterator.hasNext()){
			Terminal t = iterator.next();
			yylval = set(t);
			return t.getToken().getTipo();
		}
		return 0;
	}

	/**
	 * Función invocada cuando el analizador encuentra un error sintactico.
	 * @param descripcion String con el mensaje "Syntax error"
	 */
	private void yyerror (String descripcion){
		errores++;
		List<Integer> tokens = new ArrayList<>(YYMAXTOKEN);
		int yychar, yyn;
		//Reducir
		for( yychar = 0 ; yychar < YYMAXTOKEN ; yychar++ ){   
			yyn = yyrindex[yystate];  
			if ((yyn !=0 ) && (yyn += yychar) >= 0 && yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar){  
				tokens.add(yychar);
			}
		}
		//Desplazar
		for( yychar = 0 ; yychar < YYMAXTOKEN ; yychar++ ){  
			yyn = yysindex[yystate];  
			if ((yyn != 0) && (yyn += yychar) >= 0 && yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar){  
				tokens.add(yychar);
			}
		}
		ParserError.errorSintactico(this, tokens);
	}
//#line 2907 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn/9000][yyn%9000]);
        //#### NEXT STATE ####
        yystate = yytable[yyn/9000][yyn%9000];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn/9000][yyn%9000];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn/9000][yyn%9000]+" ");
            yystate = yytable[yyn/9000][yyn%9000];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 79 "parser.y"
{yyval=set(new Raiz(add(s(val_peek(0)))));}
break;
case 2:
//#line 81 "parser.y"
{yyval=set(Fuente.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 3:
//#line 83 "parser.y"
{yyval=set(new Fuente(), false);}
break;
case 4:
//#line 84 "parser.y"
{yyval=set(Fuente.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 5:
//#line 86 "parser.y"
{yyval=set(new FuncionDef(s(val_peek(3)), s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 6:
//#line 88 "parser.y"
{yyval=set(new FuncionSub(s(val_peek(1)), s(val_peek(0))));}
break;
case 7:
//#line 90 "parser.y"
{yyval=set(Cuerpo.add(new Cuerpo(add(new AbrirBloque())), s(val_peek(0))), false);}
break;
case 8:
//#line 91 "parser.y"
{yyval=set(Cuerpo.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 9:
//#line 93 "parser.y"
{yyval=set(s(val_peek(0)));}
break;
case 10:
//#line 95 "parser.y"
{yyval=set(new Cuerpo(add(new AbrirBloque())));}
break;
case 11:
//#line 96 "parser.y"
{yyval=val_peek(0);}
break;
case 12:
//#line 98 "parser.y"
{yyval=set(new StcLista(s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 13:
//#line 99 "parser.y"
{yyval=set(new StcLista(new Lista(), new ModNada(), s(val_peek(0))));}
break;
case 14:
//#line 100 "parser.y"
{yyval=set(new StcBloque(s(val_peek(0))));}
break;
case 15:
//#line 101 "parser.y"
{yyval=set(new StcFlujo(s(val_peek(0))));}
break;
case 16:
//#line 102 "parser.y"
{yyval=set(new StcPaquete(s(val_peek(3)), s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 17:
//#line 103 "parser.y"
{yyval=set(new StcPaquete(s(val_peek(2)), new Paquetes(), s(val_peek(1)), s(val_peek(0))));}
break;
case 18:
//#line 104 "parser.y"
{yyval=set(new StcComentario(s(val_peek(0))));}
break;
case 19:
//#line 105 "parser.y"
{yyval=set(new StcDeclaracion(s(val_peek(0))));}
break;
case 20:
//#line 106 "parser.y"
{yyval=set(new StcError());}
break;
case 21:
//#line 108 "parser.y"
{yyval=set(new ExpNumero(s(val_peek(0))));}
break;
case 22:
//#line 109 "parser.y"
{yyval=set(new ExpCadena(s(val_peek(0))));}
break;
case 23:
//#line 110 "parser.y"
{yyval=set(new ExpVariable(s(val_peek(0))));}
break;
case 24:
//#line 111 "parser.y"
{yyval=set(new ExpVarMulti(s(val_peek(0))));}
break;
case 25:
//#line 112 "parser.y"
{yyval=set(new ExpAsignacion(s(val_peek(0))));}
break;
case 26:
//#line 113 "parser.y"
{yyval=set(new ExpBinario(s(val_peek(0))));}
break;
case 27:
//#line 114 "parser.y"
{yyval=set(new ExpAritmetica(s(val_peek(0))));}
break;
case 28:
//#line 115 "parser.y"
{yyval=set(new ExpLogico(s(val_peek(0))));}
break;
case 29:
//#line 116 "parser.y"
{yyval=set(new ExpComparacion(s(val_peek(0))));}
break;
case 30:
//#line 117 "parser.y"
{yyval=set(new ExpColeccion(s(val_peek(0))));}
break;
case 31:
//#line 118 "parser.y"
{yyval=set(new ExpAcceso(s(val_peek(0))));}
break;
case 32:
//#line 119 "parser.y"
{yyval=set(new ExpFuncion(s(val_peek(0))));}
break;
case 33:
//#line 120 "parser.y"
{yyval=set(new ExpFuncion5(s(val_peek(1)), s(val_peek(0))));}
break;
case 34:
//#line 121 "parser.y"
{yyval=set(new ExpRegulares(s(val_peek(0))));}
break;
case 35:
//#line 122 "parser.y"
{yyval=set(new ExpRango(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 36:
//#line 124 "parser.y"
{yyval=set(s(val_peek(0)));}
break;
case 37:
//#line 126 "parser.y"
{yyval=set(Lista.add(s(val_peek(2)), s(val_peek(1)), s(val_peek(0))), false);}
break;
case 38:
//#line 127 "parser.y"
{yyval=set(new Lista(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 39:
//#line 128 "parser.y"
{yyval=set(new Lista(s(val_peek(0))), false);}
break;
case 40:
//#line 130 "parser.y"
{yyval=set(new ModNada());}
break;
case 41:
//#line 131 "parser.y"
{yyval=set(new ModIf(s(val_peek(1)), s(val_peek(0))));}
break;
case 42:
//#line 132 "parser.y"
{yyval=set(new ModUnless(s(val_peek(1)), s(val_peek(0))));}
break;
case 43:
//#line 133 "parser.y"
{yyval=set(new ModWhile(s(val_peek(1)), s(val_peek(0))));}
break;
case 44:
//#line 134 "parser.y"
{yyval=set(new ModUntil(s(val_peek(1)), s(val_peek(0))));}
break;
case 45:
//#line 135 "parser.y"
{yyval=set(new ModFor(s(val_peek(1)), s(val_peek(0))));}
break;
case 46:
//#line 137 "parser.y"
{yyval=set(new Next(s(val_peek(1)), s(val_peek(0))));}
break;
case 47:
//#line 138 "parser.y"
{yyval=set(new Last(s(val_peek(1)), s(val_peek(0))));}
break;
case 48:
//#line 139 "parser.y"
{yyval=set(new Return(s(val_peek(1)), s(val_peek(0))));}
break;
case 49:
//#line 140 "parser.y"
{yyval=set(new Return(s(val_peek(2)), virtualCol(s(val_peek(1))), s(val_peek(0))));}
break;
case 50:
//#line 142 "parser.y"
{yyval=set(new Igual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 51:
//#line 143 "parser.y"
{yyval=set(new MasIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 52:
//#line 144 "parser.y"
{yyval=set(new MenosIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 53:
//#line 145 "parser.y"
{yyval=set(new MultiIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 54:
//#line 146 "parser.y"
{yyval=set(new DivIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 55:
//#line 147 "parser.y"
{yyval=set(new ModIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 56:
//#line 148 "parser.y"
{yyval=set(new PowIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 57:
//#line 149 "parser.y"
{yyval=set(new AndIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 58:
//#line 150 "parser.y"
{yyval=set(new OrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 59:
//#line 151 "parser.y"
{yyval=set(new XorIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 60:
//#line 152 "parser.y"
{yyval=set(new DespDIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 61:
//#line 153 "parser.y"
{yyval=set(new DespIIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 62:
//#line 154 "parser.y"
{yyval=set(new LAndIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 63:
//#line 155 "parser.y"
{yyval=set(new LOrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 64:
//#line 156 "parser.y"
{yyval=set(new DLOrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 65:
//#line 157 "parser.y"
{yyval=set(new XIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 66:
//#line 158 "parser.y"
{yyval=set(new ConcatIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 67:
//#line 160 "parser.y"
{yyval=set(new Entero(s(val_peek(0))));}
break;
case 68:
//#line 161 "parser.y"
{yyval=set(new Decimal(s(val_peek(0))));}
break;
case 69:
//#line 163 "parser.y"
{yyval=set(new CadenaSimple(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 70:
//#line 164 "parser.y"
{yyval=set(new CadenaDoble(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 71:
//#line 165 "parser.y"
{yyval=set(new CadenaComando(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 72:
//#line 166 "parser.y"
{yyval=set(new CadenaQ(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 73:
//#line 167 "parser.y"
{yyval=set(new CadenaQW(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 74:
//#line 168 "parser.y"
{yyval=set(new CadenaQQ(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 75:
//#line 169 "parser.y"
{yyval=set(new CadenaQR(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 76:
//#line 170 "parser.y"
{yyval=set(new CadenaQX(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 77:
//#line 172 "parser.y"
{yyval=set(s(val_peek(0)));}
break;
case 78:
//#line 174 "parser.y"
{yyval=set(new CadenaTexto(),false);}
break;
case 79:
//#line 175 "parser.y"
{yyval=set(CadenaTexto.add(s(val_peek(1)),s(val_peek(0))),false);}
break;
case 80:
//#line 176 "parser.y"
{yyval=set(CadenaTexto.add(s(val_peek(1)),s(val_peek(0))),false);}
break;
case 81:
//#line 178 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 82:
//#line 179 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 83:
//#line 180 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 84:
//#line 181 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 85:
//#line 182 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 86:
//#line 183 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 87:
//#line 184 "parser.y"
{yyval=set(new VarSigil(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 88:
//#line 185 "parser.y"
{yyval=set(new VarPaqueteSigil(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 89:
//#line 186 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 90:
//#line 187 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 91:
//#line 188 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 92:
//#line 189 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 93:
//#line 190 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 94:
//#line 191 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 95:
//#line 193 "parser.y"
{yyval=set(new VarMultiMy(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 96:
//#line 194 "parser.y"
{yyval=set(new VarMultiOur(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 97:
//#line 196 "parser.y"
{yyval=set(Paquetes.add(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 98:
//#line 197 "parser.y"
{yyval=set(new Paquetes(s(val_peek(1)),s(val_peek(0))));}
break;
case 99:
//#line 199 "parser.y"
{yyval=set(Paquetes.add(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 100:
//#line 200 "parser.y"
{yyval=set(new Paquetes(s(val_peek(1)),s(val_peek(0))));}
break;
case 101:
//#line 202 "parser.y"
{yyval=set(new ColParentesis(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 102:
//#line 203 "parser.y"
{yyval=set(new ColParentesis(s(val_peek(1)),new Lista(),s(val_peek(0))));}
break;
case 103:
//#line 205 "parser.y"
{yyval=set(new ColCorchete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 104:
//#line 206 "parser.y"
{yyval=set(new ColCorchete(s(val_peek(1)),add(new Lista()),s(val_peek(0))));}
break;
case 105:
//#line 207 "parser.y"
{yyval=set(new ColLlave(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 106:
//#line 208 "parser.y"
{yyval=set(new ColLlave(s(val_peek(1)),add(new Lista()),s(val_peek(0))));}
break;
case 107:
//#line 210 "parser.y"
{yyval=val_peek(0);}
break;
case 108:
//#line 211 "parser.y"
{yyval=val_peek(0);}
break;
case 109:
//#line 213 "parser.y"
{yyval=set(new AccesoCol(s(val_peek(1)),s(val_peek(0))));}
break;
case 110:
//#line 214 "parser.y"
{yyval=set(new AccesoColRef(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 111:
//#line 215 "parser.y"
{yyval=set(new AccesoRefEscalar(s(val_peek(1)),s(val_peek(0))));}
break;
case 112:
//#line 216 "parser.y"
{yyval=set(new AccesoRefArray(s(val_peek(1)),s(val_peek(0))));}
break;
case 113:
//#line 217 "parser.y"
{yyval=set(new AccesoRefMap(s(val_peek(1)),s(val_peek(0))));}
break;
case 114:
//#line 218 "parser.y"
{yyval=set(new AccesoRef(s(val_peek(1)),s(val_peek(0))));}
break;
case 115:
//#line 220 "parser.y"
{yyval=set(new FuncionPaqueteArgs(s(val_peek(2)),s(val_peek(1)),virtualCol(s(val_peek(0)))));}
break;
case 116:
//#line 221 "parser.y"
{yyval=set(new FuncionPaqueteNoArgs(s(val_peek(1)),s(val_peek(0))));}
break;
case 117:
//#line 222 "parser.y"
{yyval=set(new FuncionArgs(s(val_peek(1)),virtualCol(s(val_peek(0)))));}
break;
case 118:
//#line 223 "parser.y"
{yyval=set(new FuncionNoArgs(s(val_peek(0))));}
break;
case 119:
//#line 225 "parser.y"
{yyval=set(new BinOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 120:
//#line 226 "parser.y"
{yyval=set(new BinAnd(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 121:
//#line 227 "parser.y"
{yyval=set(new BinNot(s(val_peek(1)),s(val_peek(0))));}
break;
case 122:
//#line 228 "parser.y"
{yyval=set(new BinXor(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 123:
//#line 229 "parser.y"
{yyval=set(new BinDespI(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 124:
//#line 230 "parser.y"
{yyval=set(new BinDespD(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 125:
//#line 232 "parser.y"
{yyval=set(new LogOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 126:
//#line 233 "parser.y"
{yyval=set(new DLogOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 127:
//#line 234 "parser.y"
{yyval=set(new LogAnd(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 128:
//#line 235 "parser.y"
{yyval=set(new LogNot(s(val_peek(1)),s(val_peek(0))));}
break;
case 129:
//#line 236 "parser.y"
{yyval=set(new LogOrBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 130:
//#line 237 "parser.y"
{yyval=set(new LogAndBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 131:
//#line 238 "parser.y"
{yyval=set(new LogNotBajo(s(val_peek(1)),s(val_peek(0))));}
break;
case 132:
//#line 239 "parser.y"
{yyval=set(new LogXorBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 133:
//#line 240 "parser.y"
{yyval=set(new LogTernario(s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 134:
//#line 242 "parser.y"
{yyval=set(new CompNumEq(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 135:
//#line 243 "parser.y"
{yyval=set(new CompNumNe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 136:
//#line 244 "parser.y"
{yyval=set(new CompNumLt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 137:
//#line 245 "parser.y"
{yyval=set(new CompNumLe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 138:
//#line 246 "parser.y"
{yyval=set(new CompNumGt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 139:
//#line 247 "parser.y"
{yyval=set(new CompNumGe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 140:
//#line 248 "parser.y"
{yyval=set(new CompNumCmp(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 141:
//#line 249 "parser.y"
{yyval=set(new CompStrEq(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 142:
//#line 250 "parser.y"
{yyval=set(new CompStrNe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 143:
//#line 251 "parser.y"
{yyval=set(new CompStrLt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 144:
//#line 252 "parser.y"
{yyval=set(new CompStrLe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 145:
//#line 253 "parser.y"
{yyval=set(new CompStrGt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 146:
//#line 254 "parser.y"
{yyval=set(new CompStrGe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 147:
//#line 255 "parser.y"
{yyval=set(new CompStrCmp(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 148:
//#line 256 "parser.y"
{yyval=set(new CompSmart(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 149:
//#line 258 "parser.y"
{yyval=set(new AritSuma(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 150:
//#line 259 "parser.y"
{yyval=set(new AritResta(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 151:
//#line 260 "parser.y"
{yyval=set(new AritMulti(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 152:
//#line 261 "parser.y"
{yyval=set(new AritDiv(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 153:
//#line 262 "parser.y"
{yyval=set(new AritPow(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 154:
//#line 263 "parser.y"
{yyval=set(new AritX(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 155:
//#line 264 "parser.y"
{yyval=set(new AritConcat(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 156:
//#line 265 "parser.y"
{yyval=set(new AritMod(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 157:
//#line 266 "parser.y"
{yyval=set(new AritPositivo(s(val_peek(1)),s(val_peek(0))));}
break;
case 158:
//#line 267 "parser.y"
{yyval=set(new AritNegativo(s(val_peek(1)),s(val_peek(0))));}
break;
case 159:
//#line 268 "parser.y"
{yyval=set(new AritPreIncremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 160:
//#line 269 "parser.y"
{yyval=set(new AritPreDecremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 161:
//#line 270 "parser.y"
{yyval=set(new AritPostIncremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 162:
//#line 271 "parser.y"
{yyval=set(new AritPostDecremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 163:
//#line 273 "parser.y"
{yyval=set(new RegularMatch(s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 164:
//#line 274 "parser.y"
{yyval=set(new RegularMatch(s(val_peek(5)),s(val_peek(4)),null ,s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 165:
//#line 275 "parser.y"
{yyval=set(new RegularNoMatch(s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 166:
//#line 276 "parser.y"
{yyval=set(new RegularNoMatch(s(val_peek(5)),s(val_peek(4)),null ,s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 167:
//#line 277 "parser.y"
{yyval=set(new RegularSubs(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 168:
//#line 278 "parser.y"
{yyval=set(new RegularTrans(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 169:
//#line 280 "parser.y"
{yyval=set(null,false);}
break;
case 170:
//#line 281 "parser.y"
{yyval=val_peek(0);}
break;
case 171:
//#line 283 "parser.y"
{yyval=set(new AbrirBloque());}
break;
case 172:
//#line 285 "parser.y"
{yyval=set(new Lista());}
break;
case 173:
//#line 286 "parser.y"
{yyval=val_peek(0);}
break;
case 174:
//#line 288 "parser.y"
{yyval=set(new BloqueVacio(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 175:
//#line 289 "parser.y"
{yyval=set(new BloqueWhile(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 176:
//#line 290 "parser.y"
{yyval=set(new BloqueUntil(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 177:
//#line 291 "parser.y"
{yyval=set(new BloqueDoWhile(s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 178:
//#line 292 "parser.y"
{yyval=set(new BloqueDoUntil(s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 179:
//#line 293 "parser.y"
{yyval=set(new BloqueFor(s(val_peek(11)),s(val_peek(10)),s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 180:
//#line 294 "parser.y"
{yyval=set(new BloqueForeachVar(s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 181:
//#line 295 "parser.y"
{yyval=set(new BloqueForeach(s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 182:
//#line 296 "parser.y"
{yyval=set(new BloqueIf(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 183:
//#line 297 "parser.y"
{yyval=set(new BloqueUnless(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 184:
//#line 299 "parser.y"
{yyval=set(new CondicionalNada());}
break;
case 185:
//#line 300 "parser.y"
{yyval=set(new CondicionalElsif(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 186:
//#line 301 "parser.y"
{yyval=set(new CondicionalElse(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
//#line 3800 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yystate)
        yystate = yytable[yyn/9000][yyn%9000]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
