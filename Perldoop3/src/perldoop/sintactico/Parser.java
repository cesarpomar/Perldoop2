//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package perldoop.sintactico;



//#line 2 "parser.y"
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import perldoop.modelo.Opciones;
import perldoop.error.GestorErrores;
import perldoop.modelo.sintactico.ParserVal;
import perldoop.modelo.arbol.*;
import perldoop.modelo.arbol.fuente.*;
import perldoop.modelo.arbol.funciondef.*;
import perldoop.modelo.arbol.funcionsub.*;
import perldoop.modelo.arbol.cuerpo.*;
import perldoop.modelo.arbol.sentencia.*;
import perldoop.modelo.arbol.expresion.*;
import perldoop.modelo.arbol.lista.*;
import perldoop.modelo.arbol.modificador.*;
import perldoop.modelo.arbol.flujo.*;
import perldoop.modelo.arbol.asignacion.*;
import perldoop.modelo.arbol.constante.*;
import perldoop.modelo.arbol.variable.*;
import perldoop.modelo.arbol.varmulti.*;
import perldoop.modelo.arbol.paquete.*;
import perldoop.modelo.arbol.coleccion.*;
import perldoop.modelo.arbol.acceso.*;
import perldoop.modelo.arbol.funcion.*;
import perldoop.modelo.arbol.abrirbloque.*;
import perldoop.modelo.arbol.bloque.*;
import perldoop.modelo.arbol.condicional.*;
import perldoop.modelo.arbol.regulares.*;
import perldoop.modelo.arbol.binario.*;
import perldoop.modelo.arbol.logico.*;
import perldoop.modelo.arbol.comparacion.*;
import perldoop.modelo.arbol.aritmetica.*;
//#line 50 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:ParserVal
String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[] = new ParserVal[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
final void val_push(ParserVal val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    ParserVal[] newstack = new ParserVal[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final ParserVal val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final ParserVal val_peek(int relative)
{
  return valstk[valptr-relative];
}
final ParserVal dup_yyval(ParserVal val)
{
  return val;
}
//#### end semantic value section ####
public final static short PD_COL=257;
public final static short PD_REF=258;
public final static short PD_TIPO=259;
public final static short PD_NUM=260;
public final static short PD_VAR=261;
public final static short COMENTARIO=262;
public final static short DECLARACION_TIPO=263;
public final static short IMPORT_JAVA=264;
public final static short LINEA_JAVA=265;
public final static short ID=266;
public final static short VAR=267;
public final static short ENTERO=268;
public final static short DECIMAL=269;
public final static short CADENA_SIMPLE=270;
public final static short CADENA_DOBLE=271;
public final static short CADENA_COMANDO=272;
public final static short M_REGEX=273;
public final static short S_REGEX=274;
public final static short Y_REGEX=275;
public final static short STDIN=276;
public final static short STDOUT=277;
public final static short STDERR=278;
public final static short MY=279;
public final static short SUB=280;
public final static short OUR=281;
public final static short PACKAGE=282;
public final static short WHILE=283;
public final static short DO=284;
public final static short FOR=285;
public final static short UNTIL=286;
public final static short IF=287;
public final static short ELSIF=288;
public final static short ELSE=289;
public final static short UNLESS=290;
public final static short LAST=291;
public final static short NEXT=292;
public final static short RETURN=293;
public final static short LLOR=294;
public final static short LLXOR=295;
public final static short LLAND=296;
public final static short LLNOT=297;
public final static short MULTI_IGUAL=298;
public final static short DIV_IGUAL=299;
public final static short MOD_IGUAL=300;
public final static short SUMA_IGUAL=301;
public final static short MAS_IGUAL=302;
public final static short MENOS_IGUAL=303;
public final static short DESP_I_IGUAL=304;
public final static short DESP_D_IGUAL=305;
public final static short AND_IGUAL=306;
public final static short OR_IGUAL=307;
public final static short XOR_IGUAL=308;
public final static short POW_IGUAL=309;
public final static short LAND_IGUAL=310;
public final static short LOR_IGUAL=311;
public final static short DLOR_IGUAL=312;
public final static short CONCAT_IGUAL=313;
public final static short X_IGUAL=314;
public final static short DOS_PUNTOS=315;
public final static short LOR=316;
public final static short DLOR=317;
public final static short LAND=318;
public final static short NUM_EQ=319;
public final static short NUM_NE=320;
public final static short STR_EQ=321;
public final static short STR_NE=322;
public final static short CMP=323;
public final static short CMP_NUM=324;
public final static short SMART_EQ=325;
public final static short NUM_LE=326;
public final static short NUM_GE=327;
public final static short STR_LT=328;
public final static short STR_LE=329;
public final static short STR_GT=330;
public final static short STR_GE=331;
public final static short DESP_I=332;
public final static short DESP_D=333;
public final static short X=334;
public final static short STR_REX=335;
public final static short STR_NO_REX=336;
public final static short UNITARIO=337;
public final static short POW=338;
public final static short MAS_MAS=339;
public final static short MENOS_MENOS=340;
public final static short FLECHA=341;
public final static short AMBITO=342;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    2,    2,    4,    5,    6,    6,    8,    3,
    3,    7,    7,    7,    7,    7,    7,    7,    7,    7,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,    9,    9,    9,   10,   10,   10,
   10,   10,   10,   12,   12,   12,   12,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   15,   15,   15,   15,   15,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   17,   17,   27,   27,   13,   13,   28,
   28,   29,   29,   29,   29,   23,   23,   24,   24,   24,
   24,   24,   24,   25,   25,   25,   25,   26,   26,   26,
   26,   19,   19,   19,   19,   19,   19,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   30,   31,   31,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   32,   32,
   32,
};
final static short yylen[] = {                            2,
    1,    2,    0,    2,    4,    2,    1,    2,    1,    0,
    1,    3,    1,    1,    1,    4,    3,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    3,    3,    2,    1,    0,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    2,
    2,    2,    3,    3,    3,    3,    4,    3,    3,    3,
    3,    3,    3,    4,    4,    3,    2,    3,    2,    3,
    2,    3,    2,    3,    2,    1,    1,    2,    3,    2,
    2,    2,    2,    3,    2,    2,    1,    3,    3,    3,
    3,    3,    3,    2,    3,    3,    3,    3,    3,    3,
    2,    3,    3,    2,    3,    5,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
    2,    2,    2,    2,    2,    0,    0,    1,    3,    8,
    8,   10,   10,   12,    7,    6,    9,    9,    0,    8,
    4,
};
final static short yydefred[] = {                         3,
    0,    0,    0,    0,    4,    0,    0,   18,   19,    0,
   65,   66,   67,   68,   69,    0,    0,    0,  156,  156,
  156,  156,  156,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
    0,    0,    0,    2,    0,    7,   11,    0,   14,   15,
    0,    0,   21,   22,   23,   24,   25,   26,   27,   28,
   29,   30,   31,   33,   96,   97,    6,    0,   20,    0,
   89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,   44,
   46,    0,    0,   32,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   91,    0,   93,    0,   95,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    8,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  154,  155,    0,   98,    0,    0,   80,    0,
   78,   79,   83,    0,   81,   82,   17,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,   87,    0,   90,   92,  159,   94,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   12,   88,    0,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  109,  110,  111,  108,    0,   99,    5,
   84,   85,   16,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   86,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  158,    0,    0,
  166,    0,    0,    0,    0,    0,    0,    0,  165,    0,
    0,    0,  160,    0,    0,    0,  161,    0,    0,    0,
    0,    0,    0,    0,  167,  168,  162,  163,    0,    0,
    0,    0,    0,    0,  164,    0,  171,    0,    0,    0,
  170,
};
final static short yydgoto[] = {                          1,
    2,    3,   44,    5,    6,   45,   46,   47,   48,  125,
   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   99,   65,   66,   83,
  297,  345,
};
final static short yysindex[] = {                         0,
    0, -269,  323, -239,    0,  -94,  -14,    0,    0,  -30,
    0,    0,    0,    0,    0,    4,   10, -207,    0,    0,
    0,    0,    0,    0,    8,   11,  607,  961, -191,  961,
  961,  643,  961,  961,  961,  961,  684,  706,  285,    0,
  593,  802,  961,    0,  323,    0,    0, -214,    0,    0,
 -189, 2280,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  323,    0,  924,
    0, 4110, -188,  961, -186, -179, -178,  961, -177, -176,
  -58, -174,   38,  -29,    2,   55,   57,   58,    0,    0,
    0, 2448, 4110,    0,  -63,  -63, -243,  -63, -167,  -63,
  -63,  -87,  -87,    0,   60,    0,   12,    0,  -22,  -95,
 -243, -165,  -63, -163, -243,  -63, -161,  -63,    0,  961,
  961,  961,  961,  961,   48,  210,  961,  961,  961,  961,
  961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
  961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
  961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
  961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
  961,  961,  961,  961,  961,  961,  961,  961,  961, -217,
 -164,  961,    0,    0,  -86,    0,   -5,   50,    0,   67,
    0,    0,    0,   74,    0,    0,    0,  -57,  961,  323,
   16,   18,  -90,  684,  -23,  -89,  133,   61,  961,  961,
  961,    0,    0, -162,    0,    0,    0,    0, -243,  -82,
 -162, -162, 3805, 3805, 3805, 3805, 3805,    0,    0, 4110,
 3973, 3973, 4110,    0, 4110, 4110, 4110, 4110, 4110, 4110,
 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110,
 4110, 2585, 4278, 4442, 4442, 4468, 4583, 4583, 1113, 4492,
 4492, 4492, 4492, 4492, 4492, 4492,  180,  180,  180,  180,
  180,  180,  180,  180,  451,  451,  703,  703,  703,  165,
  165,  165,  165,    0,    0,    0,    0,  -63,    0,    0,
    0,    0,    0, 2753,   62,   60,  127,   73,  323, 2890,
 3058, 3195,    0, -162,  961,   75, -267,  961,  323,   72,
   79,   80,   82, 4137,  323,  166,  170,    0,  153,   88,
    0,  323,  323,  323,   90,  961,  961,  961,    0,   93,
   94,   95,    0, 3363, 3500,  183,    0, -224, -224,  162,
  175,  106,  197,  122,    0,    0,    0,    0,  323,  961,
  323,  132, 3668,  134,    0,  138,    0,  323,  141, -224,
    0,
};
final static short yyrindex[] = {                         0,
    0,  258,    9,    0,    0,    0,    0,    0,    0, 5136,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   49,    0,    0,  206,    0,    0,
    0,  245,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,  135,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  724,    0, 5497, 5551, 1060, 5605,    0, 5664,
 5964, 5028, 5082,    0,    0,    0,    0,    0,    0,  206,
 1228,    0, 6018,    0, 1365, 6072,    0, 6131,    0,    0,
    0,    0,    0,    0,    0, 5195,    0,    0,    0,  313,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,    0,  211,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1533,    0,    0,    0,    0, 1670,    0,
 1838, 1975,  214,  220,  221,  228,  231,    0,    0,  841,
 9769, 9926, 1019,    0, 4286, 4449, 4596, 8852, 9315, 9511,
 9555, 9571, 9591, 9610, 9629, 9648, 9667, 9686, 9706, 9722,
 9744,    0, 9228, 9156, 9192, 4654, 9082, 9119, 8299, 8336,
 8375, 8656, 8693, 8730, 8767, 8804, 7461, 7504, 7792, 7835,
 7880, 7923, 8211, 8254, 7359, 7410, 6950, 7004, 7063, 6485,
 6539, 6598, 6896,    0,    0,    0,    0, 6431,    0,    0,
    0,    0,    0,    0,    0,  232,    0,    0,  144,    0,
    0,    0,    0, 2143,    0,    0,    0,  211,  144,    0,
    0,    0,    0, 9278,  144,    0,    0,    0,    0,    0,
    0,  144,  144,  144,    0,    0,    0,  252,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  171,  171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  144,    0,
  144,    0,    0,    0,    0,    0,    0,  144,    0,  171,
    0,
};
final static short yygindex[] = {                         0,
    0,    0,  -17,    0,    0,    0,  254,  261,  194,    0,
    0,    0,  290,  -10,    0,  226,    0,    0,    0,    0,
    0,    0,    0,    0,  284,    0,  140,  -37, 4762,   63,
 -265, -325,
};
final static int YYTABLESIZE=10221;
static short yytable[][] = new short[2][];
static { yytable0(); yytable1();}
static void yytable0(){
yytable[0] = new short[] {
    72,   197,   293,    33,    38,    38,    41,    32,    29,
    10,    37,     4,   112,    30,   346,    31,   316,    92,
    93,   317,    95,    96,    98,   100,   101,   102,   103,
    67,    38,    68,   218,   113,   116,   118,    42,   361,
    70,    70,   205,   203,    75,    73,   204,   319,    74,
    69,    79,    77,   208,     9,    78,   187,    75,    73,
    79,    77,   284,   285,   286,    81,    70,    38,    43,
   336,   343,   344,   206,    89,    76,   120,    90,   121,
   122,   123,    80,    10,   124,   126,   199,   189,    76,
   191,    80,    84,    85,    86,    87,    88,   192,   193,
   195,   196,   198,    70,   200,   209,    34,   210,   211,
   213,   214,   215,   219,   217,   221,   216,   222,   228,
   291,   287,   223,   224,   225,   226,   227,   292,   230,
   231,   232,   233,   290,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   298,
   169,   288,    37,     9,   218,   106,    97,   115,   106,
   303,   114,   117,   295,   299,   304,   308,   307,   120,
   294,   121,   122,   123,   106,   106,   124,   309,   321,
   315,   300,   301,   302,   322,   323,   169,   324,   326,
   169,   169,   169,   327,   169,   328,   329,   169,   333,
   169,   178,   337,   338,   339,   347,   176,   173,   342,
   174,   175,   177,   106,   349,   169,   105,   107,   110,
   348,   169,    10,   350,    11,    12,    13,    14,    15,
    33,   111,   351,    41,    32,    29,    16,    37,    17,
   220,    30,   185,    31,    38,   355,     1,   357,   106,
   358,   169,   169,   188,    38,   360,    28,   190,    10,
   157,    38,   194,    41,    42,   182,   183,   184,   185,
    43,    42,   201,   310,   202,    71,   229,    37,    39,
    70,    10,    40,   158,   320,   157,   169,   314,   169,
   169,   325,   119,   109,    38,    43,    70,    37,   330,
   331,   332,    82,    35,    36,   207,    71,    94,     0,
     0,   334,   335,    33,     0,     0,    41,    32,    29,
   234,    37,     0,     0,    30,     9,    31,     0,   352,
    70,   354,     0,    34,     0,    37,     0,   353,   359,
     0,     0,    40,   114,   117,     0,     0,    42,     0,
     0,     0,     0,    36,     0,    33,     0,     0,    41,
    32,    29,     0,    37,     0,     0,    30,     0,    31,
     0,    37,     0,    36,     0,     0,     0,    38,    43,
     0,     0,     0,     0,    40,     0,     0,     0,     0,
    42,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   296,     0,     0,     0,     0,     0,     0,
     0,    36,     0,    39,     0,   108,    34,     0,     0,
    38,    43,     0,     0,   106,     0,   106,   106,   106,
     0,     0,   106,     0,   169,     0,   106,   106,   106,
     0,   169,   169,     0,     0,   169,    36,   169,   169,
   169,   169,   169,     0,     0,    39,     0,     0,    34,
   169,   169,   169,   169,   169,   169,   169,   169,   169,
     0,     0,   169,   169,   169,   169,     0,     0,     0,
   169,     0,     0,     0,     0,     0,     0,     0,    10,
     0,    11,    12,    13,    14,    15,     0,     0,     0,
     0,     0,   178,    16,     0,    17,     0,   176,   173,
     0,   174,   175,   177,     0,   180,   181,   318,   182,
   183,   184,   185,    28,     0,     0,   169,   169,   171,
   172,   179,   180,   181,     0,   182,   183,   184,   185,
   318,     0,     0,     0,     0,     0,    37,     0,    37,
    37,    37,     0,     0,    37,     0,     0,     0,     0,
     0,     7,    38,     0,     0,     0,     0,     8,     9,
    35,    36,    10,   229,    11,    12,    13,    14,    15,
     0,     0,     0,     0,     0,     0,    16,     0,    17,
    18,    19,    20,    21,    22,    23,     0,    70,    24,
    25,    26,    27,     7,     0,     0,    28,     0,     0,
     8,     9,     0,     0,    10,     0,    11,    12,    13,
    14,    15,    36,     0,    36,    36,    36,     0,    16,
    36,    17,    18,    19,    20,    21,    22,    23,     0,
     0,    24,    25,    26,    27,     0,     0,     0,    28,
     0,     0,     0,    35,    36,    33,     0,   112,    41,
    32,    29,     0,    37,     0,     0,    30,     0,    31,
     0,    33,     0,     0,    41,    32,    29,     0,    37,
     0,     0,    30,     0,    31,     0,     0,     0,     0,
    42,     0,     0,     0,     0,    35,    36,     0,     0,
    91,     0,     0,     0,     0,    42,     0,     0,     0,
     0,    33,     0,     0,    41,    32,    29,     0,    37,
    38,    43,    30,     0,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    38,    43,     0,     0,
     0,     0,     0,     0,     0,    42,     0,     0,     0,
     0,     0,     0,     0,     0,    70,    33,     0,    34,
    41,    32,    29,     0,    37,   104,     0,    30,     0,
    31,    70,     0,     0,    34,    38,    43,     0,     0,
     0,    33,   178,     0,    41,    32,    29,   176,    37,
     0,    42,    30,   177,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   124,    70,     0,   124,    34,    42,     0,     0,     0,
     0,    38,    43,     0,     0,     0,     0,     0,   124,
   124,     0,   179,   180,   181,     0,   182,   183,   184,
   185,     0,    38,     0,     0,    38,    43,   106,     0,
     0,     0,     0,     0,     0,     0,    70,     0,     0,
    34,     0,     0,     0,     0,     0,     0,   124,     0,
     0,     0,     0,     0,     0,     0,     0,    70,     0,
     0,    70,     0,     0,    34,     0,     0,    33,     0,
     0,    41,    32,    29,     0,    37,     0,     0,    30,
     0,    31,     0,   124,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    10,   111,    11,    12,    13,
    14,    15,    42,     0,     0,     0,     0,     0,    16,
    10,    17,    11,    12,    13,    14,    15,     0,     0,
   104,     0,     0,   104,    16,     0,    17,     0,    28,
     0,     0,    38,    43,     0,     0,     0,     0,   104,
   104,     0,     0,     0,    28,     0,     0,     0,     0,
    10,    97,    11,    12,    13,    14,    15,     0,     0,
     0,     0,     0,     0,    16,     0,    17,    70,     0,
     0,    34,     0,     0,     0,    35,    36,   104,     0,
     0,     0,     0,     0,    28,     0,     0,     0,     0,
     0,    35,    36,     0,     0,    10,     0,    11,    12,
    13,    14,    15,    33,     0,     0,    41,    32,    29,
    16,    37,    17,   104,    30,     0,    31,     0,     0,
    10,     0,    11,    12,    13,    14,    15,     0,     0,
    28,    35,    36,     0,    16,     0,    17,    42,     0,
     0,     0,     0,     0,    33,     0,     0,    41,    32,
    29,     0,    37,     0,    28,    30,     0,    31,   124,
     0,   124,   124,   124,     0,     0,   124,    38,    43,
     0,   124,   124,   124,     0,     0,    35,    36,    42,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   179,   180,   181,     0,   182,   183,   184,
   185,    35,    36,    70,     0,   108,    34,     0,    38,
    43,     0,     0,     0,     0,     0,     0,   123,     0,
     0,   123,     0,     0,     0,     0,    10,   115,    11,
    12,    13,    14,    15,     0,     0,   123,   123,     0,
     0,    16,     0,    17,    70,     0,     0,    34,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    72,
    72,    28,    72,    72,    72,    72,    72,    72,    72,
    72,     0,     0,     0,     0,   123,     0,     0,     0,
     0,     0,    72,    72,    72,    72,    72,    72,   104,
     0,   104,   104,   104,     0,     0,   104,     0,     0,
     0,   104,   104,   104,     0,     0,     0,    35,    36,
     0,   123,     0,     0,     0,     0,     0,   178,    72,
     0,    72,    72,   176,   173,     0,   174,   175,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   163,     0,   165,     0,     0,     0,
     0,     0,     0,     0,    72,    72,    72,     0,     0,
     0,     0,    10,     0,    11,    12,    13,    14,    15,
     0,     0,     0,     0,     0,     0,    16,    38,    17,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    28,     0,     0,
     0,     0,     0,    10,     0,    11,    12,    13,    14,
    15,     0,     0,    70,     0,     0,     0,    16,     0,
    17,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    28,     0,
     0,     0,     0,    35,    36,    70,    70,     0,    70,
    70,    70,    70,    70,    70,    70,    70,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    70,
    70,    70,    70,    70,    70,     0,     0,     0,     0,
     0,     0,     0,     0,    35,    36,   123,     0,   123,
   123,   123,     0,     0,   123,     0,     0,     0,   123,
   123,   123,     0,     0,     0,    70,     0,    70,    70,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    72,     0,    72,    72,    72,     0,     0,
    72,    70,    70,    70,    72,    72,    72,     0,    72,
    72,    72,     0,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,     0,    72,    72,    72,    72,    71,    71,
     0,    71,    71,    71,    71,    71,    71,    71,    71,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    71,    71,    71,    71,    71,    71,     0,     0,
     0,   156,   157,   158,   159,   160,   161,   162,   164,
   166,   167,   168,   169,   170,   171,   172,   179,   180,
   181,     0,   182,   183,   184,   185,     0,    71,     0,
    71,    71,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    71,    71,    71,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    70,
     0,    70,    70,    70,     0,     0,    70,     0,     0,
     0,    70,    70,    70,     0,    70,    70,    70,     0,
    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,     0,
    70,    70,    70,    70,    75,    75,     0,    75,    75,
    75,    75,    75,    75,    75,    75,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    75,    75,
    75,    75,    75,    75,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    75,     0,    75,    75,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    71,     0,    71,    71,    71,     0,     0,    71,
    75,    75,    75,    71,    71,    71,     0,    71,    71,
    71,     0,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,     0,    71,    71,    71,    71,    76,    76,     0,
    76,    76,    76,    76,    76,    76,    76,    76,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    76,    76,    76,    76,    76,    76,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    76,     0,    76,
    76,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    76,    76,    76,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    75,     0,
    75,    75,    75,     0,     0,    75,     0,     0,     0,
    75,    75,    75,     0,    75,    75,    75,     0,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,     0,    75,
    75,    75,    75,    73,    73,     0,    73,    73,    73,
    73,    73,    73,    73,    73,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,    73,    73,
    73,    73,    73,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,     0,    73,    73,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    76,     0,    76,    76,    76,     0,     0,    76,    73,
    73,    73,    76,    76,    76,     0,    76,    76,    76,
     0,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,
     0,    76,    76,    76,    76,    74,    74,     0,    74,
    74,    74,    74,    74,    74,    74,    74,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    74,
    74,    74,    74,    74,    74,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    74,     0,    74,    74,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    74,    74,    74,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,     0,    73,
    73,    73,     0,     0,    73,     0,     0,     0,    73,
    73,    73,     0,    73,    73,    73,     0,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,     0,    73,    73,
    73,    73,    77,    77,     0,    77,    77,    77,    77,
    77,    77,    77,    77,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,    77,    77,    77,
    77,    77,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    77,     0,    77,    77,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    74,
     0,    74,    74,    74,     0,     0,    74,    77,    77,
    77,    74,    74,    74,     0,    74,    74,    74,     0,
    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    74,     0,
    74,    74,    74,    74,   178,   155,     0,     0,     0,
   176,   173,   130,   174,   175,   177,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   163,   131,   165,   148,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    38,     0,     0,   154,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    70,   153,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,     0,    77,    77,
    77,     0,     0,    77,     0,     0,     0,    77,    77,
    77,     0,    77,    77,    77,     0,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,     0,    77,    77,    77,
    77,   178,   155,     0,     0,     0,   176,   173,     0,
   174,   175,   177,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   212,   163,   131,   165,
   148,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,     0,     0,   154,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,   153,     0,
   127,   128,   129,     0,   132,   133,   134,     0,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   149,   150,   151,   152,   156,   157,
   158,   159,   160,   161,   162,   164,   166,   167,   168,
   169,   170,   171,   172,   179,   180,   181,     0,   182,
   183,   184,   185,   178,   155,     0,     0,     0,   176,
   173,     0,   174,   175,   177,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   305,     0,   163,
   131,   165,   148,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    38,     0,     0,   154,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    70,
   153,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   127,   128,   129,
     0,   132,   133,   134,     0,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,
   149,   150,   151,   152,   156,   157,   158,   159,   160,
   161,   162,   164,   166,   167,   168,   169,   170,   171,
   172,   179,   180,   181,     0,   182,   183,   184,   185,
   178,   155,     0,     0,   306,   176,   173,     0,   174,
   175,   177,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   163,   131,   165,   148,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,   154,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    70,   153,     0,   127,
   128,   129,     0,   132,   133,   134,     0,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   149,   150,   151,   152,   156,   157,   158,
   159,   160,   161,   162,   164,   166,   167,   168,   169,
   170,   171,   172,   179,   180,   181,     0,   182,   183,
   184,   185,   178,   155,     0,     0,   311,   176,   173,
     0,   174,   175,   177,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   163,   131,
   165,   148,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    38,     0,     0,   154,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    70,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   127,   128,   129,     0,
   132,   133,   134,     0,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   149,
   150,   151,   152,   156,   157,   158,   159,   160,   161,
   162,   164,   166,   167,   168,   169,   170,   171,   172,
   179,   180,   181,     0,   182,   183,   184,   185,   178,
   155,     0,     0,   312,   176,   173,     0,   174,   175,
   177,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   163,   131,   165,   148,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    38,
     0,     0,   154,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,   153,     0,   127,   128,
   129,     0,   132,   133,   134,     0,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   149,   150,   151,   152,   156,   157,   158,   159,
   160,   161,   162,   164,   166,   167,   168,   169,   170,
   171,   172,   179,   180,   181,     0,   182,   183,   184,
   185,   178,   155,     0,     0,   313,   176,   173,     0,
   174,   175,   177,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   163,   131,   165,
   148,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,     0,     0,   154,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    70,   153,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   127,   128,   129,     0,   132,
   133,   134,     0,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   149,   150,
   151,   152,   156,   157,   158,   159,   160,   161,   162,
   164,   166,   167,   168,   169,   170,   171,   172,   179,
   180,   181,     0,   182,   183,   184,   185,   178,   155,
     0,     0,   340,   176,   173,     0,   174,   175,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   163,   131,   165,   148,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    38,     0,
     0,   154,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,   153,     0,   127,   128,   129,
     0,   132,   133,   134,     0,   135,   136,   137,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,
   149,   150,   151,   152,   156,   157,   158,   159,   160,
   161,   162,   164,   166,   167,   168,   169,   170,   171,
   172,   179,   180,   181,     0,   182,   183,   184,   185,
   178,   155,     0,     0,   341,   176,   173,     0,   174,
   175,   177,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   163,   131,   165,   148,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,   154,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    70,   153,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   127,   128,   129,     0,   132,   133,
   134,     0,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   149,   150,   151,
   152,   156,   157,   158,   159,   160,   161,   162,   164,
   166,   167,   168,   169,   170,   171,   172,   179,   180,
   181,     0,   182,   183,   184,   185,   178,   155,     0,
     0,   356,   176,   173,     0,   174,   175,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   163,   131,   165,   148,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    38,     0,     0,
   154,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    70,   153,     0,   127,   128,   129,     0,
   132,   133,   134,     0,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   149,
   150,   151,   152,   156,   157,   158,   159,   160,   161,
   162,   164,   166,   167,   168,   169,   170,   171,   172,
   179,   180,   181,     0,   182,   183,   184,   185,   178,
   155,     0,     0,     0,   176,   173,     0,   174,   175,
   177,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   163,   131,   165,   148,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    38,
     0,     0,   154,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,   153,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   127,   128,   129,     0,   132,   133,   134,
     0,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   149,   150,   151,   152,
   156,   157,   158,   159,   160,   161,   162,   164,   166,
   167,   168,   169,   170,   171,   172,   179,   180,   181,
     0,   182,   183,   184,   185,   178,   155,     0,     0,
     0,   176,   173,     0,   174,   175,   177,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   163,   131,   165,   148,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    38,     0,     0,   154,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    70,   153,     0,   127,   128,   129,     0,   132,
   133,   134,     0,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   149,   150,
   151,   152,   156,   157,   158,   159,   160,   161,   162,
   164,   166,   167,   168,   169,   170,   171,   172,   179,
   180,   181,     0,   182,   183,   184,   185,   178,   155,
     0,     0,     0,   176,   173,     0,   174,   175,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   163,   131,   165,   148,   178,   155,
     0,     0,     0,   176,   173,     0,   174,   175,   177,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   163,     0,   165,   148,    38,     0,
     0,   154,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    38,     0,
     0,   154,     0,    70,   153,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    70,   153,     0,     0,     0,     0,
     0,     0,     0,   129,     0,   132,   133,   134,     0,
   135,   136,   137,   138,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   149,   150,   151,   152,   156,
   157,   158,   159,   160,   161,   162,   164,   166,   167,
   168,   169,   170,   171,   172,   179,   180,   181,     0,
   182,   183,   184,   185,   178,   155,     0,     0,     0,
   176,   173,     0,   174,   175,   177,     0,    48,     0,
     0,    48,     0,     0,     0,     0,     0,     0,     0,
   163,     0,   165,     0,     0,     0,    48,    48,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    38,     0,     0,   154,     0,
     0,     0,     0,     0,     0,    48,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    70,   153,     0,     0,     0,     0,     0,   132,   133,
   134,    48,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   149,   150,   151,
   152,   156,   157,   158,   159,   160,   161,   162,   164,
   166,   167,   168,   169,   170,   171,   172,   179,   180,
   181,     0,   182,   183,   184,   185,   149,   150,   151,
   152,   156,   157,   158,   159,   160,   161,   162,   164,
   166,   167,   168,   169,   170,   171,   172,   179,   180,
   181,     0,   182,   183,   184,   185,   178,   155,     0,
     0,     0,   176,   173,     0,   174,   175,   177,    51,
     0,     0,    51,     0,     0,     0,     0,     0,     0,
     0,     0,   163,     0,   165,   178,   155,    51,    51,
     0,   176,   173,     0,   174,   175,   177,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   163,   178,   165,     0,     0,    38,   176,   173,
   154,   174,   175,   177,     0,     0,    51,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   163,     0,
   165,     0,     0,     0,     0,    38,     0,     0,   154,
     0,     0,    70,   153,     0,     0,    48,     0,    48,
    48,    48,    51,     0,    48,     0,     0,     0,    48,
    48,    48,    38,     0,     0,     0,     0,     0,     0,
     0,    70,   153,     0,   150,   151,   152,   156,   157,
   158,   159,   160,   161,   162,   164,   166,   167,   168,
   169,   170,   171,   172,   179,   180,   181,    70,   182,
   183,   184,   185,   178,   155,     0,     0,     0,   176,
   173,     0,   174,   175,   177,     0,     0,     0,     0,
     0,     0,    52,     0,     0,    52,     0,     0,   163,
     0,   165,     0,     0,     0,     0,     0,     0,     0,
     0,    52,    52,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    38,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    52,     0,     0,     0,     0,     0,   120,     0,     0,
   120,     0,     0,     0,     0,     0,     0,     0,    70,
     0,     0,     0,     0,     0,   120,   120,     0,   120,
     0,   120,     0,     0,     0,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    51,     0,
    51,    51,    51,     0,     0,    51,     0,     0,     0,
    51,    51,    51,     0,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   152,
   156,   157,   158,   159,   160,   161,   162,   164,   166,
   167,   168,   169,   170,   171,   172,   179,   180,   181,
   120,   182,   183,   184,   185,     0,     0,     0,   156,
   157,   158,   159,   160,   161,   162,   164,   166,   167,
   168,   169,   170,   171,   172,   179,   180,   181,     0,
   182,   183,   184,   185,     0,     0,     0,     0,   186,
     0,     0,     0,   164,   166,   167,   168,   169,   170,
   171,   172,   179,   180,   181,     0,   182,   183,   184,
   185,   186,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   186,   186,     0,   186,   186,     0,
   186,     0,   186,   186,   186,   186,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   186,     0,     0,
   186,    52,   186,    52,    52,    52,     0,     0,    52,
     0,     0,     0,    52,    52,    52,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   156,   157,   158,
   159,   160,   161,   162,   164,   166,   167,   168,   169,
   170,   171,   172,   179,   180,   181,     0,   182,   183,
   184,   185,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   120,     0,   120,   120,
   120,     0,     0,   120,     0,     0,   289,   120,   120,
   120,     0,   120,   120,   120,     0,   120,   120,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   120,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   186,
   186,   186,   186,   186,     0,     0,   186,   186,   186,
   186,     0,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,   186,   186,   186,
   186,   186,   186,   186,   186,   186,     0,     0,     0,
     0,   186,     0,     0,     0,     0,     0,   186,     0,
     0,     0,     0,     0,   186,   186,   186,   152,   152,
     0,     0,   152,   152,   152,   152,   152,   152,   152,
   186,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   152,   152,   152,   152,   152,   152,     0,     0,
     0,     0,   186,   186,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   186,     0,     0,     0,   153,   153,
   152,   152,   153,   153,   153,   153,   153,   153,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   153,   153,   153,   153,   153,   153,     0,     0,
     0,     0,     0,     0,   152,   152,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   153,   153,   107,   107,     0,   107,     0,   107,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   107,   107,   107,   107,   107,   107,     0,     0,
     0,     0,     0,     0,   153,   153,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   107,   107,     0,     0,     0,     0,     0,   105,   105,
     0,   105,     0,   105,   105,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   105,   105,   105,
   105,   105,   105,     0,   107,   107,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   105,   105,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   152,     0,   152,   152,   152,     0,     0,   152,
   105,   105,     0,   152,   152,   152,     0,   152,   152,
   152,     0,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   152,   152,   152,   152,   152,   152,   152,   152,
   152,   153,   152,   153,   153,   153,     0,     0,   153,
     0,     0,     0,   153,   153,   153,     0,   153,   153,
   153,     0,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   107,   153,   107,   107,   107,     0,     0,   107,
     0,     0,     0,   107,   107,   107,     0,   107,   107,
   107,     0,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,   107,   107,   107,   107,   107,   107,   107,   107,
   107,     0,   107,     0,     0,   107,   105,     0,   105,
   105,   105,     0,     0,   105,     0,     0,     0,   105,
   105,   105,     0,   105,   105,   105,     0,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,     0,   105,   150,
   150,   105,     0,   150,   150,   150,   150,   150,   150,
   150,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   150,   150,   150,   150,   150,   150,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   151,
   151,   150,   150,   151,   151,   151,   151,   151,   151,
   151,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   151,   151,   151,   151,   151,   151,     0,
     0,     0,     0,     0,     0,   150,   150,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   102,
   102,   151,   151,   102,   102,   102,   102,   102,   102,
   102,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   102,   102,   102,   102,   102,     0,
     0,     0,     0,     0,     0,   151,   151,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   102,   102,     0,   121,   121,     0,     0,   121,
   121,   121,   121,   121,   121,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   121,
   121,   121,   121,   121,     0,   102,   102,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   121,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   150,     0,   150,   150,   150,     0,     0,
   150,   121,   121,     0,   150,   150,   150,     0,   150,
   150,   150,     0,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   151,     0,   151,   151,   151,     0,     0,
   151,     0,     0,     0,   151,   151,   151,     0,   151,
   151,   151,     0,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   151,
   151,   151,   102,     0,   102,   102,   102,     0,     0,
   102,     0,     0,     0,   102,   102,   102,     0,   102,
   102,   102,     0,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   102,     0,     0,     0,     0,     0,   121,     0,
   121,   121,   121,     0,     0,   121,     0,     0,     0,
   121,   121,   121,     0,   121,   121,   121,     0,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   114,   114,
     0,     0,   114,   114,   114,   114,   114,   114,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,   114,   114,   114,   114,   114,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   100,   100,
   114,   114,   100,   100,   100,   100,   100,   100,   100,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   100,   100,   100,   100,   100,   100,     0,     0,
     0,     0,     0,     0,   114,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   101,   101,
   100,   100,   101,   101,   101,   101,   101,   101,   101,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   101,   101,   101,   101,   101,   101,     0,     0,
     0,     0,     0,     0,   100,   100,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   101,   101,     0,   103,   103,     0,     0,   103,   103,
   103,   103,   103,   103,   103,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   103,   103,   103,
   103,   103,   103,     0,   101,   101,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   103,   103,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,     0,   114,   114,   114,     0,     0,   114,
   103,   103,     0,   114,   114,   114,     0,   114,   114,
   114,     0,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   100,     0,   100,   100,   100,     0,     0,   100,
     0,     0,     0,   100,   100,   100,     0,   100,   100,
   100,     0,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   101,     0,   101,   101,   101,     0,     0,   101,
     0,     0,     0,   101,   101,   101,     0,   101,   101,
   101,     0,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,     0,     0,     0,     0,     0,   103,     0,   103,
   103,   103,     0,     0,   103,     0,     0,     0,   103,
   103,   103,     0,   103,   103,   103,     0,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   103,   103,   103,   103,   103,   146,   146,     0,
     0,   146,   146,   146,   146,   146,   146,   146,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   146,   146,   146,   146,   146,   146,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   144,   144,   146,
   146,   144,   144,   144,   144,   144,   144,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   144,   144,   144,   144,   144,   144,     0,     0,     0,
     0,     0,     0,   146,   146,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   145,   145,   144,
   144,   145,   145,   145,   145,   145,   145,   145,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   145,   145,   145,   145,   145,   145,     0,     0,     0,
     0,     0,     0,   144,   144,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   145,
   145,     0,   149,   149,     0,     0,   149,   149,   149,
   149,   149,   149,   149,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   149,   149,   149,   149,
   149,   149,     0,   145,   145,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   149,   149,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   146,     0,   146,   146,   146,     0,     0,   146,   149,
   149,     0,   146,   146,   146,     0,   146,   146,   146,
     0,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,
   146,   146,   146,   146,   146,   146,   146,   146,   146,
   144,     0,   144,   144,   144,     0,     0,   144,     0,
     0,     0,   144,   144,   144,     0,   144,   144,   144,
     0,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,     0,     0,
   145,     0,   145,   145,   145,     0,     0,   145,     0,
     0,     0,   145,   145,   145,     0,   145,   145,   145,
     0,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,     0,     0,
     0,     0,     0,     0,     0,   149,     0,   149,   149,
   149,     0,     0,   149,     0,     0,     0,   149,   149,
   149,     0,   149,   149,   149,     0,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   147,   147,     0,     0,   147,   147,
   147,   147,   147,   147,   147,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   147,   147,   147,
   147,   147,   147,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   142,   147,   147,   142,     0,
   142,   142,   142,   142,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   142,   142,   142,
   142,   142,   142,     0,     0,     0,     0,     0,     0,
   147,   147,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   143,   142,   142,   143,     0,
   143,   143,   143,   143,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   143,   143,   143,
   143,   143,   143,     0,     0,     0,     0,     0,     0,
   142,   142,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   143,   143,     0,     0,
   148,     0,     0,   148,     0,   148,   148,   148,   148,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   148,   148,   148,   148,   148,   148,     0,
   143,   143,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   148,   148,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   147,     0,   147,
   147,   147,     0,     0,   147,   148,   148,     0,   147,
   147,   147,     0,   147,   147,   147,     0,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,     0,     0,   142,     0,   142,
   142,   142,     0,     0,   142,     0,     0,     0,   142,
   142,   142,     0,   142,   142,   142,     0,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,     0,     0,     0,   143,     0,   143,
   143,   143,     0,     0,   143,     0,     0,     0,   143,
   143,   143,     0,   143,   143,   143,     0,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,     0,     0,     0,     0,     0,     0,
     0,     0,   148,     0,   148,   148,   148,     0,     0,
   148,     0,     0,     0,   148,   148,   148,     0,   148,
   148,   148,     0,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   116,
     0,     0,   116,     0,     0,   116,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   116,   116,   116,   116,   116,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,     0,     0,   117,
   116,   116,   117,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   117,   117,
   117,   117,   117,   117,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   116,   116,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   129,     0,     0,   129,   117,   117,   129,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   129,   129,     0,   129,     0,
   129,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,   117,     0,     0,     0,     0,     0,     0,
   130,     0,     0,   130,     0,     0,   130,     0,     0,
     0,     0,     0,   129,   129,     0,     0,     0,     0,
     0,     0,   130,   130,     0,   130,     0,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   129,   129,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   130,   130,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   130,   130,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   116,     0,   116,   116,   116,     0,     0,   116,
     0,     0,     0,   116,   116,   116,     0,   116,   116,
   116,     0,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   116,   116,   117,     0,
   117,   117,   117,     0,     0,   117,     0,     0,     0,
   117,   117,   117,     0,   117,   117,   117,     0,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   117,   129,     0,   129,   129,   129,
     0,     0,   129,     0,     0,     0,   129,   129,   129,
     0,   129,   129,   129,     0,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,
   129,   129,   130,     0,   130,   130,   130,     0,     0,
   130,     0,     0,     0,   130,   130,   130,     0,   130,
   130,   130,     0,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,
   131,     0,     0,   131,     0,     0,   131,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   131,   131,     0,   131,     0,   131,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   132,     0,
     0,   132,     0,     0,   132,     0,     0,     0,     0,
     0,   131,   131,     0,     0,     0,     0,     0,     0,
   132,   132,     0,   132,     0,   132,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   131,   131,   136,     0,
     0,   136,     0,     0,   136,     0,     0,     0,   132,
   132,     0,     0,     0,     0,     0,     0,     0,     0,
   136,   136,     0,   136,     0,   136,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,   132,   137,     0,     0,   137,
     0,     0,   137,     0,     0,     0,     0,     0,   136,
   136,     0,     0,     0,     0,     0,     0,   137,   137,
     0,   137,     0,   137,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   136,   136,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   137,   137,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,   137,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   131,     0,   131,   131,   131,     0,     0,
   131,     0,     0,     0,   131,   131,   131,     0,   131,
   131,   131,     0,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,
   132,     0,   132,   132,   132,     0,     0,   132,     0,
     0,     0,   132,   132,   132,     0,   132,   132,   132,
     0,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,     0,     0,
   136,     0,   136,   136,   136,     0,     0,   136,     0,
     0,     0,   136,   136,   136,     0,   136,   136,   136,
     0,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   137,     0,
   137,   137,   137,     0,     0,   137,     0,     0,     0,
   137,   137,   137,     0,   137,   137,   137,     0,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,
   137,   137,   137,   137,   137,   138,     0,     0,   138,
     0,     0,   138,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,   138,
     0,   138,     0,   138,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   139,     0,     0,   139,     0,     0,
   139,     0,     0,     0,     0,     0,   138,   138,     0,
     0,     0,     0,     0,     0,   139,   139,     0,   139,
     0,   139,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,   138,   113,     0,     0,   113,     0,     0,
   113,     0,     0,     0,   139,   139,     0,     0,     0,
     0,     0,     0,     0,     0,   113,   113,     0,   113,
     0,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   127,     0,     0,   127,   139,
   139,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   113,   113,   127,   127,     0,
   127,     0,   127,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   128,     0,
     0,   128,     0,     0,   128,     0,     0,     0,   113,
   113,     0,     0,     0,     0,   127,   127,     0,     0,
   128,   128,     0,   128,     0,   128,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   127,   127,     0,     0,     0,     0,     0,     0,   128,
   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,     0,
   138,   138,   138,   128,   128,   138,     0,     0,     0,
   138,   138,   138,     0,   138,   138,   138,     0,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   139,     0,   139,   139,
   139,     0,     0,   139,     0,     0,     0,   139,   139,
   139,     0,   139,   139,   139,     0,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,     0,     0,   113,     0,   113,   113,
   113,     0,     0,   113,     0,     0,     0,   113,   113,
   113,     0,   113,   113,   113,     0,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,     0,   127,     0,   127,
   127,   127,     0,     0,   127,     0,     0,     0,   127,
   127,   127,     0,   127,   127,   127,     0,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,     0,     0,     0,
   128,     0,   128,   128,   128,     0,     0,   128,     0,
     0,     0,   128,   128,   128,     0,   128,   128,   128,
     0,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,
   134,     0,     0,   134,     0,     0,   134,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,   134,     0,   134,     0,   134,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   135,     0,     0,   135,     0,     0,   135,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   134,   134,   135,   135,     0,   135,     0,   135,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   140,     0,     0,   140,     0,     0,   140,
     0,     0,     0,     0,     0,   134,   134,     0,     0,
     0,     0,   135,   135,   140,   140,     0,   140,     0,
   140,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   133,     0,     0,   133,     0,     0,
   133,     0,     0,     0,     0,     0,   135,   135,     0,
     0,     0,     0,   140,   140,   133,   133,     0,   133,
     0,   133,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,     0,     0,   141,     0,
     0,   141,     0,     0,     0,     0,     0,   140,   140,
     0,     0,     0,     0,   133,   133,   141,   141,     0,
   141,     0,   141,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   133,
   133,    53,     0,     0,    53,   141,   141,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    53,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
   141,   141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   134,     0,   134,   134,   134,     0,    53,
   134,     0,     0,     0,   134,   134,   134,     0,   134,
   134,   134,     0,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,
   134,   134,     0,   135,    53,   135,   135,   135,     0,
     0,   135,     0,     0,     0,   135,   135,   135,     0,
   135,   135,   135,     0,   135,   135,   135,   135,   135,};
}
static void yytable1(){
yytable[1] = new short[] {
   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,     0,   140,     0,   140,   140,   140,
     0,     0,   140,     0,     0,     0,   140,   140,   140,
     0,   140,   140,   140,     0,   140,   140,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,     0,   133,     0,   133,   133,
   133,     0,     0,   133,     0,     0,     0,   133,   133,
   133,     0,   133,   133,   133,     0,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,     0,   141,     0,   141,
   141,   141,     0,     0,   141,     0,     0,     0,   141,
   141,   141,     0,   141,   141,   141,     0,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   112,     0,     0,
   112,     0,     0,     0,     0,     0,     0,     0,     0,
    53,     0,    53,    53,    53,   112,   112,    53,   112,
     0,   112,    53,    53,    53,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   115,     0,
     0,   115,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   112,   112,   115,   115,     0,
   115,     0,   115,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   118,
     0,     0,   118,     0,     0,     0,     0,     0,   112,
   112,     0,     0,     0,     0,   115,   115,   118,   118,
     0,   118,     0,   118,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   119,
     0,     0,   119,     0,     0,     0,     0,     0,     0,
   115,   115,     0,     0,     0,     0,   118,   119,   119,
     0,   119,     0,   119,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    34,
     0,     0,    34,     0,     0,     0,     0,     0,     0,
     0,     0,   118,     0,     0,     0,   119,    34,    34,
     0,    34,     0,    34,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,     0,   126,     0,    34,   126,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   126,   126,     0,   126,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    34,     0,     0,    49,     0,     0,    49,
     0,     0,     0,     0,     0,   112,     0,   112,   112,
   112,     0,   126,   112,    49,    49,     0,   112,   112,
   112,     0,   112,   112,   112,     0,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,     0,   115,   126,   115,
   115,   115,     0,    49,   115,     0,     0,     0,   115,
   115,   115,     0,   115,   115,   115,     0,   115,   115,
   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   115,   115,     0,   118,    49,
   118,   118,   118,     0,     0,   118,     0,     0,     0,
   118,   118,   118,     0,   118,   118,   118,     0,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,     0,   119,     0,
   119,   119,   119,     0,     0,   119,     0,     0,     0,
   119,   119,   119,     0,   119,   119,   119,     0,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,     0,    34,     0,
    34,    34,    34,     0,     0,    34,     0,     0,     0,
    34,    34,    34,     0,    34,    34,    34,     0,    34,
    34,    34,    34,    34,    34,    34,    34,    34,    34,
    34,    34,    34,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    50,     0,     0,    50,     0,     0,
     0,     0,     0,   126,     0,   126,   126,   126,     0,
     0,   126,    50,    50,     0,   126,   126,   126,     0,
   126,   126,   126,     0,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,     0,
     0,     0,    59,     0,    49,    59,    49,    49,    49,
     0,    50,    49,     0,     0,     0,    49,    49,    49,
    58,    59,    59,    58,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    58,
    58,     0,    55,     0,     0,    55,    50,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
    59,    55,    55,    56,     0,     0,    56,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    58,     0,
     0,     0,    56,    56,    57,     0,     0,    57,     0,
     0,     0,     0,     0,     0,    59,     0,     0,     0,
    55,     0,     0,    57,    57,    54,     0,     0,    54,
     0,     0,     0,    58,     0,     0,     0,     0,     0,
     0,    56,     0,     0,    54,    54,    60,     0,     0,
    60,     0,     0,     0,     0,    55,     0,     0,     0,
     0,     0,    57,     0,     0,    60,    60,    61,     0,
     0,    61,     0,     0,     0,     0,    56,     0,     0,
     0,     0,     0,    54,     0,     0,    61,    61,     0,
    62,     0,     0,    62,     0,     0,     0,    57,     0,
     0,     0,     0,     0,    60,     0,     0,    64,    62,
    62,    64,     0,     0,     0,     0,     0,     0,    54,
     0,     0,     0,     0,     0,    61,    64,    64,     0,
     0,     0,    63,     0,     0,    63,     0,     0,     0,
    60,     0,    50,     0,    50,    50,    50,    62,     0,
    50,    63,    63,     0,    50,    50,    50,     0,     0,
   122,    61,     0,   122,     0,    64,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,
   122,     0,     0,    62,     0,     0,     0,     0,     0,
    63,    59,     0,    59,    59,    59,     0,     0,    59,
     0,    64,     0,    59,    59,    59,     0,     0,    58,
     0,    58,    58,    58,     0,     0,    58,   122,     0,
     0,    58,    58,    58,     0,    63,     0,     0,     0,
     0,    55,     0,    55,    55,    55,     0,     0,    55,
     0,     0,     0,    55,    55,    55,     0,     0,     0,
     0,     0,    56,   122,    56,    56,    56,     0,     0,
    56,     0,     0,     0,    56,    56,    56,     0,     0,
     0,     0,     0,    57,     0,    57,    57,    57,     0,
     0,    57,     0,     0,     0,    57,    57,    57,     0,
     0,     0,     0,     0,    54,     0,    54,    54,    54,
     0,     0,    54,     0,     0,     0,    54,    54,    54,
     0,     0,     0,     0,     0,    60,     0,    60,    60,
    60,     0,     0,    60,     0,     0,     0,    60,    60,
    60,     0,     0,     0,   125,     0,    61,   125,    61,
    61,    61,     0,     0,    61,     0,     0,     0,    61,
    61,    61,     0,   125,   125,     0,     0,     0,    62,
     0,    62,    62,    62,     0,     0,    62,     0,     0,
     0,    62,    62,    62,     0,     0,    64,     0,    64,
    64,    64,     0,     0,    64,     0,     0,     0,    64,
    64,    64,   125,     0,     0,     0,     0,     0,     0,
     0,    63,     0,    63,    63,    63,     0,     0,    63,
     0,     0,     0,    63,    63,    63,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   125,   122,
     0,   122,   122,   122,     0,     0,   122,     0,     0,
     0,   122,   122,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   125,     0,   125,   125,   125,     0,
     0,   125,     0,     0,     0,   125,   125};
}

 
static short yycheck[][] = new short[2][];
static { yycheck0(); yycheck1();}
static void yycheck0(){
yycheck[0] = new short[] {
    10,    59,    59,    33,    91,    91,    36,    37,    38,
     0,    40,   280,    35,    43,   339,    45,   283,    27,
    28,   286,    30,    31,    32,    33,    34,    35,    36,
   266,    91,   123,   125,    41,    42,    43,    64,   360,
   123,   123,    36,    37,    36,    37,    40,   308,    40,
    59,    36,    37,    85,     0,    40,    68,    36,    37,
    36,    37,   273,   274,   275,   266,   123,    91,    92,
   328,   288,   289,    64,    59,    64,   283,    59,   285,
   286,   287,    64,   266,   290,   266,    40,   267,    64,
   267,    64,    20,    21,    22,    23,    24,   267,   267,
   267,   267,   266,   123,   123,    40,   126,    40,    40,
   342,   267,    41,   267,   125,   267,    93,   267,    59,
    41,   273,   120,   121,   122,   123,   124,    41,   126,
   127,   128,   129,   125,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,
   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   207,
     0,   182,    40,   125,   125,    41,   267,   267,    44,
   342,    41,    42,   200,   123,   267,    59,   125,   283,
   199,   285,   286,   287,    58,    59,   290,   123,   125,
   123,   209,   210,   211,   123,   123,    33,   123,    40,
    36,    37,    38,    40,    40,    59,   125,    43,   125,
    45,    37,   125,   125,   125,    59,    42,    43,    41,
    45,    46,    47,    93,   123,    59,    37,    38,    39,
    59,    64,   266,    40,   268,   269,   270,   271,   272,
    33,   267,   123,    36,    37,    38,   279,    40,   281,
   112,    43,   341,    45,    91,   125,     0,   125,   125,
   123,    91,    92,    70,    59,   125,   297,    74,   125,
    59,    91,    78,    59,    64,   338,   339,   340,   341,
    59,    59,   279,   299,   281,   342,   342,    41,    59,
   123,   280,    59,    59,   309,    41,   123,   305,   125,
   126,   315,    45,    39,    91,    92,   123,    59,   322,
   323,   324,    18,   339,   340,    85,   342,    29,    -1,
    -1,   326,   327,    33,    -1,    -1,    36,    37,    38,
   130,    40,    -1,    -1,    43,   280,    45,    -1,   349,
   123,   351,    -1,   126,    -1,    93,    -1,   350,   358,
    -1,    -1,    59,   205,   206,    -1,    -1,    64,    -1,
    -1,    -1,    -1,    41,    -1,    33,    -1,    -1,    36,
    37,    38,    -1,    40,    -1,    -1,    43,    -1,    45,
    -1,   125,    -1,    59,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    -1,   123,    -1,   125,   126,    -1,    -1,
    91,    92,    -1,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,   256,    -1,   294,   295,   296,
    -1,   262,   263,    -1,    -1,   266,   125,   268,   269,
   270,   271,   272,    -1,    -1,   123,    -1,    -1,   126,
   279,   280,   281,   282,   283,   284,   285,   286,   287,
    -1,    -1,   290,   291,   292,   293,    -1,    -1,    -1,
   297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
    -1,   268,   269,   270,   271,   272,    -1,    -1,    -1,
    -1,    -1,    37,   279,    -1,   281,    -1,    42,    43,
    -1,    45,    46,    47,    -1,   335,   336,   308,   338,
   339,   340,   341,   297,    -1,    -1,   339,   340,   332,
   333,   334,   335,   336,    -1,   338,   339,   340,   341,
   328,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
    -1,   256,    91,    -1,    -1,    -1,    -1,   262,   263,
   339,   340,   266,   342,   268,   269,   270,   271,   272,
    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,   281,
   282,   283,   284,   285,   286,   287,    -1,   123,   290,
   291,   292,   293,   256,    -1,    -1,   297,    -1,    -1,
   262,   263,    -1,    -1,   266,    -1,   268,   269,   270,
   271,   272,   283,    -1,   285,   286,   287,    -1,   279,
   290,   281,   282,   283,   284,   285,   286,   287,    -1,
    -1,   290,   291,   292,   293,    -1,    -1,    -1,   297,
    -1,    -1,    -1,   339,   340,    33,    -1,    35,    36,
    37,    38,    -1,    40,    -1,    -1,    43,    -1,    45,
    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    -1,    -1,   339,   340,    -1,    -1,
    59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    33,    -1,    -1,    36,    37,    38,    -1,    40,
    91,    92,    43,    -1,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    33,    -1,   126,
    36,    37,    38,    -1,    40,    41,    -1,    43,    -1,
    45,   123,    -1,    -1,   126,    91,    92,    -1,    -1,
    -1,    33,    37,    -1,    36,    37,    38,    42,    40,
    -1,    64,    43,    47,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    41,   123,    -1,    44,   126,    64,    -1,    -1,    -1,
    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    58,
    59,    -1,   334,   335,   336,    -1,   338,   339,   340,
   341,    -1,    91,    -1,    -1,    91,    92,    93,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
    -1,   123,    -1,    -1,   126,    -1,    -1,    33,    -1,
    -1,    36,    37,    38,    -1,    40,    -1,    -1,    43,
    -1,    45,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   266,   267,   268,   269,   270,
   271,   272,    64,    -1,    -1,    -1,    -1,    -1,   279,
   266,   281,   268,   269,   270,   271,   272,    -1,    -1,
    41,    -1,    -1,    44,   279,    -1,   281,    -1,   297,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    58,
    59,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,
   266,   267,   268,   269,   270,   271,   272,    -1,    -1,
    -1,    -1,    -1,    -1,   279,    -1,   281,   123,    -1,
    -1,   126,    -1,    -1,    -1,   339,   340,    93,    -1,
    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,
    -1,   339,   340,    -1,    -1,   266,    -1,   268,   269,
   270,   271,   272,    33,    -1,    -1,    36,    37,    38,
   279,    40,   281,   125,    43,    -1,    45,    -1,    -1,
   266,    -1,   268,   269,   270,   271,   272,    -1,    -1,
   297,   339,   340,    -1,   279,    -1,   281,    64,    -1,
    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,    37,
    38,    -1,    40,    -1,   297,    43,    -1,    45,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    91,    92,
    -1,   294,   295,   296,    -1,    -1,   339,   340,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   334,   335,   336,    -1,   338,   339,   340,
   341,   339,   340,   123,    -1,   125,   126,    -1,    91,
    92,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,   266,   267,   268,
   269,   270,   271,   272,    -1,    -1,    58,    59,    -1,
    -1,   279,    -1,   281,   123,    -1,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,   297,    40,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,   294,   295,   296,    -1,    -1,    -1,   339,   340,
    -1,   125,    -1,    -1,    -1,    -1,    -1,    37,    91,
    -1,    93,    94,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    -1,    62,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
    -1,    -1,   266,    -1,   268,   269,   270,   271,   272,
    -1,    -1,    -1,    -1,    -1,    -1,   279,    91,   281,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,
    -1,    -1,    -1,   266,    -1,   268,   269,   270,   271,
   272,    -1,    -1,   123,    -1,    -1,    -1,   279,    -1,
   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,
    -1,    -1,    -1,   339,   340,    37,    38,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   339,   340,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,    -1,    -1,    91,    -1,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,   123,   124,   125,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,    -1,   338,   339,   340,   341,    37,    38,
    -1,    40,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,   339,   340,   341,    -1,    91,    -1,
    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,   294,   295,   296,    -1,   298,   299,   300,    -1,
   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,    -1,
   338,   339,   340,   341,    37,    38,    -1,    40,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
   123,   124,   125,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,   339,   340,   341,    37,    38,    -1,
    40,    41,    42,    43,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,    -1,   338,
   339,   340,   341,    37,    38,    -1,    40,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,   123,
   124,   125,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
    -1,   338,   339,   340,   341,    37,    38,    -1,    40,
    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,   124,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,    -1,   338,   339,
   340,   341,    37,    38,    -1,    40,    41,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    93,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,   123,   124,
   125,   294,   295,   296,    -1,   298,   299,   300,    -1,
   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,    -1,
   338,   339,   340,   341,    37,    38,    -1,    -1,    -1,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,    -1,   338,   339,   340,
   341,    37,    38,    -1,    -1,    -1,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,    -1,   338,
   339,   340,   341,    37,    38,    -1,    -1,    -1,    42,
    43,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   294,   295,   296,
    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,    -1,   338,   339,   340,   341,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,
    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,    -1,   338,   339,
   340,   341,    37,    38,    -1,    -1,    41,    42,    43,
    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    -1,    -1,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   294,   295,   296,    -1,
   298,   299,   300,    -1,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,    -1,   338,   339,   340,   341,    37,
    38,    -1,    -1,    41,    42,    43,    -1,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,   124,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,    -1,   338,   339,   340,
   341,    37,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,    -1,   338,   339,   340,   341,    37,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,   124,    -1,   294,   295,   296,
    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,    -1,   338,   339,   340,   341,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,
    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,   339,   340,   341,    37,    38,    -1,
    -1,    41,    42,    43,    -1,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,   124,    -1,   294,   295,   296,    -1,
   298,   299,   300,    -1,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   329,   330,   331,   332,   333,
   334,   335,   336,    -1,   338,   339,   340,   341,    37,
    38,    -1,    -1,    -1,    42,    43,    -1,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
    -1,   338,   339,   340,   341,    37,    38,    -1,    -1,
    -1,    42,    43,    -1,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,   124,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,    -1,   338,   339,   340,   341,    37,    38,
    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    61,    62,    63,    37,    38,
    -1,    -1,    -1,    42,    43,    -1,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    60,    -1,    62,    63,    91,    -1,
    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
    -1,    94,    -1,   123,   124,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   296,    -1,   298,   299,   300,    -1,
   302,   303,   304,   305,   306,   307,   308,   309,   310,
   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,    -1,
   338,   339,   340,   341,    37,    38,    -1,    -1,    -1,
    42,    43,    -1,    45,    46,    47,    -1,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    60,    -1,    62,    -1,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   123,   124,    -1,    -1,    -1,    -1,    -1,   298,   299,
   300,   125,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,   339,   340,   341,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,   339,   340,   341,    37,    38,    -1,
    -1,    -1,    42,    43,    -1,    45,    46,    47,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    60,    -1,    62,    37,    38,    58,    59,
    -1,    42,    43,    -1,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    60,    37,    62,    -1,    -1,    91,    42,    43,
    94,    45,    46,    47,    -1,    -1,    93,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
    62,    -1,    -1,    -1,    -1,    91,    -1,    -1,    94,
    -1,    -1,   123,   124,    -1,    -1,   283,    -1,   285,
   286,   287,   125,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,   124,    -1,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   123,   338,
   339,   340,   341,    37,    38,    -1,    -1,    -1,    42,
    43,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    60,
    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,    93,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   125,   338,   339,   340,   341,    -1,    -1,    -1,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,
   329,   330,   331,   332,   333,   334,   335,   336,    -1,
   338,   339,   340,   341,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
   332,   333,   334,   335,   336,    -1,   338,   339,   340,
   341,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    93,    -1,    95,    96,    -1,
    98,    -1,   100,   101,   102,   103,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,
   116,   283,   118,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,    -1,   338,   339,
   340,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,   185,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,
   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
   233,    -1,   235,   236,   237,   238,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,   283,    -1,    -1,    -1,
    -1,   288,    -1,    -1,    -1,    -1,    -1,   294,    -1,
    -1,    -1,    -1,    -1,   300,   301,   302,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,   334,   335,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   353,    -1,    -1,    -1,    37,    38,
    93,    94,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    41,    42,    -1,    44,    -1,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    -1,    -1,    -1,    -1,    41,    42,
    -1,    44,    -1,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
   124,   125,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   283,   338,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   283,   338,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,   338,    -1,    -1,   341,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,    -1,   338,    37,
    38,   341,    -1,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    93,    94,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    93,    94,    41,    42,    43,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    37,    38,    -1,    -1,    41,
    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,   124,   125,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,   334,
   335,   336,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,    37,    38,
    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
    93,    94,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
    93,    94,    41,    42,    43,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    94,    -1,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
   124,   125,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   334,   335,
   336,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,   335,   336,    37,    38,    -1,
    -1,    41,    42,    43,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    93,
    94,    41,    42,    43,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    93,
    94,    41,    42,    43,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    -1,    37,    38,    -1,    -1,    41,    42,    43,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    62,    63,    -1,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,   124,
   125,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,   335,   336,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,    -1,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,
   328,   329,   330,   331,   332,   333,   334,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,
   332,   333,   334,    37,    38,    -1,    -1,    41,    42,
    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    93,    94,    41,    -1,
    43,    44,    45,    46,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    93,    94,    41,    -1,
    43,    44,    45,    46,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
    38,    -1,    -1,    41,    -1,    43,    44,    45,    46,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    63,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,   124,   125,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,   334,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,    -1,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   328,   329,   330,
   331,   332,   333,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   328,   329,   330,   331,   332,   333,    38,
    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
    93,    94,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    93,    94,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,   298,   299,
   300,    -1,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,
   318,   319,   320,   321,   322,   323,   324,   325,   326,
   327,   328,   329,   330,   331,   332,   333,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,   294,   295,   296,
    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,
   324,   325,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   124,   125,    38,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    93,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   124,   125,    38,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    93,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   319,   320,   321,   322,   323,   324,   325,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,    38,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   124,   125,    38,    -1,    -1,    41,    -1,    -1,
    44,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,   124,
   125,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    58,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,   124,
   125,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,
    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,
   285,   286,   287,   124,   125,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,    -1,    -1,    -1,
   283,    -1,   285,   286,   287,    -1,    -1,   290,    -1,
    -1,    -1,   294,   295,   296,    -1,   298,   299,   300,
    -1,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,
    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    94,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
    -1,    -1,    93,    94,    58,    59,    -1,    61,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,
    -1,    -1,    -1,    93,    94,    58,    59,    -1,    61,
    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,   124,   125,
    -1,    -1,    -1,    -1,    93,    94,    58,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
   125,    41,    -1,    -1,    44,    93,    94,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   283,    -1,   285,   286,   287,    -1,    93,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,   298,
   299,   300,    -1,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,    -1,   283,   125,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,   294,   295,   296,    -1,
   298,   299,   300,    -1,   302,   303,   304,   305,   306,};
}
static void yycheck1(){
yycheck[1] = new short[] {
   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,   294,   295,   296,
    -1,   298,   299,   300,    -1,   302,   303,   304,   305,
   306,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   283,    -1,   285,   286,   287,    58,    59,   290,    61,
    -1,    63,   294,   295,   296,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    58,    59,    -1,
    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   124,
   125,    -1,    -1,    -1,    -1,    93,    94,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
   124,   125,    -1,    -1,    -1,    -1,    93,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    -1,    93,    58,    59,
    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,    41,    -1,    93,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   125,    -1,    -1,    41,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    93,   290,    58,    59,    -1,   294,   295,
   296,    -1,   298,   299,   300,    -1,   302,   303,   304,
   305,   306,   307,   308,   309,   310,   311,   312,   313,
   314,   315,   316,   317,   318,    -1,   283,   125,   285,
   286,   287,    -1,    93,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,   298,   299,   300,    -1,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,    -1,   283,   125,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,    -1,   283,    -1,
   285,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
   294,   295,   296,    -1,   298,   299,   300,    -1,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    58,    59,    -1,   294,   295,   296,    -1,
   298,   299,   300,    -1,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,    -1,
    -1,    -1,    41,    -1,   283,    44,   285,   286,   287,
    -1,    93,   290,    -1,    -1,    -1,   294,   295,   296,
    41,    58,    59,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    -1,    41,    -1,    -1,    44,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    58,    59,    41,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1,
    -1,    -1,    58,    59,    41,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    93,    -1,    -1,    58,    59,    41,    -1,    -1,    44,
    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    -1,    -1,    58,    59,    41,    -1,    -1,
    44,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    -1,    93,    -1,    -1,    58,    59,    41,    -1,
    -1,    44,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,    -1,    -1,    93,    -1,    -1,    58,    59,    -1,
    41,    -1,    -1,    44,    -1,    -1,    -1,   125,    -1,
    -1,    -1,    -1,    -1,    93,    -1,    -1,    41,    58,
    59,    44,    -1,    -1,    -1,    -1,    -1,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    93,    58,    59,    -1,
    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,
   125,    -1,   283,    -1,   285,   286,   287,    93,    -1,
   290,    58,    59,    -1,   294,   295,   296,    -1,    -1,
    41,   125,    -1,    44,    -1,    93,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    93,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,   125,    -1,   294,   295,   296,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    93,    -1,
    -1,   294,   295,   296,    -1,   125,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,    -1,    -1,
    -1,    -1,   283,   125,   285,   286,   287,    -1,    -1,
   290,    -1,    -1,    -1,   294,   295,   296,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,   294,   295,   296,    -1,
    -1,    -1,    -1,    -1,   283,    -1,   285,   286,   287,
    -1,    -1,   290,    -1,    -1,    -1,   294,   295,   296,
    -1,    -1,    -1,    -1,    -1,   283,    -1,   285,   286,
   287,    -1,    -1,   290,    -1,    -1,    -1,   294,   295,
   296,    -1,    -1,    -1,    41,    -1,   283,    44,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    -1,    58,    59,    -1,    -1,    -1,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,   294,   295,   296,    -1,    -1,   283,    -1,   285,
   286,   287,    -1,    -1,   290,    -1,    -1,    -1,   294,
   295,   296,    93,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   283,    -1,   285,   286,   287,    -1,    -1,   290,
    -1,    -1,    -1,   294,   295,   296,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   283,
    -1,   285,   286,   287,    -1,    -1,   290,    -1,    -1,
    -1,   294,   295,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   283,    -1,   285,   286,   287,    -1,
    -1,   290,    -1,    -1,    -1,   294,   295};
}

 
final static short YYFINAL=1;
final static short YYMAXTOKEN=342;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,"'#'","'$'","'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'","'@'",null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'['","'\\\\'","']'","'^'",null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,"PD_COL","PD_REF",
"PD_TIPO","PD_NUM","PD_VAR","COMENTARIO","DECLARACION_TIPO","IMPORT_JAVA",
"LINEA_JAVA","ID","VAR","ENTERO","DECIMAL","CADENA_SIMPLE","CADENA_DOBLE",
"CADENA_COMANDO","M_REGEX","S_REGEX","Y_REGEX","STDIN","STDOUT","STDERR","MY",
"SUB","OUR","PACKAGE","WHILE","DO","FOR","UNTIL","IF","ELSIF","ELSE","UNLESS",
"LAST","NEXT","RETURN","LLOR","LLXOR","LLAND","LLNOT","MULTI_IGUAL","DIV_IGUAL",
"MOD_IGUAL","SUMA_IGUAL","MAS_IGUAL","MENOS_IGUAL","DESP_I_IGUAL",
"DESP_D_IGUAL","AND_IGUAL","OR_IGUAL","XOR_IGUAL","POW_IGUAL","LAND_IGUAL",
"LOR_IGUAL","DLOR_IGUAL","CONCAT_IGUAL","X_IGUAL","DOS_PUNTOS","LOR","DLOR",
"LAND","NUM_EQ","NUM_NE","STR_EQ","STR_NE","CMP","CMP_NUM","SMART_EQ","NUM_LE",
"NUM_GE","STR_LT","STR_LE","STR_GT","STR_GE","DESP_I","DESP_D","X","STR_REX",
"STR_NO_REX","UNITARIO","POW","MAS_MAS","MENOS_MENOS","FLECHA","AMBITO",
};
final static String yyrule[] = {
"$accept : raiz",
"raiz : fuente",
"fuente : masFuente cuerpo",
"masFuente :",
"masFuente : fuente funcionDef",
"funcionDef : funcionSub '{' cuerpo '}'",
"funcionSub : SUB ID",
"cuerpoR : sentencia",
"cuerpoR : cuerpoR sentencia",
"cuerpoNV : cuerpoR",
"cuerpo :",
"cuerpo : cuerpoNV",
"sentencia : lista modificador ';'",
"sentencia : ';'",
"sentencia : bloque",
"sentencia : flujo",
"sentencia : PACKAGE paqueteID ID ';'",
"sentencia : PACKAGE ID ';'",
"sentencia : COMENTARIO",
"sentencia : DECLARACION_TIPO",
"sentencia : error ';'",
"expresion : constante",
"expresion : variable",
"expresion : varMulti",
"expresion : asignacion",
"expresion : binario",
"expresion : aritmetica",
"expresion : logico",
"expresion : comparacion",
"expresion : coleccion",
"expresion : acceso",
"expresion : funcion",
"expresion : '&' funcion",
"expresion : regulares",
"expresion : expresion DOS_PUNTOS expresion",
"lista : expresion ',' lista",
"lista : expresion ','",
"lista : expresion",
"modificador :",
"modificador : IF expresion",
"modificador : UNLESS expresion",
"modificador : WHILE expresion",
"modificador : UNTIL expresion",
"modificador : FOR expresion",
"flujo : NEXT ';'",
"flujo : LAST ';'",
"flujo : RETURN ';'",
"flujo : RETURN expresion ';'",
"asignacion : expresion '=' expresion",
"asignacion : expresion MAS_IGUAL expresion",
"asignacion : expresion MENOS_IGUAL expresion",
"asignacion : expresion MULTI_IGUAL expresion",
"asignacion : expresion DIV_IGUAL expresion",
"asignacion : expresion MOD_IGUAL expresion",
"asignacion : expresion POW_IGUAL expresion",
"asignacion : expresion AND_IGUAL expresion",
"asignacion : expresion OR_IGUAL expresion",
"asignacion : expresion XOR_IGUAL expresion",
"asignacion : expresion DESP_D_IGUAL expresion",
"asignacion : expresion DESP_I_IGUAL expresion",
"asignacion : expresion LAND_IGUAL expresion",
"asignacion : expresion LOR_IGUAL expresion",
"asignacion : expresion DLOR_IGUAL expresion",
"asignacion : expresion X_IGUAL expresion",
"asignacion : expresion CONCAT_IGUAL expresion",
"constante : ENTERO",
"constante : DECIMAL",
"constante : CADENA_SIMPLE",
"constante : CADENA_DOBLE",
"constante : CADENA_COMANDO",
"variable : '$' VAR",
"variable : '@' VAR",
"variable : '%' VAR",
"variable : '$' paqueteVar VAR",
"variable : '@' paqueteVar VAR",
"variable : '%' paqueteVar VAR",
"variable : '$' '#' VAR",
"variable : '$' '#' paqueteVar VAR",
"variable : MY '$' VAR",
"variable : MY '@' VAR",
"variable : MY '%' VAR",
"variable : OUR '$' VAR",
"variable : OUR '@' VAR",
"variable : OUR '%' VAR",
"varMulti : MY '(' lista ')'",
"varMulti : OUR '(' lista ')'",
"paqueteVar : paqueteVar VAR AMBITO",
"paqueteVar : VAR AMBITO",
"paqueteID : paqueteID ID AMBITO",
"paqueteID : ID AMBITO",
"colParen : '(' lista ')'",
"colParen : '(' ')'",
"colRef : '[' lista ']'",
"colRef : '[' ']'",
"colRef : '{' lista '}'",
"colRef : '{' '}'",
"coleccion : colParen",
"coleccion : colRef",
"acceso : expresion colRef",
"acceso : expresion FLECHA colRef",
"acceso : '$' expresion",
"acceso : '@' expresion",
"acceso : '%' expresion",
"acceso : '\\\\' expresion",
"funcion : paqueteID ID expresion",
"funcion : paqueteID ID",
"funcion : ID expresion",
"funcion : ID",
"regulares : expresion STR_NO_REX M_REGEX",
"regulares : expresion STR_REX M_REGEX",
"regulares : expresion STR_REX S_REGEX",
"regulares : expresion STR_REX Y_REGEX",
"binario : expresion '|' expresion",
"binario : expresion '&' expresion",
"binario : '~' expresion",
"binario : expresion '^' expresion",
"binario : expresion DESP_I expresion",
"binario : expresion DESP_D expresion",
"logico : expresion LOR expresion",
"logico : expresion DLOR expresion",
"logico : expresion LAND expresion",
"logico : '!' expresion",
"logico : expresion LLOR expresion",
"logico : expresion LLAND expresion",
"logico : LLNOT expresion",
"logico : expresion LLXOR expresion",
"logico : expresion '?' expresion ':' expresion",
"comparacion : expresion NUM_EQ expresion",
"comparacion : expresion NUM_NE expresion",
"comparacion : expresion '<' expresion",
"comparacion : expresion NUM_LE expresion",
"comparacion : expresion '>' expresion",
"comparacion : expresion NUM_GE expresion",
"comparacion : expresion CMP_NUM expresion",
"comparacion : expresion STR_EQ expresion",
"comparacion : expresion STR_NE expresion",
"comparacion : expresion STR_LT expresion",
"comparacion : expresion STR_LE expresion",
"comparacion : expresion STR_GT expresion",
"comparacion : expresion STR_GE expresion",
"comparacion : expresion CMP expresion",
"comparacion : expresion SMART_EQ expresion",
"aritmetica : expresion '+' expresion",
"aritmetica : expresion '-' expresion",
"aritmetica : expresion '*' expresion",
"aritmetica : expresion '/' expresion",
"aritmetica : expresion POW expresion",
"aritmetica : expresion X expresion",
"aritmetica : expresion '.' expresion",
"aritmetica : expresion '%' expresion",
"aritmetica : '+' expresion",
"aritmetica : '-' expresion",
"aritmetica : MAS_MAS expresion",
"aritmetica : MENOS_MENOS expresion",
"aritmetica : expresion MAS_MAS",
"aritmetica : expresion MENOS_MENOS",
"abrirBloque :",
"listaFor :",
"listaFor : lista",
"bloque : '{' cuerpoNV '}'",
"bloque : WHILE abrirBloque '(' expresion ')' '{' cuerpo '}'",
"bloque : UNTIL abrirBloque '(' expresion ')' '{' cuerpo '}'",
"bloque : DO abrirBloque '{' cuerpo '}' WHILE '(' expresion ')' ';'",
"bloque : DO abrirBloque '{' cuerpo '}' UNTIL '(' expresion ')' ';'",
"bloque : FOR abrirBloque '(' listaFor ';' listaFor ';' listaFor ')' '{' cuerpo '}'",
"bloque : FOR abrirBloque variable colParen '{' cuerpo '}'",
"bloque : FOR abrirBloque colParen '{' cuerpo '}'",
"bloque : IF abrirBloque '(' expresion ')' '{' cuerpo '}' condicional",
"bloque : UNLESS abrirBloque '(' expresion ')' '{' cuerpo '}' condicional",
"condicional :",
"condicional : ELSIF '(' expresion ')' '{' cuerpo '}' condicional",
"condicional : ELSE '{' cuerpo '}'",
};

//#line 283 "parser.y"

	private List<Simbolo> simbolos;
	private List<Terminal> terminales;
	private Iterator<Terminal> iterator;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	private int errores;
	
	/**
	 * Constructor del analizador sintactico
	 * @param terminales Terminales
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Parser(List<Terminal> terminales, Opciones opciones,GestorErrores gestorErrores) {
		this.terminales = terminales;
		simbolos = new ArrayList<>(terminales.size()*10);
		iterator = terminales.iterator();
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		errores = 0;
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Obtiene el número de errores sintacticos, si no hay errores el analisis
	 * se ha realizado correctamente.
	 * @return Número de errores
	 */
	public int getErrores(){
		return errores;
	}
	
	/**
	 * Activa el depurador nativo del analizador
	 * @param debugMe Estado
	 */
	public void debug(boolean debugMe){
		yydebug = debugMe;
	}

	/**
	 * Inicia el analisis y la creación del arbol de simbolos. Una vez terminado
	 * se obtiene una lista ordenada de los símbolos segun fueron analizados y
	 * unidos entre si en forma de arbol.
	 * @return Lista de Símbolos
	 */
	public List<Simbolo> parsear(){
		yyparse();
		return simbolos;
	}

	/**
	 * Función interna auxiliar que extraer el símbolo del ParseVal y luego lo 
	 * retorna casteado al tipo que requiere su padre.
	 * @param <T> Tipo requerido por el constructor del padre
	 * @param pv ParserVal del analizador
	 * @return Simbolo castadeado al subtipo requerido
	 */
	private <T> T s(ParserVal pv){
		return (T)pv.get();
	}

	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna encapsulado en un ParseVal del analizador.
	 * @param s Simbolo
	 * @return ParseVal
	 */
	private ParserVal set(Simbolo s){
		simbolos.add(s);
		return new ParserVal(s);
	}
	
	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna encapsulado en un ParseVal del analizador.
	 * @param s Simbolo
	 * @param add Añadir a la lista
	 * @return ParseVal
	 */
	private ParserVal set(Simbolo s, boolean add){
		if(add){
			simbolos.add(s);
		}
		return new ParserVal(s);
	}	
	
	/**
	 * Función interna auxiliar que añade el simbolo a la lista de analizador
	 * y luego lo retorna.
	 * @param s Simbolo
	 * @return Simbolo s
	 */
	private <T extends Simbolo>  T add(T s){
		simbolos.add(s);
		return s;
	}
	
	/**
	 * Función interna auxiliar que simula que las expresiones estan dentro de parentesis
	 * aunque no sea asi en el codigo fuente.
	 * @param s Simbolo
	 * @return Simbolo s
	 */
	private ExpColeccion virtualCol(Expresion s){
		if(!(s instanceof ExpColeccion && ((ExpColeccion)s).getColeccion() instanceof ColParentesis)){
            Lista l = new Lista((Expresion)s);
            Coleccion col = new ColParentesis(l);
			simbolos.add(col);
			ExpColeccion expcol= new ExpColeccion(col);
			simbolos.add(expcol);		
			return expcol;
		}
		return (ExpColeccion)s;
	}

	/**
	 * Función invocada por el analizador cada vez que necesita un terminal.
	 * @return Tipo del terminal
	 */
	private int yylex (){
		if(iterator.hasNext()){
			Terminal t = iterator.next();
			yylval = set(t);
			return t.getToken().getTipo();
		}
		return 0;
	}

	/**
	 * Función invocada cuando el analizador encuentra un error sintactico.
	 * @param descripcion String con el mensaje "Syntax error"
	 */
	private void yyerror (String descripcion){
		errores++;
		List<Integer> tokens = new ArrayList<>(YYMAXTOKEN);
		int yychar, yyn;
		//Reducir
		for( yychar = 0 ; yychar < YYMAXTOKEN ; yychar++ ){   
			yyn = yyrindex[yystate];  
			if ((yyn !=0 ) && (yyn += yychar) >= 0 && yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar){  
				tokens.add(yychar);
			}
		}
		//Desplazar
		for( yychar = 0 ; yychar < YYMAXTOKEN ; yychar++ ){  
			yyn = yysindex[yystate];  
			if ((yyn != 0) && (yyn += yychar) >= 0 && yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar){  
				tokens.add(yychar);
			}
		}
		ParserError.errorSintactico(this, tokens);
	}
//#line 2827 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn/9000][yyn%9000]);
        //#### NEXT STATE ####
        yystate = yytable[yyn/9000][yyn%9000];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn/9000][yyn%9000];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn/9000][yyn%9000]+" ");
            yystate = yytable[yyn/9000][yyn%9000];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 76 "parser.y"
{yyval=set(new Raiz(add(s(val_peek(0)))));}
break;
case 2:
//#line 78 "parser.y"
{yyval=set(Fuente.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 3:
//#line 80 "parser.y"
{yyval=set(new Fuente(), false);}
break;
case 4:
//#line 81 "parser.y"
{yyval=set(Fuente.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 5:
//#line 83 "parser.y"
{yyval=set(new FuncionDef(s(val_peek(3)), s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 6:
//#line 85 "parser.y"
{yyval=set(new FuncionSub(s(val_peek(1)), s(val_peek(0))));}
break;
case 7:
//#line 87 "parser.y"
{yyval=set(Cuerpo.add(new Cuerpo(add(new AbrirBloque())), s(val_peek(0))), false);}
break;
case 8:
//#line 88 "parser.y"
{yyval=set(Cuerpo.add(s(val_peek(1)), s(val_peek(0))), false);}
break;
case 9:
//#line 90 "parser.y"
{yyval=set(s(val_peek(0)));}
break;
case 10:
//#line 92 "parser.y"
{yyval=set(new Cuerpo(add(new AbrirBloque())));}
break;
case 11:
//#line 93 "parser.y"
{yyval=val_peek(0);}
break;
case 12:
//#line 95 "parser.y"
{yyval=set(new StcLista(s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 13:
//#line 96 "parser.y"
{yyval=set(new StcLista(new Lista(), new ModNada(), s(val_peek(0))));}
break;
case 14:
//#line 97 "parser.y"
{yyval=set(new StcBloque(s(val_peek(0))));}
break;
case 15:
//#line 98 "parser.y"
{yyval=set(new StcFlujo(s(val_peek(0))));}
break;
case 16:
//#line 99 "parser.y"
{yyval=set(new StcPaquete(s(val_peek(3)), s(val_peek(2)), s(val_peek(1)), s(val_peek(0))));}
break;
case 17:
//#line 100 "parser.y"
{yyval=set(new StcPaquete(s(val_peek(2)), new Paquetes(), s(val_peek(1)), s(val_peek(0))));}
break;
case 18:
//#line 101 "parser.y"
{yyval=set(new StcComentario(s(val_peek(0))));}
break;
case 19:
//#line 102 "parser.y"
{yyval=set(new StcDeclaracion(s(val_peek(0))));}
break;
case 20:
//#line 103 "parser.y"
{yyval=set(new StcError());}
break;
case 21:
//#line 105 "parser.y"
{yyval=set(new ExpConstante(s(val_peek(0))));}
break;
case 22:
//#line 106 "parser.y"
{yyval=set(new ExpVariable(s(val_peek(0))));}
break;
case 23:
//#line 107 "parser.y"
{}
break;
case 24:
//#line 108 "parser.y"
{yyval=set(new ExpAsignacion(s(val_peek(0))));}
break;
case 25:
//#line 109 "parser.y"
{yyval=set(new ExpBinario(s(val_peek(0))));}
break;
case 26:
//#line 110 "parser.y"
{yyval=set(new ExpAritmetica(s(val_peek(0))));}
break;
case 27:
//#line 111 "parser.y"
{yyval=set(new ExpLogico(s(val_peek(0))));}
break;
case 28:
//#line 112 "parser.y"
{yyval=set(new ExpComparacion(s(val_peek(0))));}
break;
case 29:
//#line 113 "parser.y"
{yyval=set(new ExpColeccion(s(val_peek(0))));}
break;
case 30:
//#line 114 "parser.y"
{yyval=set(new ExpAcceso(s(val_peek(0))));}
break;
case 31:
//#line 115 "parser.y"
{yyval=set(new ExpFuncion(s(val_peek(0))));}
break;
case 32:
//#line 116 "parser.y"
{yyval=set(new ExpFuncion5(s(val_peek(1)), s(val_peek(0))));}
break;
case 33:
//#line 117 "parser.y"
{yyval=set(new ExpRegulares(s(val_peek(0))));}
break;
case 34:
//#line 118 "parser.y"
{yyval=set(new ExpRango(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 35:
//#line 120 "parser.y"
{yyval=set(Lista.add(s(val_peek(2)), s(val_peek(1)), s(val_peek(0))), false);}
break;
case 36:
//#line 121 "parser.y"
{yyval=set(new Lista(s(val_peek(1)), s(val_peek(0))));}
break;
case 37:
//#line 122 "parser.y"
{yyval=set(new Lista(s(val_peek(0))));}
break;
case 38:
//#line 124 "parser.y"
{yyval=set(new ModNada());}
break;
case 39:
//#line 125 "parser.y"
{yyval=set(new ModIf(s(val_peek(1)), s(val_peek(0))));}
break;
case 40:
//#line 126 "parser.y"
{yyval=set(new ModUnless(s(val_peek(1)), s(val_peek(0))));}
break;
case 41:
//#line 127 "parser.y"
{yyval=set(new ModWhile(s(val_peek(1)), s(val_peek(0))));}
break;
case 42:
//#line 128 "parser.y"
{yyval=set(new ModUntil(s(val_peek(1)), s(val_peek(0))));}
break;
case 43:
//#line 129 "parser.y"
{yyval=set(new ModFor(s(val_peek(1)), s(val_peek(0))));}
break;
case 44:
//#line 131 "parser.y"
{yyval=set(new Next(s(val_peek(1)), s(val_peek(0))));}
break;
case 45:
//#line 132 "parser.y"
{yyval=set(new Last(s(val_peek(1)), s(val_peek(0))));}
break;
case 46:
//#line 133 "parser.y"
{yyval=set(new Return(s(val_peek(1)), s(val_peek(0))));}
break;
case 47:
//#line 134 "parser.y"
{yyval=set(new Return(s(val_peek(2)), virtualCol(s(val_peek(1))), s(val_peek(0))));}
break;
case 48:
//#line 136 "parser.y"
{yyval=set(new Igual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 49:
//#line 137 "parser.y"
{yyval=set(new MasIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 50:
//#line 138 "parser.y"
{yyval=set(new MenosIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 51:
//#line 139 "parser.y"
{yyval=set(new MultiIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 52:
//#line 140 "parser.y"
{yyval=set(new DivIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 53:
//#line 141 "parser.y"
{yyval=set(new ModIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 54:
//#line 142 "parser.y"
{yyval=set(new PowIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 55:
//#line 143 "parser.y"
{yyval=set(new AndIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 56:
//#line 144 "parser.y"
{yyval=set(new OrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 57:
//#line 145 "parser.y"
{yyval=set(new XorIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 58:
//#line 146 "parser.y"
{yyval=set(new DespDIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 59:
//#line 147 "parser.y"
{yyval=set(new DespIIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 60:
//#line 148 "parser.y"
{yyval=set(new LAndIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 61:
//#line 149 "parser.y"
{yyval=set(new LOrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 62:
//#line 150 "parser.y"
{yyval=set(new DLOrIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 63:
//#line 151 "parser.y"
{yyval=set(new XIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 64:
//#line 152 "parser.y"
{yyval=set(new ConcatIgual(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 65:
//#line 154 "parser.y"
{yyval=set(new Entero(s(val_peek(0))));}
break;
case 66:
//#line 155 "parser.y"
{yyval=set(new Decimal(s(val_peek(0))));}
break;
case 67:
//#line 156 "parser.y"
{yyval=set(new CadenaSimple(s(val_peek(0))));}
break;
case 68:
//#line 157 "parser.y"
{yyval=set(new CadenaDoble(s(val_peek(0))));}
break;
case 69:
//#line 158 "parser.y"
{yyval=set(new CadenaComando(s(val_peek(0))));}
break;
case 70:
//#line 160 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 71:
//#line 161 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 72:
//#line 162 "parser.y"
{yyval=set(new VarExistente(s(val_peek(1)),s(val_peek(0))));}
break;
case 73:
//#line 163 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 74:
//#line 164 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 75:
//#line 165 "parser.y"
{yyval=set(new VarPaquete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 76:
//#line 166 "parser.y"
{yyval=set(new VarSigil(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 77:
//#line 167 "parser.y"
{yyval=set(new VarPaqueteSigil(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 78:
//#line 168 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 79:
//#line 169 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 80:
//#line 170 "parser.y"
{yyval=set(new VarMy(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 81:
//#line 171 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 82:
//#line 172 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 83:
//#line 173 "parser.y"
{yyval=set(new VarOur(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 84:
//#line 175 "parser.y"
{yyval=set(new VarMultiMy(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 85:
//#line 176 "parser.y"
{yyval=set(new VarMultiOur(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 86:
//#line 178 "parser.y"
{yyval=set(Paquetes.add(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 87:
//#line 179 "parser.y"
{yyval=set(new Paquetes(s(val_peek(1)),s(val_peek(0))));}
break;
case 88:
//#line 181 "parser.y"
{yyval=set(Paquetes.add(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 89:
//#line 182 "parser.y"
{yyval=set(new Paquetes(s(val_peek(1)),s(val_peek(0))));}
break;
case 90:
//#line 184 "parser.y"
{yyval=set(new ColParentesis(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 91:
//#line 185 "parser.y"
{yyval=set(new ColParentesis(s(val_peek(1)),new Lista(),s(val_peek(0))));}
break;
case 92:
//#line 187 "parser.y"
{yyval=set(new ColCorchete(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 93:
//#line 188 "parser.y"
{yyval=set(new ColCorchete(s(val_peek(1)),add(new Lista()),s(val_peek(0))));}
break;
case 94:
//#line 189 "parser.y"
{yyval=set(new ColLlave(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 95:
//#line 190 "parser.y"
{yyval=set(new ColLlave(s(val_peek(1)),add(new Lista()),s(val_peek(0))));}
break;
case 96:
//#line 192 "parser.y"
{yyval=val_peek(0);}
break;
case 97:
//#line 193 "parser.y"
{yyval=val_peek(0);}
break;
case 98:
//#line 195 "parser.y"
{yyval=set(new AccesoCol(s(val_peek(1)),s(val_peek(0))));}
break;
case 99:
//#line 196 "parser.y"
{yyval=set(new AccesoColRef(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 100:
//#line 197 "parser.y"
{yyval=set(new AccesoRefEscalar(s(val_peek(1)),s(val_peek(0))));}
break;
case 101:
//#line 198 "parser.y"
{yyval=set(new AccesoRefArray(s(val_peek(1)),s(val_peek(0))));}
break;
case 102:
//#line 199 "parser.y"
{yyval=set(new AccesoRefMap(s(val_peek(1)),s(val_peek(0))));}
break;
case 103:
//#line 200 "parser.y"
{yyval=set(new AccesoRef(s(val_peek(1)),s(val_peek(0))));}
break;
case 104:
//#line 202 "parser.y"
{yyval=set(new FuncionPaqueteArgs(s(val_peek(2)),s(val_peek(1)),virtualCol(s(val_peek(0)))));}
break;
case 105:
//#line 203 "parser.y"
{yyval=set(new FuncionPaqueteNoArgs(s(val_peek(1)),s(val_peek(0))));}
break;
case 106:
//#line 204 "parser.y"
{yyval=set(new FuncionArgs(s(val_peek(1)),virtualCol(s(val_peek(0)))));}
break;
case 107:
//#line 205 "parser.y"
{yyval=set(new FuncionNoArgs(s(val_peek(0))));}
break;
case 108:
//#line 207 "parser.y"
{yyval=set(new RegularNoMatch(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 109:
//#line 208 "parser.y"
{yyval=set(new RegularMatch(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 110:
//#line 209 "parser.y"
{yyval=set(new RegularSubs(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 111:
//#line 210 "parser.y"
{yyval=set(new RegularTrans(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 112:
//#line 212 "parser.y"
{yyval=set(new BinOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 113:
//#line 213 "parser.y"
{yyval=set(new BinAnd(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 114:
//#line 214 "parser.y"
{yyval=set(new BinNot(s(val_peek(1)),s(val_peek(0))));}
break;
case 115:
//#line 215 "parser.y"
{yyval=set(new BinXor(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 116:
//#line 216 "parser.y"
{yyval=set(new BinDespI(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 117:
//#line 217 "parser.y"
{yyval=set(new BinDespD(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 118:
//#line 219 "parser.y"
{yyval=set(new LogOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 119:
//#line 220 "parser.y"
{yyval=set(new DLogOr(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 120:
//#line 221 "parser.y"
{yyval=set(new LogAnd(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 121:
//#line 222 "parser.y"
{yyval=set(new LogNot(s(val_peek(1)),s(val_peek(0))));}
break;
case 122:
//#line 223 "parser.y"
{yyval=set(new LogOrBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 123:
//#line 224 "parser.y"
{yyval=set(new LogAndBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 124:
//#line 225 "parser.y"
{yyval=set(new LogNotBajo(s(val_peek(1)),s(val_peek(0))));}
break;
case 125:
//#line 226 "parser.y"
{yyval=set(new LogXorBajo(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 126:
//#line 227 "parser.y"
{yyval=set(new LogTernario(s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 127:
//#line 229 "parser.y"
{yyval=set(new CompNumEq(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 128:
//#line 230 "parser.y"
{yyval=set(new CompNumNe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 129:
//#line 231 "parser.y"
{yyval=set(new CompNumLt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 130:
//#line 232 "parser.y"
{yyval=set(new CompNumLe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 131:
//#line 233 "parser.y"
{yyval=set(new CompNumGt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 132:
//#line 234 "parser.y"
{yyval=set(new CompNumGe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 133:
//#line 235 "parser.y"
{yyval=set(new CompNumCmp(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 134:
//#line 236 "parser.y"
{yyval=set(new CompStrEq(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 135:
//#line 237 "parser.y"
{yyval=set(new CompStrNe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 136:
//#line 238 "parser.y"
{yyval=set(new CompStrLt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 137:
//#line 239 "parser.y"
{yyval=set(new CompStrLe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 138:
//#line 240 "parser.y"
{yyval=set(new CompStrGt(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 139:
//#line 241 "parser.y"
{yyval=set(new CompStrGe(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 140:
//#line 242 "parser.y"
{yyval=set(new CompStrCmp(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 141:
//#line 243 "parser.y"
{yyval=set(new CompSmart(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 142:
//#line 245 "parser.y"
{yyval=set(new AritSuma(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 143:
//#line 246 "parser.y"
{yyval=set(new AritResta(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 144:
//#line 247 "parser.y"
{yyval=set(new AritMulti(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 145:
//#line 248 "parser.y"
{yyval=set(new AritDiv(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 146:
//#line 249 "parser.y"
{yyval=set(new AritPow(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 147:
//#line 250 "parser.y"
{yyval=set(new AritX(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 148:
//#line 251 "parser.y"
{yyval=set(new AritConcat(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 149:
//#line 252 "parser.y"
{yyval=set(new AritMod(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 150:
//#line 253 "parser.y"
{yyval=set(new AritPositivo(s(val_peek(1)),s(val_peek(0))));}
break;
case 151:
//#line 254 "parser.y"
{yyval=set(new AritNegativo(s(val_peek(1)),s(val_peek(0))));}
break;
case 152:
//#line 255 "parser.y"
{yyval=set(new AritPreIncremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 153:
//#line 256 "parser.y"
{yyval=set(new AritPreDecremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 154:
//#line 257 "parser.y"
{yyval=set(new AritPostIncremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 155:
//#line 258 "parser.y"
{yyval=set(new AritPostDecremento(s(val_peek(1)),s(val_peek(0))));}
break;
case 156:
//#line 260 "parser.y"
{yyval=set(new AbrirBloque());}
break;
case 157:
//#line 262 "parser.y"
{yyval=set(new Lista());}
break;
case 158:
//#line 263 "parser.y"
{yyval=val_peek(0);}
break;
case 159:
//#line 265 "parser.y"
{yyval=set(new BloqueVacio(s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 160:
//#line 266 "parser.y"
{yyval=set(new BloqueWhile(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 161:
//#line 267 "parser.y"
{yyval=set(new BloqueUntil(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 162:
//#line 268 "parser.y"
{yyval=set(new BloqueDoWhile(s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 163:
//#line 269 "parser.y"
{yyval=set(new BloqueDoUntil(s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 164:
//#line 270 "parser.y"
{yyval=set(new BloqueFor(s(val_peek(11)),s(val_peek(10)),s(val_peek(9)),s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 165:
//#line 271 "parser.y"
{yyval=set(new BloqueForeachVar(s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 166:
//#line 272 "parser.y"
{yyval=set(new BloqueForeach(s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 167:
//#line 273 "parser.y"
{yyval=set(new BloqueIf(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 168:
//#line 274 "parser.y"
{yyval=set(new BloqueUnless(s(val_peek(8)),s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 169:
//#line 276 "parser.y"
{yyval=set(new CondicionalNada());}
break;
case 170:
//#line 277 "parser.y"
{yyval=set(new CondicionalElsif(s(val_peek(7)),s(val_peek(6)),s(val_peek(5)),s(val_peek(4)),s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
case 171:
//#line 278 "parser.y"
{yyval=set(new CondicionalElse(s(val_peek(3)),s(val_peek(2)),s(val_peek(1)),s(val_peek(0))));}
break;
//#line 3660 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn/9000][yyn%9000] == yystate)
        yystate = yytable[yyn/9000][yyn%9000]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
