/* The following code was generated by JFlex 1.4.3 on 7/06/17 18:49 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.Token;
import perldoop.sintactico.Parser;
import perldoop.preprocesador.Preprocesador;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/06/17 18:49 from the specification file
 * <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ANALISIS_ACCESO = 18;
  public static final int ANALISIS_ACCESO_INDEX = 20;
  public static final int PD = 6;
  public static final int FUN = 4;
  public static final int REX_T = 24;
  public static final int REX_MOD = 26;
  public static final int DELIMITADOR_DOBLE = 12;
  public static final int ANALISIS_ACCESO_INDEX_STR = 22;
  public static final int VAR = 2;
  public static final int ANALISIS_VAR = 16;
  public static final int IGNORAR = 8;
  public static final int YYINITIAL = 0;
  public static final int ANALISIS = 14;
  public static final int DELIMITADOR = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\40\2\0\1\101\22\0\1\102\1\61\1\46\1\31"+
    "\1\41\1\43\1\53\1\45\1\63\1\64\1\54\1\13\1\71\1\14"+
    "\1\11\1\55\1\2\1\10\6\6\2\3\1\44\1\73\1\15\1\62"+
    "\1\25\1\72\1\42\1\5\1\7\2\5\1\12\1\5\21\1\1\4"+
    "\2\1\1\65\1\74\1\66\1\60\1\1\1\47\1\33\1\26\1\27"+
    "\1\100\1\23\1\100\1\17\1\77\1\16\1\32\1\30\1\24\1\35"+
    "\1\20\1\21\1\36\1\50\1\22\1\75\1\37\1\77\1\34\1\51"+
    "\1\52\1\76\1\77\1\67\1\56\1\70\1\57\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\1\1\2"+
    "\2\3\1\4\1\5\1\6\1\7\1\10\1\11\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\2"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\12\1\45\1\46\1\47\1\45\1\50"+
    "\2\51\1\52\1\12\1\53\1\54\2\55\1\56\1\57"+
    "\1\56\1\60\1\61\1\62\2\3\1\63\1\64\1\62"+
    "\1\65\1\66\1\67\1\0\1\70\1\1\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\3\3\0\1\77\1\0"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\0\1\12\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\2\0\1\3\3\0\1\77\1\0\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\0\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\5\0\1\55\1\140\1\3\1\67\2\3\1\77\1\0"+
    "\1\141\1\142\1\143\2\0\1\144\1\145\1\146\1\147"+
    "\1\0\2\3\1\77\1\0\1\141\1\142\1\143\2\0"+
    "\1\144\1\145\1\146\1\147\1\150\3\0\1\151\2\0"+
    "\1\55\1\140\11\0\1\152\66\0\1\153\3\0\1\153"+
    "\6\0\1\153\2\0\1\154\1\0\1\154\1\153\1\155"+
    "\2\156\1\154\1\153\1\156\1\154\1\153\1\156\1\154"+
    "\1\153\1\156\1\154\1\153\1\156\1\154\1\153\1\156"+
    "\1\154\1\153\1\156\1\154\1\153\1\156\1\154\1\153"+
    "\1\156\1\154\1\153\1\156\1\154\1\153\1\156\1\154"+
    "\1\153\1\156\1\154\1\156\1\154\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u03ed\0\u03ed\0\u03ed\0\u068b\0\u06ce\0\u03ed\0\u03ed"+
    "\0\u03ed\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed"+
    "\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u09af\0\u09f2\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u09af"+
    "\0\u09af\0\u0c4d\0\u0c90\0\u09af\0\u09af\0\u09af\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af"+
    "\0\u09af\0\u09af\0\u09af\0\u03ed\0\u0f71\0\u03ed\0\u06ce\0\u0fb4"+
    "\0\u03ed\0\u0ff7\0\u03ed\0\u103a\0\u03ed\0\u03ed\0\u107d\0\u10c0"+
    "\0\u03ed\0\u1103\0\u06ce\0\u03ed\0\u03ed\0\u03ed\0\u1146\0\u1189"+
    "\0\u03ed\0\u03ed\0\u06ce\0\u03ed\0\u03ed\0\u03ed\0\u11cc\0\u03ed"+
    "\0\u120f\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u03ed\0\u03ed\0\u03ed"+
    "\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u1427\0\u146a\0\u14ad\0\u03ed"+
    "\0\u14f0\0\u1533\0\u03ed\0\u03ed\0\u0430\0\u0430\0\u0430\0\u0430"+
    "\0\u03ed\0\u1576\0\u03ed\0\u15b9\0\u03ed\0\u15fc\0\u03ed\0\u163f"+
    "\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u09af"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u09af"+
    "\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u1857\0\u189a"+
    "\0\u18dd\0\u09af\0\u1920\0\u09af\0\u09af\0\u09f2\0\u09f2\0\u09f2"+
    "\0\u09f2\0\u09af\0\u1963\0\u09af\0\u19a6\0\u09af\0\u19e9\0\u09af"+
    "\0\u1a2c\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af\0\u09af"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u0324\0\u131b\0\u135e\0\u1c87\0\u1cca\0\u03ed\0\u03ed\0\u03ed"+
    "\0\u1d0d\0\u1d50\0\u03ed\0\u03ed\0\u03ed\0\u03ed\0\u1d93\0\u174b"+
    "\0\u178e\0\u1dd6\0\u1e19\0\u09af\0\u09af\0\u09af\0\u1e5c\0\u1e9f"+
    "\0\u09af\0\u09af\0\u09af\0\u09af\0\u03ed\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u03ed\0\u1fab\0\u1fee\0\u03ed\0\u03ed\0\u2031\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u03ed\0\u228c"+
    "\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c"+
    "\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564"+
    "\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c"+
    "\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\2\21\1\23\1\21\1\23"+
    "\1\24\1\21\1\25\1\26\1\27\7\21\1\30\3\21"+
    "\1\31\6\21\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\21\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\4\21"+
    "\2\32\1\66\1\67\1\70\1\71\2\67\1\71\1\67"+
    "\1\71\1\72\1\67\1\73\1\74\1\75\7\67\1\76"+
    "\3\67\1\77\6\67\1\32\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\67\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\4\67\2\133\1\134\1\135\2\134\2\135\1\134\1\135"+
    "\2\134\1\135\3\134\7\135\1\134\3\135\1\136\6\135"+
    "\4\134\1\137\3\134\3\135\22\134\4\135\3\134\1\140"+
    "\2\134\2\140\1\134\1\140\2\134\1\140\3\134\7\140"+
    "\1\134\3\140\1\134\6\140\4\134\1\137\3\134\3\140"+
    "\22\134\4\140\2\134\15\141\1\142\22\141\1\143\40\141"+
    "\1\32\1\141\15\32\1\144\65\32\40\145\1\0\34\145"+
    "\1\32\5\145\103\146\74\147\1\150\6\147\1\151\1\152"+
    "\2\151\2\152\1\151\1\152\2\151\1\152\3\151\7\152"+
    "\1\151\3\152\1\136\6\152\4\151\1\153\3\151\3\152"+
    "\12\151\1\154\1\151\1\154\5\151\4\152\67\151\1\155"+
    "\1\151\1\155\13\151\1\156\1\135\1\157\1\160\2\135"+
    "\1\160\1\135\1\160\1\156\1\135\3\156\7\135\1\156"+
    "\3\135\1\136\6\135\1\156\1\161\1\162\1\156\1\163"+
    "\1\164\2\156\3\135\13\156\1\165\1\156\1\165\4\156"+
    "\4\135\2\156\45\15\1\166\26\15\1\167\6\15\35\20"+
    "\1\170\1\20\1\171\6\20\1\172\6\20\1\173\17\20"+
    "\1\174\1\175\4\20\16\176\7\177\1\176\3\177\1\176"+
    "\6\177\10\176\3\177\22\176\4\177\2\176\104\0\10\21"+
    "\1\0\1\21\3\0\7\21\1\0\3\21\1\0\6\21"+
    "\10\0\3\21\22\0\4\21\4\0\1\200\1\201\1\202"+
    "\1\0\1\200\1\203\1\200\1\204\14\0\1\203\23\0"+
    "\1\202\32\0\2\23\2\0\1\23\1\0\1\23\1\204"+
    "\1\205\10\0\1\205\61\0\2\204\2\0\1\204\1\0"+
    "\1\204\1\206\50\0\1\207\33\0\1\210\46\0\1\211"+
    "\34\0\1\212\10\0\1\213\34\0\1\214\35\0\1\215"+
    "\44\0\1\216\45\0\1\217\34\0\1\220\35\0\1\221"+
    "\43\0\1\222\103\0\1\223\64\0\1\224\37\0\10\21"+
    "\1\0\1\21\3\0\4\21\1\225\2\21\1\0\3\21"+
    "\1\0\6\21\10\0\1\226\1\227\1\230\22\0\4\21"+
    "\3\0\10\21\1\0\1\21\3\0\7\21\1\0\3\21"+
    "\1\0\6\21\10\0\3\21\7\0\1\231\12\0\4\21"+
    "\55\0\1\232\6\0\1\233\74\0\1\234\5\0\1\235"+
    "\75\0\1\236\4\0\1\237\76\0\1\240\3\0\1\241"+
    "\77\0\1\242\105\0\1\243\77\0\1\244\2\0\1\245"+
    "\45\0\1\62\31\0\1\246\2\0\1\247\20\0\31\250"+
    "\1\251\6\250\1\0\43\250\10\67\1\250\1\67\3\250"+
    "\7\67\1\250\3\67\1\251\6\67\1\0\7\250\3\67"+
    "\22\250\4\67\4\250\1\252\1\253\1\254\1\250\1\252"+
    "\1\255\1\252\1\256\14\250\1\255\2\250\1\251\6\250"+
    "\1\0\11\250\1\254\32\250\2\71\2\250\1\71\1\250"+
    "\1\71\1\256\1\257\10\250\1\257\5\250\1\251\6\250"+
    "\1\0\44\250\2\256\2\250\1\256\1\250\1\256\1\260"+
    "\17\250\1\251\6\250\1\0\21\250\1\261\33\250\1\262"+
    "\15\250\1\251\6\250\1\0\21\250\1\263\34\250\1\264"+
    "\10\250\1\265\3\250\1\251\6\250\1\0\21\250\1\266"+
    "\35\250\1\267\13\250\1\251\6\250\1\0\21\250\1\270"+
    "\45\250\1\271\3\250\1\251\6\250\1\0\21\250\1\272"+
    "\35\250\1\273\13\250\1\251\6\250\1\0\20\250\1\222"+
    "\52\250\1\251\6\250\1\0\21\250\1\274\51\250\1\251"+
    "\6\250\1\0\3\250\1\275\37\250\10\67\1\250\1\67"+
    "\3\250\4\67\1\276\2\67\1\250\3\67\1\251\6\67"+
    "\1\0\7\250\1\277\1\300\1\301\22\250\4\67\3\250"+
    "\10\67\1\250\1\67\3\250\7\67\1\250\3\67\1\251"+
    "\6\67\1\0\7\250\3\67\7\250\1\302\12\250\4\67"+
    "\33\250\1\251\6\250\1\0\12\250\1\303\6\250\1\304"+
    "\51\250\1\251\6\250\1\0\13\250\1\305\5\250\1\306"+
    "\51\250\1\251\6\250\1\0\14\250\1\307\4\250\1\310"+
    "\51\250\1\251\6\250\1\0\15\250\1\311\3\250\1\312"+
    "\51\250\1\251\6\250\1\0\16\250\1\313\54\250\1\251"+
    "\6\250\1\0\21\250\1\314\51\250\1\251\6\250\1\0"+
    "\16\250\1\315\2\250\1\316\45\250\1\127\3\250\1\251"+
    "\6\250\1\0\16\250\1\317\2\250\1\320\20\250\1\0"+
    "\10\135\1\0\1\135\3\0\7\135\1\0\3\135\1\0"+
    "\6\135\10\0\3\135\22\0\4\135\3\0\10\140\1\0"+
    "\1\140\3\0\7\140\1\0\3\140\1\0\6\140\10\0"+
    "\3\140\22\0\4\140\3\0\1\321\1\322\1\323\2\321"+
    "\1\323\1\321\1\323\1\0\1\321\3\0\7\321\1\0"+
    "\3\321\1\0\6\321\1\0\3\324\4\0\3\321\22\0"+
    "\4\321\20\0\1\325\64\0\40\326\1\0\42\326\103\327"+
    "\1\0\10\152\1\0\1\152\3\0\7\152\1\0\3\152"+
    "\1\0\6\152\10\0\3\152\22\0\4\152\4\0\1\330"+
    "\1\0\1\202\1\0\1\330\1\203\1\330\15\0\1\203"+
    "\23\0\1\202\32\0\2\160\2\0\1\160\1\0\1\160"+
    "\72\0\45\15\1\331\26\15\1\167\6\15\22\0\1\175"+
    "\76\0\7\177\1\0\3\177\1\0\6\177\10\0\3\177"+
    "\22\0\4\177\4\0\1\200\1\201\2\0\1\200\1\0"+
    "\1\200\1\204\73\0\2\201\2\0\1\201\1\0\1\201"+
    "\1\204\73\0\2\332\1\0\4\332\1\0\1\332\10\0"+
    "\1\332\2\0\2\332\3\0\1\332\44\0\1\332\4\0"+
    "\1\333\5\0\1\333\74\0\2\204\2\0\1\204\1\0"+
    "\1\204\1\0\1\205\10\0\1\205\62\0\1\334\2\0"+
    "\1\334\1\0\1\334\2\0\1\335\151\0\1\336\45\0"+
    "\1\337\137\0\1\340\36\0\1\341\13\0\1\342\50\0"+
    "\40\222\1\0\42\222\62\0\1\343\102\0\1\344\102\0"+
    "\1\345\102\0\1\346\20\0\15\250\1\347\13\250\1\251"+
    "\6\250\1\0\44\250\1\252\1\253\2\250\1\252\1\250"+
    "\1\252\1\256\17\250\1\251\6\250\1\0\44\250\2\253"+
    "\2\250\1\253\1\250\1\253\1\256\17\250\1\251\6\250"+
    "\1\0\44\250\2\350\1\250\4\350\1\250\1\350\10\250"+
    "\1\350\2\250\2\350\1\250\1\251\1\250\1\350\4\250"+
    "\1\0\37\250\1\350\4\250\1\351\5\250\1\351\20\250"+
    "\1\251\6\250\1\0\44\250\2\256\2\250\1\256\1\250"+
    "\1\256\1\250\1\257\10\250\1\257\5\250\1\251\6\250"+
    "\1\0\45\250\1\352\2\250\1\352\1\250\1\352\2\250"+
    "\1\353\15\250\1\251\6\250\1\0\73\250\1\251\6\250"+
    "\1\0\21\250\1\354\45\250\1\355\3\250\1\251\6\250"+
    "\1\0\73\250\1\251\6\250\1\0\21\250\1\356\36\250"+
    "\1\357\12\250\1\251\1\360\5\250\1\0\73\250\1\251"+
    "\6\250\1\0\21\250\1\361\51\250\1\251\6\250\1\0"+
    "\21\250\1\362\51\250\1\251\6\250\1\0\21\250\1\363"+
    "\51\250\1\251\6\250\1\0\21\250\1\364\20\250\1\0"+
    "\10\321\1\0\1\321\3\0\7\321\1\365\3\321\1\0"+
    "\6\321\10\0\3\321\22\0\4\321\4\0\1\366\1\0"+
    "\1\367\1\0\1\366\1\370\1\366\14\0\1\371\1\370"+
    "\23\0\1\367\32\0\2\323\2\0\1\323\1\0\1\323"+
    "\14\0\1\371\56\0\1\372\2\0\2\372\1\0\1\372"+
    "\2\0\1\372\3\0\7\372\1\0\3\372\1\0\6\372"+
    "\10\0\3\372\22\0\4\372\21\0\1\373\63\0\40\374"+
    "\1\0\42\374\40\375\1\0\42\375\2\0\1\330\3\0"+
    "\1\330\1\0\1\330\74\0\2\334\2\0\1\334\1\0"+
    "\1\334\106\0\1\376\105\0\1\377\116\0\1\u0100\47\0"+
    "\16\250\1\u0101\12\250\1\251\6\250\1\0\44\250\2\352"+
    "\2\250\1\352\1\250\1\352\20\250\1\251\6\250\1\0"+
    "\56\250\1\u0102\14\250\1\251\6\250\1\0\61\250\1\u0103"+
    "\11\250\1\251\6\250\1\0\73\250\1\251\1\250\1\u0104"+
    "\4\250\1\0\42\250\2\0\1\366\3\0\1\366\1\0"+
    "\1\366\14\0\1\371\57\0\2\u0105\1\0\4\u0105\1\0"+
    "\1\u0105\10\0\1\u0105\2\0\2\u0105\3\0\1\u0105\44\0"+
    "\1\u0105\4\0\1\u0106\5\0\1\u0106\73\0\10\372\1\0"+
    "\1\372\3\0\7\372\1\u0107\3\372\1\0\6\372\10\0"+
    "\3\372\22\0\4\372\22\0\1\u0108\65\0\1\334\2\0"+
    "\1\334\1\0\1\334\112\0\1\u0109\116\0\1\u010a\46\0"+
    "\17\250\1\u010b\11\250\1\251\6\250\1\0\45\250\1\352"+
    "\2\250\1\352\1\250\1\352\20\250\1\251\6\250\1\0"+
    "\62\250\1\u010c\10\250\1\251\6\250\1\0\73\250\1\251"+
    "\2\250\1\u010d\3\250\1\0\42\250\2\0\2\u0105\1\0"+
    "\4\u0105\1\0\1\u0105\10\0\1\u0105\1\0\1\371\2\u0105"+
    "\3\0\1\u0105\44\0\1\u0105\4\0\1\u0106\5\0\1\u0106"+
    "\14\0\1\371\76\0\1\u010e\102\0\1\u010f\114\0\1\u0110"+
    "\47\0\20\250\1\u0111\10\250\1\251\6\250\1\0\63\250"+
    "\1\u0112\7\250\1\251\6\250\1\0\73\250\1\251\1\250"+
    "\1\u0113\4\250\1\0\42\250\22\0\1\u0114\102\0\1\u0115"+
    "\74\0\1\u0116\66\0\21\250\1\u0117\7\250\1\251\6\250"+
    "\1\0\64\250\1\u0118\6\250\1\251\6\250\1\0\56\250"+
    "\1\u0119\14\250\1\251\6\250\1\0\42\250\23\0\1\u011a"+
    "\102\0\1\u011b\75\0\1\u011c\5\0\1\u011d\56\0\22\250"+
    "\1\u011e\6\250\1\251\6\250\1\0\65\250\1\u011f\5\250"+
    "\1\251\6\250\1\0\60\250\1\u0120\5\250\1\u0121\4\250"+
    "\1\251\6\250\1\0\42\250\14\0\1\u0122\102\0\1\u0123"+
    "\123\0\1\u0124\63\0\1\u0125\64\0\23\250\1\u0126\5\250"+
    "\1\251\6\250\1\0\56\250\1\u0127\14\250\1\251\6\250"+
    "\1\0\73\250\1\251\3\250\1\u0128\2\250\1\0\60\250"+
    "\1\u0129\12\250\1\251\6\250\1\0\42\250\26\0\1\u012a"+
    "\102\0\1\u012b\112\0\1\u012c\64\0\1\u012d\62\0\14\250"+
    "\1\u012e\14\250\1\251\6\250\1\0\66\250\1\u012f\1\250"+
    "\1\u0130\2\250\1\251\6\250\1\0\73\250\1\251\4\250"+
    "\1\u0131\1\250\1\0\62\250\1\u0132\10\250\1\251\6\250"+
    "\1\0\42\250\24\0\1\u0133\102\0\1\u0134\77\0\1\u0135"+
    "\104\0\1\u0136\57\0\24\250\1\u012f\4\250\1\251\6\250"+
    "\1\0\60\250\1\u0137\12\250\1\251\6\250\1\0\66\250"+
    "\1\u0138\4\250\1\251\6\250\1\0\63\250\1\u0139\7\250"+
    "\1\251\6\250\1\0\65\250\1\u013a\5\250\1\251\6\250"+
    "\1\0\42\250\21\0\1\u013b\102\0\1\u013c\103\0\1\u013d"+
    "\105\0\1\u013e\55\0\20\250\1\u013f\10\250\1\251\6\250"+
    "\1\0\63\250\1\u0140\7\250\1\251\6\250\1\0\64\250"+
    "\1\u0141\6\250\1\251\6\250\1\0\67\250\1\u0142\3\250"+
    "\1\251\6\250\1\0\42\250\27\0\1\u0143\102\0\1\u0144"+
    "\112\0\1\u0145\43\0\40\u013e\1\0\42\u013e\23\250\1\u0146"+
    "\5\250\1\251\6\250\1\0\71\250\1\u0147\1\250\1\251"+
    "\6\250\1\0\73\250\1\251\5\250\1\u0148\1\0\42\250"+
    "\31\u0142\1\u0149\6\u0142\1\0\42\u0142\30\0\1\u014a\102\0"+
    "\1\u014b\77\0\1\u014c\55\0\25\250\1\222\3\250\1\251"+
    "\6\250\1\0\72\250\1\u014d\1\251\6\250\1\0\67\250"+
    "\1\u014e\3\250\1\251\6\250\1\0\42\250\15\u0142\1\u014f"+
    "\13\u0142\1\u0149\6\u0142\1\0\42\u0142\25\0\1\u0150\102\0"+
    "\1\u0151\55\0\40\u014c\1\0\42\u014c\25\250\1\u0152\3\250"+
    "\1\251\6\250\1\0\42\250\31\u014e\1\u0153\6\u014e\1\0"+
    "\42\u014e\16\u0142\1\u0154\12\u0142\1\u0149\6\u0142\1\0\42\u0142"+
    "\40\u0150\1\0\42\u0150\40\u0151\1\0\42\u0151\31\u0152\1\u0155"+
    "\6\u0152\1\0\42\u0152\15\u014e\1\u0156\13\u014e\1\u0153\6\u014e"+
    "\1\0\42\u014e\17\u0142\1\u0157\11\u0142\1\u0149\6\u0142\1\0"+
    "\42\u0142\15\u0152\1\u0158\13\u0152\1\u0155\6\u0152\1\0\42\u0152"+
    "\16\u014e\1\u0159\12\u014e\1\u0153\6\u014e\1\0\42\u014e\20\u0142"+
    "\1\u015a\10\u0142\1\u0149\6\u0142\1\0\42\u0142\16\u0152\1\u015b"+
    "\12\u0152\1\u0155\6\u0152\1\0\42\u0152\17\u014e\1\u015c\11\u014e"+
    "\1\u0153\6\u014e\1\0\42\u014e\21\u0142\1\u015d\7\u0142\1\u0149"+
    "\6\u0142\1\0\42\u0142\17\u0152\1\u015e\11\u0152\1\u0155\6\u0152"+
    "\1\0\42\u0152\20\u014e\1\u015f\10\u014e\1\u0153\6\u014e\1\0"+
    "\42\u014e\22\u0142\1\u0160\6\u0142\1\u0149\6\u0142\1\0\42\u0142"+
    "\20\u0152\1\u0161\10\u0152\1\u0155\6\u0152\1\0\42\u0152\21\u014e"+
    "\1\u0162\7\u014e\1\u0153\6\u014e\1\0\42\u014e\23\u0142\1\u0163"+
    "\5\u0142\1\u0149\6\u0142\1\0\42\u0142\21\u0152\1\u0164\7\u0152"+
    "\1\u0155\6\u0152\1\0\42\u0152\22\u014e\1\u0165\6\u014e\1\u0153"+
    "\6\u014e\1\0\42\u014e\14\u0142\1\u0166\14\u0142\1\u0149\6\u0142"+
    "\1\0\42\u0142\22\u0152\1\u0167\6\u0152\1\u0155\6\u0152\1\0"+
    "\42\u0152\23\u014e\1\u0168\5\u014e\1\u0153\6\u014e\1\0\42\u014e"+
    "\24\u0142\1\u0169\4\u0142\1\u0149\6\u0142\1\0\42\u0142\23\u0152"+
    "\1\u016a\5\u0152\1\u0155\6\u0152\1\0\42\u0152\14\u014e\1\u016b"+
    "\14\u014e\1\u0153\6\u014e\1\0\42\u014e\16\u0142\1\u016c\12\u0142"+
    "\1\u0149\6\u0142\1\0\42\u0142\14\u0152\1\u016d\14\u0152\1\u0155"+
    "\6\u0152\1\0\42\u0152\24\u014e\1\u016e\4\u014e\1\u0153\6\u014e"+
    "\1\0\42\u014e\20\u0142\1\u016f\10\u0142\1\u0149\6\u0142\1\0"+
    "\42\u0142\24\u0152\1\u0170\4\u0152\1\u0155\6\u0152\1\0\42\u0152"+
    "\16\u014e\1\u0171\12\u014e\1\u0153\6\u014e\1\0\42\u014e\23\u0142"+
    "\1\u0172\5\u0142\1\u0149\6\u0142\1\0\42\u0142\16\u0152\1\u0173"+
    "\12\u0152\1\u0155\6\u0152\1\0\42\u0152\20\u014e\1\u0174\10\u014e"+
    "\1\u0153\6\u014e\1\0\42\u014e\25\u0142\1\222\3\u0142\1\u0149"+
    "\6\u0142\1\0\42\u0142\20\u0152\1\u0175\10\u0152\1\u0155\6\u0152"+
    "\1\0\42\u0152\23\u014e\1\u0176\5\u014e\1\u0153\6\u014e\1\0"+
    "\42\u014e\23\u0152\1\u0177\5\u0152\1\u0155\6\u0152\1\0\42\u0152"+
    "\25\u014e\1\222\3\u014e\1\u0153\6\u014e\1\0\42\u014e\25\u0152"+
    "\1\222\3\u0152\1\u0155\6\u0152\1\0\42\u0152";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16348];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\11\1\3\11\2\1\3\11\12\1\12\11"+
    "\46\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\11\2\1\1\11\2\1\3\11\2\1\2\11"+
    "\1\1\3\11\1\0\1\11\1\1\5\11\2\1\3\0"+
    "\1\1\1\0\7\11\3\1\1\11\1\0\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\7\11\2\0\1\1\3\0\1\1\1\0\13\1"+
    "\1\0\25\1\5\0\7\1\1\0\3\11\2\0\4\11"+
    "\1\0\3\1\1\0\3\1\2\0\4\1\1\11\3\0"+
    "\1\11\2\0\2\11\11\0\1\11\66\0\1\1\3\0"+
    "\1\1\6\0\1\1\2\0\1\1\1\0\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Token yyval;
	private Token tokenAux;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	
	/*Atributos para interpolar*/
	private StringBuilder buffer;
	private Character sepBlock;
	private char sep;
	private int stack;
	private int sepN;
	private boolean interpola;
	private int estadoReturn;
	private int analisisTipo;
	private int flag;
	private boolean isVar;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() != 0){
			tokens.add(yyval);
		}
		//Añadimos final de fichero
		token("EOF",0);
		tokens.add(yyval);
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}

	/**
	 * Función invocada en caso de error
	 */	
	private void error(){
		token(0);
		gestorErrores.error(Errores.CARACTER_INVALIDO, yyval, yytext());	
		yybegin(YYINITIAL);
	}

	/**
	 * Analiza el interior de una expresion delimitada
	 *
	 * @param analisisTipo Tipo de tokens a retornar
	 * @param estadoReturn Estado de cambio al terminar
	 * @param sepN Numero de delimitadores
	 * @param interpola Interpolar las variables
	 */	
	private void analizar(int analisisTipo, int estadoReturn, int sepN, Character sep, boolean interpola){
		stack=0;
		tokenAux=null;
		this.analisisTipo = analisisTipo;
		this.estadoReturn = estadoReturn;
		this.sepN = sepN;
		this.interpola = interpola;	
		if(sep==null){
			yybegin(DELIMITADOR);	
		}else{
			this.sep=sep;
			yybegin(ANALISIS);			
		}
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return token('*');
          }
        case 111: break;
        case 106: 
          { return token(yytext(), Preprocesador.PD_VAR, true);
          }
        case 112: break;
        case 5: 
          { return token('+');
          }
        case 113: break;
        case 46: 
          { yypushback(1);yybegin(ANALISIS);return token(Parser.EXP_SEP);
          }
        case 114: break;
        case 100: 
          { return token(Parser.LAND_IGUAL);
          }
        case 115: break;
        case 66: 
          { return token(Parser.MAS_MAS);
          }
        case 116: break;
        case 33: 
          { return token(',');
          }
        case 117: break;
        case 49: 
          { yybegin(ANALISIS_ACCESO_INDEX);if(isVar)return token(yycharat(0));
          }
        case 118: break;
        case 59: 
          { analizar(Parser.SEP, REX_MOD, 3, null, true);return token(Parser.S_REX);
          }
        case 119: break;
        case 6: 
          { return token('-');
          }
        case 120: break;
        case 104: 
          { String t = yytext(); 
							Integer tipo = PalabrasReservadas.buscarEtiqueta(t);
							if (tipo == null){
								buffer.append(t);
								token(t, 0);
								gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);
							}else{
								return token(t, tipo, true);
							}
          }
        case 121: break;
        case 105: 
          { return token(yytext(), Preprocesador.PD_NUM, true);
          }
        case 122: break;
        case 4: 
          { return token('.');
          }
        case 123: break;
        case 36: 
          { return token('\\');
          }
        case 124: break;
        case 45: 
          { char c = yycharat(0);
							boolean c2 = false;
							if(yylength()>1){ 
								char cc=yycharat(1);
								if(cc=='{' && yylength()>2){
									cc=yycharat(2);
								}
								if(interpola && (c == '$' || c == '@')){
									if(PalabrasReservadas.isPerlSpecialVar(cc) && sep!=cc){
										token(0);
										gestorErrores.error(Errores.AVISO,Errores.VARIABLE_IGNORADA, yyval, yytext().substring(0, 2));
									}
								}
								yypushback(yylength()-1);	
								c2 = (cc >= 'A' && cc <= 'Z') || (cc >= 'a' && cc <= 'z') || cc=='_';								
							}	
							if((c == sep && stack==0) || (interpola && c2 && (c == '$' || c == '@'))){
								if(tokenAux!=null){
									yyval=tokenAux;
									tokenAux=null;
									yypushback(1);
									yyval.setValor(buffer.toString());
									return yyval.getTipo();								
								}else if(c == sep){
									sepN--;
									token(analisisTipo);
									if(sepN>0 && sepBlock!=null){
										yybegin(DELIMITADOR_DOBLE);
									}else {
										if(sepN==0){
											yybegin(estadoReturn);
										}
										return yyval.getTipo();
									}
									
								}else{
									if(flag==0){
										flag++;
										yypushback(1);return token(Parser.EXP_SEP);
									}else{
										flag=0;
									}
									isVar=false;
									yybegin(ANALISIS_VAR);return token(c);
								}
							}else{
								if(sepBlock!=null){
									if(c == sepBlock){
										stack++;
									}else if(c == sep && stack!=0){
										stack--;							
									}								
								}
								if(tokenAux==null){
									token(Parser.TEXTO);
									tokenAux=yyval;
									buffer.setLength(0);
								}
								buffer.append(yytext());						
							}
          }
        case 125: break;
        case 31: 
          { return token('{');
          }
        case 126: break;
        case 77: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QR);
          }
        case 127: break;
        case 21: 
          { return token('/');
          }
        case 128: break;
        case 22: 
          { return token('|');
          }
        case 129: break;
        case 57: 
          { analizar(Parser.SEP, REX_MOD, 1, '"', true);return token(Parser.SEP);
          }
        case 130: break;
        case 78: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QQ);
          }
        case 131: break;
        case 47: 
          { isVar=true;return token(Parser.VAR);
          }
        case 132: break;
        case 42: 
          { yybegin(YYINITIAL);
							tokenAux.setValor(buffer.toString());
							if(!tokenAux.getValor().trim().isEmpty()){
								yyval=tokenAux;
								return tokenAux.getTipo();
							}
          }
        case 133: break;
        case 55: 
          { if(yylength()>1){yypushback(1);return token(Parser.TEXTO);}yybegin(ANALISIS_ACCESO_INDEX);return token(yycharat(0));
          }
        case 134: break;
        case 32: 
          { return token('}');
          }
        case 135: break;
        case 64: 
          { return token(Parser.DOS_PUNTOS);
          }
        case 136: break;
        case 54: 
          { yybegin(ANALISIS_ACCESO);if(isVar)return token(yycharat(0));
          }
        case 137: break;
        case 76: 
          { return token(Parser.AMBITO);
          }
        case 138: break;
        case 23: 
          { return token('~');
          }
        case 139: break;
        case 98: 
          { return token(Parser.NUM_CMP);
          }
        case 140: break;
        case 11: 
          { yybegin(VAR);return token('$');
          }
        case 141: break;
        case 38: 
          { return token(Parser.VAR);
          }
        case 142: break;
        case 13: 
          { yybegin(VAR);return token('%');
          }
        case 143: break;
        case 70: 
          { return token(Parser.MENOS_IGUAL);
          }
        case 144: break;
        case 99: 
          { return token(Parser.DESP_D_IGUAL);
          }
        case 145: break;
        case 18: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.Q);
          }
        case 146: break;
        case 29: 
          { return token('[');
          }
        case 147: break;
        case 9: 
          { yybegin(PD);token("", Parser.COMENTARIO, true);
							tokenAux=yyval;buffer.setLength(0);
          }
        case 148: break;
        case 89: 
          { return token(Parser.OR_IGUAL);
          }
        case 149: break;
        case 85: 
          { return token(Parser.MULTI_IGUAL);
          }
        case 150: break;
        case 82: 
          { return token(Parser.LAND);
          }
        case 151: break;
        case 30: 
          { return token(']');
          }
        case 152: break;
        case 63: 
          { return token(Parser.DECIMAL);
          }
        case 153: break;
        case 56: 
          { analizar(Parser.SEP, REX_MOD, 2, null, true);return token(Parser.M_REX);
          }
        case 154: break;
        case 24: 
          { return token('^');
          }
        case 155: break;
        case 74: 
          { return token(Parser.NUM_GE);
          }
        case 156: break;
        case 3: 
          { return token(Parser.ENTERO);
          }
        case 157: break;
        case 44: 
          { if(yycharat(0) == sepBlock){
								yybegin(ANALISIS);
								yyval.setValor(""+sep+sepBlock); 
								return yyval.getTipo();}else{error();
							}
          }
        case 158: break;
        case 69: 
          { return token(Parser.FLECHA);
          }
        case 159: break;
        case 14: 
          { return token(':');
          }
        case 160: break;
        case 1: 
          { error();
          }
        case 161: break;
        case 62: 
          { yybegin(YYINITIAL);return token(Parser.REX_MOD);
          }
        case 162: break;
        case 35: 
          { return token(';');
          }
        case 163: break;
        case 15: 
          { analizar('\'', YYINITIAL, 1, '\'', false);return token('\'');
          }
        case 164: break;
        case 87: 
          { return token(Parser.DIV_IGUAL);
          }
        case 165: break;
        case 67: 
          { return token(Parser.MAS_IGUAL);
          }
        case 166: break;
        case 88: 
          { return token(Parser.LOR);
          }
        case 167: break;
        case 79: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.QW);
          }
        case 168: break;
        case 7: 
          { return token('<');
          }
        case 169: break;
        case 41: 
          { buffer.append(yytext());
          }
        case 170: break;
        case 102: 
          { return token(Parser.DLOR_IGUAL);
          }
        case 171: break;
        case 83: 
          { return token(Parser.AND_IGUAL);
          }
        case 172: break;
        case 50: 
          { yybegin(ANALISIS);yypushback(1);error();
          }
        case 173: break;
        case 26: 
          { return token('=');
          }
        case 174: break;
        case 72: 
          { return token(Parser.NUM_LE);
          }
        case 175: break;
        case 53: 
          { yybegin(ANALISIS_ACCESO_INDEX_STR);return token(yycharat(0));
          }
        case 176: break;
        case 17: 
          { analizar('`',  YYINITIAL, 1, '`',  true); return token('`');
          }
        case 177: break;
        case 61: 
          { yybegin(YYINITIAL);yypushback(1);
          }
        case 178: break;
        case 8: 
          { return token('>');
          }
        case 179: break;
        case 34: 
          { return token('?');
          }
        case 180: break;
        case 84: 
          { return token(Parser.POW);
          }
        case 181: break;
        case 93: 
          { return token(Parser.NUM_NE);
          }
        case 182: break;
        case 52: 
          { return token('@');
          }
        case 183: break;
        case 97: 
          { return token(Parser.DESP_I_IGUAL);
          }
        case 184: break;
        case 90: 
          { return token(Parser.SMART_EQ);
          }
        case 185: break;
        case 86: 
          { return token(Parser.DLOR);
          }
        case 186: break;
        case 19: 
          { yybegin(FUN);return token('&');
          }
        case 187: break;
        case 92: 
          { yybegin(REX_T);return token(Parser.STR_NO_REX);
          }
        case 188: break;
        case 91: 
          { return token(Parser.XOR_IGUAL);
          }
        case 189: break;
        case 109: 
          { yybegin(YYINITIAL);
          }
        case 190: break;
        case 58: 
          { analizar(Parser.SEP, REX_MOD, 1, '/', true);return token(Parser.SEP);
          }
        case 191: break;
        case 60: 
          { analizar(Parser.SEP, REX_MOD, 3, null, false);return token(Parser.Y_REX);
          }
        case 192: break;
        case 75: 
          { return token(Parser.MOD_IGUAL);
          }
        case 193: break;
        case 71: 
          { return token(Parser.DESP_I);
          }
        case 194: break;
        case 48: 
          { yypushback(1);yybegin(ANALISIS_ACCESO);
          }
        case 195: break;
        case 25: 
          { return token('!');
          }
        case 196: break;
        case 68: 
          { return token(Parser.MENOS_MENOS);
          }
        case 197: break;
        case 2: 
          { String txt = yytext(); 
						int tipo = PalabrasReservadas.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
          }
        case 198: break;
        case 107: 
          { return token(Parser.LINEA_JAVA);
          }
        case 199: break;
        case 43: 
          { yybegin(ANALISIS);
							sepN--;
							sep=yycharat(0);
							switch(sep){
								case '(': sepBlock='('; sep=')'; break;
								case '{': sepBlock='{'; sep='}'; break;
								case '[': sepBlock='['; sep=']'; break;
								case '\'': interpola=false; break;
								default: sepBlock=null;
							}
							return token(analisisTipo);
          }
        case 200: break;
        case 39: 
          { return token('#');
          }
        case 201: break;
        case 37: 
          { yypushback(1);yybegin(YYINITIAL);
          }
        case 202: break;
        case 51: 
          { return token('$');
          }
        case 203: break;
        case 94: 
          { yybegin(REX_T);return token(Parser.STR_REX);
          }
        case 204: break;
        case 40: 
          { return token(Parser.ID);
          }
        case 205: break;
        case 110: 
          { yybegin(IGNORAR);
          }
        case 206: break;
        case 101: 
          { return token(Parser.POW_IGUAL);
          }
        case 207: break;
        case 73: 
          { return token(Parser.DESP_D);
          }
        case 208: break;
        case 103: 
          { return token(Parser.LOR_IGUAL);
          }
        case 209: break;
        case 81: 
          { return token(Parser.X_IGUAL);
          }
        case 210: break;
        case 80: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QX);
          }
        case 211: break;
        case 12: 
          { yybegin(VAR);return token('@');
          }
        case 212: break;
        case 96: 
          { if(yylength()==3) yypushback(1);
							if(tokenAux==null){
								token(Parser.TEXTO);
								tokenAux=yyval;buffer.setLength(0);
							}
							buffer.append(yytext());
          }
        case 213: break;
        case 95: 
          { return token(Parser.NUM_EQ);
          }
        case 214: break;
        case 27: 
          { return token('(');
          }
        case 215: break;
        case 108: 
          { return token(Parser.IMPORT_JAVA);
          }
        case 216: break;
        case 28: 
          { return token(')');
          }
        case 217: break;
        case 65: 
          { return token(Parser.CONCAT_IGUAL);
          }
        case 218: break;
        case 16: 
          { analizar('"',  YYINITIAL, 1, '"',  true); return token('"');
          }
        case 219: break;
        case 10: 
          { 
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
