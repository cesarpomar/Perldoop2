/* The following code was generated by JFlex 1.4.3 on 6/06/17 18:37 */

package perldoop.lexico;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import perldoop.modelo.lexico.Token;
import perldoop.sintactico.Parser;
import perldoop.preprocesador.Preprocesador;
import perldoop.error.GestorErrores;
import perldoop.internacionalizacion.Errores;
import perldoop.modelo.Opciones;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/06/17 18:37 from the specification file
 * <tt>lexer.l</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ANALISIS_ACCESO = 18;
  public static final int ANALISIS_ACCESO_INDEX = 20;
  public static final int PD = 6;
  public static final int FUN = 4;
  public static final int REX_T = 24;
  public static final int REX_MOD = 26;
  public static final int DELIMITADOR_DOBLE = 12;
  public static final int ANALISIS_ACCESO_INDEX_STR = 22;
  public static final int VAR = 2;
  public static final int ANALISIS_VAR = 16;
  public static final int IGNORAR = 8;
  public static final int YYINITIAL = 0;
  public static final int ANALISIS = 14;
  public static final int DELIMITADOR = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\40\2\0\1\101\23\0\1\61\1\46\1\31\1\41\1\43"+
    "\1\53\1\45\1\63\1\64\1\54\1\13\1\71\1\14\1\11\1\55"+
    "\1\2\1\10\6\6\2\3\1\44\1\73\1\15\1\62\1\25\1\72"+
    "\1\42\1\5\1\7\2\5\1\12\1\5\21\1\1\4\2\1\1\65"+
    "\1\74\1\66\1\60\1\1\1\47\1\33\1\26\1\27\1\100\1\23"+
    "\1\100\1\17\1\77\1\16\1\32\1\30\1\24\1\35\1\20\1\21"+
    "\1\36\1\50\1\22\1\75\1\37\1\77\1\34\1\51\1\52\1\76"+
    "\1\77\1\67\1\56\1\70\1\57\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\1\1\2\2\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\2\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\44\1\47\2\50\1\51"+
    "\2\52\1\53\1\54\2\55\1\56\1\57\1\56\1\60"+
    "\1\61\1\62\2\3\1\63\1\64\1\62\1\65\1\66"+
    "\1\67\1\0\1\70\1\1\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\3\3\0\1\77\1\0\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\0\1\52\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
    "\2\0\1\3\3\0\1\77\1\0\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\0\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\5\0\1\55"+
    "\1\140\1\3\1\67\2\3\1\77\1\0\1\141\1\142"+
    "\1\143\2\0\1\144\1\145\1\146\1\147\1\0\2\3"+
    "\1\77\1\0\1\141\1\142\1\143\2\0\1\144\1\145"+
    "\1\146\1\147\1\150\3\0\1\151\2\0\1\55\1\140"+
    "\11\0\1\152\66\0\1\153\3\0\1\153\6\0\1\153"+
    "\2\0\1\154\1\0\1\154\1\153\1\155\2\156\1\154"+
    "\1\153\1\156\1\154\1\153\1\156\1\154\1\153\1\156"+
    "\1\154\1\153\1\156\1\154\1\153\1\156\1\154\1\153"+
    "\1\156\1\154\1\153\1\156\1\154\1\153\1\156\1\154"+
    "\1\153\1\156\1\154\1\153\1\156\1\154\1\153\1\156"+
    "\1\154\1\156\1\154\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u03de\0\u03de\0\u0672\0\u06b4\0\u03de\0\u03de\0\u03de"+
    "\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4"+
    "\0\u0906\0\u0948\0\u03de\0\u03de\0\u03de\0\u03de\0\u03de\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u03de\0\u098a\0\u09cc\0\u0a0e\0\u0a50"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u098a\0\u098a"+
    "\0\u0c1e\0\u0c60\0\u098a\0\u098a\0\u098a\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u098a"+
    "\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a"+
    "\0\u098a\0\u03de\0\u0f36\0\u03de\0\u06b4\0\u0f78\0\u03de\0\u0fba"+
    "\0\u03de\0\u03de\0\u0ffc\0\u03de\0\u03de\0\u103e\0\u1080\0\u03de"+
    "\0\u10c2\0\u06b4\0\u03de\0\u03de\0\u03de\0\u1104\0\u1146\0\u03de"+
    "\0\u03de\0\u06b4\0\u03de\0\u03de\0\u03de\0\u1188\0\u03de\0\u11ca"+
    "\0\u03de\0\u03de\0\u03de\0\u03de\0\u03de\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u03de\0\u03de\0\u03de\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u13da\0\u141c\0\u145e\0\u03de\0\u14a0"+
    "\0\u14e2\0\u03de\0\u03de\0\u0420\0\u0420\0\u0420\0\u0420\0\u03de"+
    "\0\u1524\0\u03de\0\u1566\0\u03de\0\u15a8\0\u03de\0\u15ea\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u03de\0\u03de\0\u03de\0\u098a\0\u162c"+
    "\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u098a\0\u098a"+
    "\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u17fa\0\u183c\0\u187e"+
    "\0\u098a\0\u18c0\0\u098a\0\u098a\0\u09cc\0\u09cc\0\u09cc\0\u09cc"+
    "\0\u098a\0\u1902\0\u098a\0\u1944\0\u098a\0\u1986\0\u098a\0\u19c8"+
    "\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u098a\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u0318"+
    "\0\u12d2\0\u1314\0\u1c1a\0\u1c5c\0\u03de\0\u03de\0\u03de\0\u1c9e"+
    "\0\u1ce0\0\u03de\0\u03de\0\u03de\0\u03de\0\u1d22\0\u16f2\0\u1734"+
    "\0\u1d64\0\u1da6\0\u098a\0\u098a\0\u098a\0\u1de8\0\u1e2a\0\u098a"+
    "\0\u098a\0\u098a\0\u098a\0\u03de\0\u1e6c\0\u1eae\0\u1ef0\0\u03de"+
    "\0\u1f32\0\u1f74\0\u03de\0\u03de\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u03de\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea"+
    "\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\2\21\1\23\1\21\1\23"+
    "\1\24\1\21\1\25\1\26\1\27\7\21\1\30\3\21"+
    "\1\31\6\21\1\20\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\21\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\4\21"+
    "\1\20\1\65\1\66\1\67\1\70\2\66\1\70\1\66"+
    "\1\70\1\71\1\66\1\72\1\73\1\74\7\66\1\75"+
    "\3\66\1\76\6\66\1\20\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\66\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\4\66\1\65\1\132\1\133\2\132\2\133\1\132\1\133"+
    "\2\132\1\133\3\132\7\133\1\132\3\133\1\134\6\133"+
    "\4\132\1\135\3\132\3\133\22\132\4\133\2\132\1\136"+
    "\2\132\2\136\1\132\1\136\2\132\1\136\3\132\7\136"+
    "\1\132\3\136\1\132\6\136\4\132\1\135\3\132\3\136"+
    "\22\132\4\136\1\132\15\137\1\140\22\137\1\141\40\137"+
    "\16\142\1\143\64\142\40\144\1\0\34\144\1\142\4\144"+
    "\102\145\74\146\1\147\5\146\1\150\1\151\2\150\2\151"+
    "\1\150\1\151\2\150\1\151\3\150\7\151\1\150\3\151"+
    "\1\134\6\151\4\150\1\152\3\150\3\151\12\150\1\153"+
    "\1\150\1\153\5\150\4\151\66\150\1\154\1\150\1\154"+
    "\12\150\1\155\1\133\1\156\1\157\2\133\1\157\1\133"+
    "\1\157\1\155\1\133\3\155\7\133\1\155\3\133\1\134"+
    "\6\133\1\155\1\160\1\161\1\155\1\162\1\163\2\155"+
    "\3\133\13\155\1\164\1\155\1\164\4\155\4\133\1\155"+
    "\45\15\1\165\26\15\1\166\5\15\35\20\1\167\1\20"+
    "\1\170\6\20\1\171\6\20\1\172\17\20\1\173\1\174"+
    "\3\20\16\175\7\176\1\175\3\176\1\175\6\176\10\175"+
    "\3\176\22\175\4\176\1\175\103\0\10\21\1\0\1\21"+
    "\3\0\7\21\1\0\3\21\1\0\6\21\10\0\3\21"+
    "\22\0\4\21\3\0\1\177\1\200\1\201\1\0\1\177"+
    "\1\202\1\177\1\203\14\0\1\202\23\0\1\201\31\0"+
    "\2\23\2\0\1\23\1\0\1\23\1\203\1\204\10\0"+
    "\1\204\60\0\2\203\2\0\1\203\1\0\1\203\1\205"+
    "\50\0\1\206\32\0\1\207\46\0\1\210\33\0\1\211"+
    "\10\0\1\212\34\0\1\213\34\0\1\214\44\0\1\215"+
    "\44\0\1\216\34\0\1\217\34\0\1\220\43\0\1\221"+
    "\102\0\1\222\63\0\1\223\36\0\10\21\1\0\1\21"+
    "\3\0\4\21\1\224\2\21\1\0\3\21\1\0\6\21"+
    "\10\0\1\225\1\226\1\227\22\0\4\21\2\0\10\21"+
    "\1\0\1\21\3\0\7\21\1\0\3\21\1\0\6\21"+
    "\10\0\3\21\7\0\1\230\12\0\4\21\54\0\1\231"+
    "\6\0\1\232\73\0\1\233\5\0\1\234\74\0\1\235"+
    "\4\0\1\236\75\0\1\237\3\0\1\240\76\0\1\241"+
    "\104\0\1\242\76\0\1\243\2\0\1\244\44\0\1\61"+
    "\31\0\1\245\2\0\1\246\17\0\31\247\1\250\6\247"+
    "\1\0\42\247\10\66\1\247\1\66\3\247\7\66\1\247"+
    "\3\66\1\250\6\66\1\0\7\247\3\66\22\247\4\66"+
    "\3\247\1\251\1\252\1\253\1\247\1\251\1\254\1\251"+
    "\1\255\14\247\1\254\2\247\1\250\6\247\1\0\11\247"+
    "\1\253\31\247\2\70\2\247\1\70\1\247\1\70\1\255"+
    "\1\256\10\247\1\256\5\247\1\250\6\247\1\0\43\247"+
    "\2\255\2\247\1\255\1\247\1\255\1\257\17\247\1\250"+
    "\6\247\1\0\21\247\1\260\32\247\1\261\15\247\1\250"+
    "\6\247\1\0\21\247\1\262\33\247\1\263\10\247\1\264"+
    "\3\247\1\250\6\247\1\0\21\247\1\265\34\247\1\266"+
    "\13\247\1\250\6\247\1\0\21\247\1\267\44\247\1\270"+
    "\3\247\1\250\6\247\1\0\21\247\1\271\34\247\1\272"+
    "\13\247\1\250\6\247\1\0\20\247\1\221\51\247\1\250"+
    "\6\247\1\0\21\247\1\273\50\247\1\250\6\247\1\0"+
    "\3\247\1\274\36\247\10\66\1\247\1\66\3\247\4\66"+
    "\1\275\2\66\1\247\3\66\1\250\6\66\1\0\7\247"+
    "\1\276\1\277\1\300\22\247\4\66\2\247\10\66\1\247"+
    "\1\66\3\247\7\66\1\247\3\66\1\250\6\66\1\0"+
    "\7\247\3\66\7\247\1\301\12\247\4\66\32\247\1\250"+
    "\6\247\1\0\12\247\1\302\6\247\1\303\50\247\1\250"+
    "\6\247\1\0\13\247\1\304\5\247\1\305\50\247\1\250"+
    "\6\247\1\0\14\247\1\306\4\247\1\307\50\247\1\250"+
    "\6\247\1\0\15\247\1\310\3\247\1\311\50\247\1\250"+
    "\6\247\1\0\16\247\1\312\53\247\1\250\6\247\1\0"+
    "\21\247\1\313\50\247\1\250\6\247\1\0\16\247\1\314"+
    "\2\247\1\315\44\247\1\126\3\247\1\250\6\247\1\0"+
    "\16\247\1\316\2\247\1\317\17\247\1\0\10\133\1\0"+
    "\1\133\3\0\7\133\1\0\3\133\1\0\6\133\10\0"+
    "\3\133\22\0\4\133\2\0\10\136\1\0\1\136\3\0"+
    "\7\136\1\0\3\136\1\0\6\136\10\0\3\136\22\0"+
    "\4\136\2\0\1\320\1\321\1\322\2\320\1\322\1\320"+
    "\1\322\1\0\1\320\3\0\7\320\1\0\3\320\1\0"+
    "\6\320\1\0\3\323\4\0\3\320\22\0\4\320\17\0"+
    "\1\324\63\0\40\325\1\0\41\325\102\326\1\0\10\151"+
    "\1\0\1\151\3\0\7\151\1\0\3\151\1\0\6\151"+
    "\10\0\3\151\22\0\4\151\3\0\1\327\1\0\1\201"+
    "\1\0\1\327\1\202\1\327\15\0\1\202\23\0\1\201"+
    "\31\0\2\157\2\0\1\157\1\0\1\157\71\0\45\15"+
    "\1\330\26\15\1\166\5\15\22\0\1\174\75\0\7\176"+
    "\1\0\3\176\1\0\6\176\10\0\3\176\22\0\4\176"+
    "\3\0\1\177\1\200\2\0\1\177\1\0\1\177\1\203"+
    "\72\0\2\200\2\0\1\200\1\0\1\200\1\203\72\0"+
    "\2\331\1\0\4\331\1\0\1\331\10\0\1\331\2\0"+
    "\2\331\3\0\1\331\44\0\1\331\3\0\1\332\5\0"+
    "\1\332\73\0\2\203\2\0\1\203\1\0\1\203\1\0"+
    "\1\204\10\0\1\204\61\0\1\333\2\0\1\333\1\0"+
    "\1\333\2\0\1\334\150\0\1\335\44\0\1\336\136\0"+
    "\1\337\35\0\1\340\13\0\1\341\47\0\40\221\1\0"+
    "\41\221\62\0\1\342\101\0\1\343\101\0\1\344\101\0"+
    "\1\345\17\0\15\247\1\346\13\247\1\250\6\247\1\0"+
    "\43\247\1\251\1\252\2\247\1\251\1\247\1\251\1\255"+
    "\17\247\1\250\6\247\1\0\43\247\2\252\2\247\1\252"+
    "\1\247\1\252\1\255\17\247\1\250\6\247\1\0\43\247"+
    "\2\347\1\247\4\347\1\247\1\347\10\247\1\347\2\247"+
    "\2\347\1\247\1\250\1\247\1\347\4\247\1\0\37\247"+
    "\1\347\3\247\1\350\5\247\1\350\20\247\1\250\6\247"+
    "\1\0\43\247\2\255\2\247\1\255\1\247\1\255\1\247"+
    "\1\256\10\247\1\256\5\247\1\250\6\247\1\0\44\247"+
    "\1\351\2\247\1\351\1\247\1\351\2\247\1\352\15\247"+
    "\1\250\6\247\1\0\72\247\1\250\6\247\1\0\21\247"+
    "\1\353\44\247\1\354\3\247\1\250\6\247\1\0\72\247"+
    "\1\250\6\247\1\0\21\247\1\355\35\247\1\356\12\247"+
    "\1\250\1\357\5\247\1\0\72\247\1\250\6\247\1\0"+
    "\21\247\1\360\50\247\1\250\6\247\1\0\21\247\1\361"+
    "\50\247\1\250\6\247\1\0\21\247\1\362\50\247\1\250"+
    "\6\247\1\0\21\247\1\363\17\247\1\0\10\320\1\0"+
    "\1\320\3\0\7\320\1\364\3\320\1\0\6\320\10\0"+
    "\3\320\22\0\4\320\3\0\1\365\1\0\1\366\1\0"+
    "\1\365\1\367\1\365\14\0\1\370\1\367\23\0\1\366"+
    "\31\0\2\322\2\0\1\322\1\0\1\322\14\0\1\370"+
    "\55\0\1\371\2\0\2\371\1\0\1\371\2\0\1\371"+
    "\3\0\7\371\1\0\3\371\1\0\6\371\10\0\3\371"+
    "\22\0\4\371\20\0\1\372\62\0\40\373\1\0\41\373"+
    "\40\374\1\0\41\374\2\0\1\327\3\0\1\327\1\0"+
    "\1\327\73\0\2\333\2\0\1\333\1\0\1\333\105\0"+
    "\1\375\104\0\1\376\115\0\1\377\46\0\16\247\1\u0100"+
    "\12\247\1\250\6\247\1\0\43\247\2\351\2\247\1\351"+
    "\1\247\1\351\20\247\1\250\6\247\1\0\55\247\1\u0101"+
    "\14\247\1\250\6\247\1\0\60\247\1\u0102\11\247\1\250"+
    "\6\247\1\0\72\247\1\250\1\247\1\u0103\4\247\1\0"+
    "\41\247\2\0\1\365\3\0\1\365\1\0\1\365\14\0"+
    "\1\370\56\0\2\u0104\1\0\4\u0104\1\0\1\u0104\10\0"+
    "\1\u0104\2\0\2\u0104\3\0\1\u0104\44\0\1\u0104\3\0"+
    "\1\u0105\5\0\1\u0105\72\0\10\371\1\0\1\371\3\0"+
    "\7\371\1\u0106\3\371\1\0\6\371\10\0\3\371\22\0"+
    "\4\371\21\0\1\u0107\64\0\1\333\2\0\1\333\1\0"+
    "\1\333\111\0\1\u0108\115\0\1\u0109\45\0\17\247\1\u010a"+
    "\11\247\1\250\6\247\1\0\44\247\1\351\2\247\1\351"+
    "\1\247\1\351\20\247\1\250\6\247\1\0\61\247\1\u010b"+
    "\10\247\1\250\6\247\1\0\72\247\1\250\2\247\1\u010c"+
    "\3\247\1\0\41\247\2\0\2\u0104\1\0\4\u0104\1\0"+
    "\1\u0104\10\0\1\u0104\1\0\1\370\2\u0104\3\0\1\u0104"+
    "\44\0\1\u0104\3\0\1\u0105\5\0\1\u0105\14\0\1\370"+
    "\75\0\1\u010d\101\0\1\u010e\113\0\1\u010f\46\0\20\247"+
    "\1\u0110\10\247\1\250\6\247\1\0\62\247\1\u0111\7\247"+
    "\1\250\6\247\1\0\72\247\1\250\1\247\1\u0112\4\247"+
    "\1\0\41\247\22\0\1\u0113\101\0\1\u0114\73\0\1\u0115"+
    "\65\0\21\247\1\u0116\7\247\1\250\6\247\1\0\63\247"+
    "\1\u0117\6\247\1\250\6\247\1\0\55\247\1\u0118\14\247"+
    "\1\250\6\247\1\0\41\247\23\0\1\u0119\101\0\1\u011a"+
    "\74\0\1\u011b\5\0\1\u011c\55\0\22\247\1\u011d\6\247"+
    "\1\250\6\247\1\0\64\247\1\u011e\5\247\1\250\6\247"+
    "\1\0\57\247\1\u011f\5\247\1\u0120\4\247\1\250\6\247"+
    "\1\0\41\247\14\0\1\u0121\101\0\1\u0122\122\0\1\u0123"+
    "\62\0\1\u0124\63\0\23\247\1\u0125\5\247\1\250\6\247"+
    "\1\0\55\247\1\u0126\14\247\1\250\6\247\1\0\72\247"+
    "\1\250\3\247\1\u0127\2\247\1\0\57\247\1\u0128\12\247"+
    "\1\250\6\247\1\0\41\247\26\0\1\u0129\101\0\1\u012a"+
    "\111\0\1\u012b\63\0\1\u012c\61\0\14\247\1\u012d\14\247"+
    "\1\250\6\247\1\0\65\247\1\u012e\1\247\1\u012f\2\247"+
    "\1\250\6\247\1\0\72\247\1\250\4\247\1\u0130\1\247"+
    "\1\0\61\247\1\u0131\10\247\1\250\6\247\1\0\41\247"+
    "\24\0\1\u0132\101\0\1\u0133\76\0\1\u0134\103\0\1\u0135"+
    "\56\0\24\247\1\u012e\4\247\1\250\6\247\1\0\57\247"+
    "\1\u0136\12\247\1\250\6\247\1\0\65\247\1\u0137\4\247"+
    "\1\250\6\247\1\0\62\247\1\u0138\7\247\1\250\6\247"+
    "\1\0\64\247\1\u0139\5\247\1\250\6\247\1\0\41\247"+
    "\21\0\1\u013a\101\0\1\u013b\102\0\1\u013c\104\0\1\u013d"+
    "\54\0\20\247\1\u013e\10\247\1\250\6\247\1\0\62\247"+
    "\1\u013f\7\247\1\250\6\247\1\0\63\247\1\u0140\6\247"+
    "\1\250\6\247\1\0\66\247\1\u0141\3\247\1\250\6\247"+
    "\1\0\41\247\27\0\1\u0142\101\0\1\u0143\111\0\1\u0144"+
    "\42\0\40\u013d\1\0\41\u013d\23\247\1\u0145\5\247\1\250"+
    "\6\247\1\0\70\247\1\u0146\1\247\1\250\6\247\1\0"+
    "\72\247\1\250\5\247\1\u0147\1\0\41\247\31\u0141\1\u0148"+
    "\6\u0141\1\0\41\u0141\30\0\1\u0149\101\0\1\u014a\76\0"+
    "\1\u014b\54\0\25\247\1\221\3\247\1\250\6\247\1\0"+
    "\71\247\1\u014c\1\250\6\247\1\0\66\247\1\u014d\3\247"+
    "\1\250\6\247\1\0\41\247\15\u0141\1\u014e\13\u0141\1\u0148"+
    "\6\u0141\1\0\41\u0141\25\0\1\u014f\101\0\1\u0150\54\0"+
    "\40\u014b\1\0\41\u014b\25\247\1\u0151\3\247\1\250\6\247"+
    "\1\0\41\247\31\u014d\1\u0152\6\u014d\1\0\41\u014d\16\u0141"+
    "\1\u0153\12\u0141\1\u0148\6\u0141\1\0\41\u0141\40\u014f\1\0"+
    "\41\u014f\40\u0150\1\0\41\u0150\31\u0151\1\u0154\6\u0151\1\0"+
    "\41\u0151\15\u014d\1\u0155\13\u014d\1\u0152\6\u014d\1\0\41\u014d"+
    "\17\u0141\1\u0156\11\u0141\1\u0148\6\u0141\1\0\41\u0141\15\u0151"+
    "\1\u0157\13\u0151\1\u0154\6\u0151\1\0\41\u0151\16\u014d\1\u0158"+
    "\12\u014d\1\u0152\6\u014d\1\0\41\u014d\20\u0141\1\u0159\10\u0141"+
    "\1\u0148\6\u0141\1\0\41\u0141\16\u0151\1\u015a\12\u0151\1\u0154"+
    "\6\u0151\1\0\41\u0151\17\u014d\1\u015b\11\u014d\1\u0152\6\u014d"+
    "\1\0\41\u014d\21\u0141\1\u015c\7\u0141\1\u0148\6\u0141\1\0"+
    "\41\u0141\17\u0151\1\u015d\11\u0151\1\u0154\6\u0151\1\0\41\u0151"+
    "\20\u014d\1\u015e\10\u014d\1\u0152\6\u014d\1\0\41\u014d\22\u0141"+
    "\1\u015f\6\u0141\1\u0148\6\u0141\1\0\41\u0141\20\u0151\1\u0160"+
    "\10\u0151\1\u0154\6\u0151\1\0\41\u0151\21\u014d\1\u0161\7\u014d"+
    "\1\u0152\6\u014d\1\0\41\u014d\23\u0141\1\u0162\5\u0141\1\u0148"+
    "\6\u0141\1\0\41\u0141\21\u0151\1\u0163\7\u0151\1\u0154\6\u0151"+
    "\1\0\41\u0151\22\u014d\1\u0164\6\u014d\1\u0152\6\u014d\1\0"+
    "\41\u014d\14\u0141\1\u0165\14\u0141\1\u0148\6\u0141\1\0\41\u0141"+
    "\22\u0151\1\u0166\6\u0151\1\u0154\6\u0151\1\0\41\u0151\23\u014d"+
    "\1\u0167\5\u014d\1\u0152\6\u014d\1\0\41\u014d\24\u0141\1\u0168"+
    "\4\u0141\1\u0148\6\u0141\1\0\41\u0141\23\u0151\1\u0169\5\u0151"+
    "\1\u0154\6\u0151\1\0\41\u0151\14\u014d\1\u016a\14\u014d\1\u0152"+
    "\6\u014d\1\0\41\u014d\16\u0141\1\u016b\12\u0141\1\u0148\6\u0141"+
    "\1\0\41\u0141\14\u0151\1\u016c\14\u0151\1\u0154\6\u0151\1\0"+
    "\41\u0151\24\u014d\1\u016d\4\u014d\1\u0152\6\u014d\1\0\41\u014d"+
    "\20\u0141\1\u016e\10\u0141\1\u0148\6\u0141\1\0\41\u0141\24\u0151"+
    "\1\u016f\4\u0151\1\u0154\6\u0151\1\0\41\u0151\16\u014d\1\u0170"+
    "\12\u014d\1\u0152\6\u014d\1\0\41\u014d\23\u0141\1\u0171\5\u0141"+
    "\1\u0148\6\u0141\1\0\41\u0141\16\u0151\1\u0172\12\u0151\1\u0154"+
    "\6\u0151\1\0\41\u0151\20\u014d\1\u0173\10\u014d\1\u0152\6\u014d"+
    "\1\0\41\u014d\25\u0141\1\221\3\u0141\1\u0148\6\u0141\1\0"+
    "\41\u0141\20\u0151\1\u0174\10\u0151\1\u0154\6\u0151\1\0\41\u0151"+
    "\23\u014d\1\u0175\5\u014d\1\u0152\6\u014d\1\0\41\u014d\23\u0151"+
    "\1\u0176\5\u0151\1\u0154\6\u0151\1\0\41\u0151\25\u014d\1\221"+
    "\3\u014d\1\u0152\6\u014d\1\0\41\u014d\25\u0151\1\221\3\u0151"+
    "\1\u0154\6\u0151\1\0\41\u0151";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\11\1\2\11\2\1\3\11\12\1\12\11"+
    "\45\1\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\2\11\2\1\1\11\2\1\3\11\2\1\2\11"+
    "\1\1\3\11\1\0\1\11\1\1\5\11\2\1\3\0"+
    "\1\1\1\0\7\11\3\1\1\11\1\0\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\7\11\2\0\1\1\3\0\1\1\1\0\13\1"+
    "\1\0\25\1\5\0\7\1\1\0\3\11\2\0\4\11"+
    "\1\0\3\1\1\0\3\1\2\0\4\1\1\11\3\0"+
    "\1\11\2\0\2\11\11\0\1\11\66\0\1\1\3\0"+
    "\1\1\6\0\1\1\2\0\1\1\1\0\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Token yyval;
	private Token tokenAux;
	private Opciones opciones;
	private GestorErrores gestorErrores;
	
	/*Atributos para interpolar*/
	private StringBuilder buffer;
	private Character sepBlock;
	private char sep;
	private int stack;
	private int sepN;
	private boolean interpola;
	private int estadoReturn;
	private int analisisTipo;
	private int flag;
	private boolean isVar;

	/**
	 * Constructor del analizador léxico
	 * @param in Sistema de entrada
	 * @param opciones Opciones
	 * @param gestorErrores Gestor de errores
	 */
	public Lexer(java.io.Reader in, Opciones opciones, GestorErrores gestorErrores){
		this(in);
		this.opciones = opciones;
		this.gestorErrores = gestorErrores;
		buffer = new StringBuilder(100);
	}

	/**
	 * Establece el gestor de errores
	 * @param gestorErrores Gestor de errores
	 */
	public void setGestorErrores(GestorErrores gestorErrores){
		this.gestorErrores = gestorErrores;
	}

	/**
	 * Obtiene el gestor de errores
	 * @return Gestor de errores
	 */
	public GestorErrores getGestorErrores(){
		return gestorErrores;
	}

	/**
	 * Obtiene las opciones
	 * @return Opciones
	 */
	public Opciones getOpciones() {
		return opciones;
	}

	/**
	 * Establece las opciones
	 * @param opciones Opciones
	 */
	public void setOpciones(Opciones opciones) {
		this.opciones = opciones;
	}

	/**
	 * Inicia el analisis lexico y la creacion de la lista de tokens. Una vez 
	 * terminado retorna una lista con todos los tokens del fichero.
	 * @return Lista de tokens
	 * @throws IOException Error durante la lectura del fichero
	 */
	public List<Token> getTokens() throws IOException{
		List<Token> tokens = new ArrayList<>(10000);
		while(yylex() != 0){
			tokens.add(yyval);
		}
		//Añadimos final de fichero
		token("EOF",0);
		tokens.add(yyval);
		return tokens;
	}

	/**
	 * Crea un token con token(yytext(), tipo, false)
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(int tipo){
		return token(yytext(),tipo,false);
	}

	/**
	 * Crea un token con token(valor, tipo, false)
	 * @param valor Valor
	 * @param tipo Tipo
	 * @return tipo
	 */
	private int token(String valor, int tipo){
		return token(valor,tipo,false);
	}

	/**
	 * Crea un token, la posición del mismo se obtiene
	 * directamente del analizador.
	 * @param valor Valor del token
	 * @param tipo Tipo de token
	 * @param isEtiqueta El token es etiqueta
	 * @return tipo
	 */
	private int token(String valor, int tipo, boolean isEtiqueta){
		yyval = new Token();
		yyval.setEtiqueta(isEtiqueta);
		yyval.setValor(valor);
		yyval.setTipo(tipo);
		yyval.setLinea(yyline);
		yyval.setColumna(yycolumn);
		yyval.setPosicion(yychar);
		return tipo;
	}

	/**
	 * Función invocada en caso de error
	 */	
	private void error(){
		token(0);
		gestorErrores.error(Errores.CARACTER_INVALIDO, yyval, yytext());	
		yybegin(YYINITIAL);
	}

	/**
	 * Analiza el interior de una expresion delimitada
	 *
	 * @param analisisTipo Tipo de tokens a retornar
	 * @param estadoReturn Estado de cambio al terminar
	 * @param sepN Numero de delimitadores
	 * @param interpola Interpolar las variables
	 */	
	private void analizar(int analisisTipo, int estadoReturn, int sepN, Character sep, boolean interpola){
		stack=0;
		tokenAux=null;
		this.analisisTipo = analisisTipo;
		this.estadoReturn = estadoReturn;
		this.sepN = sepN;
		this.interpola = interpola;	
		if(sep==null){
			yybegin(DELIMITADOR);	
		}else{
			this.sep=sep;
			yybegin(ANALISIS);			
		}
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return token('*');
          }
        case 111: break;
        case 106: 
          { return token(yytext(), Preprocesador.PD_VAR, true);
          }
        case 112: break;
        case 5: 
          { return token('+');
          }
        case 113: break;
        case 46: 
          { yypushback(1);yybegin(ANALISIS);return token(Parser.EXP_SEP);
          }
        case 114: break;
        case 100: 
          { return token(Parser.LAND_IGUAL);
          }
        case 115: break;
        case 66: 
          { return token(Parser.MAS_MAS);
          }
        case 116: break;
        case 32: 
          { return token(',');
          }
        case 117: break;
        case 49: 
          { yybegin(ANALISIS_ACCESO_INDEX);if(isVar)return token(yycharat(0));
          }
        case 118: break;
        case 59: 
          { analizar(Parser.SEP, REX_MOD, 3, null, true);return token(Parser.S_REX);
          }
        case 119: break;
        case 6: 
          { return token('-');
          }
        case 120: break;
        case 104: 
          { String t = yytext(); 
							Integer tipo = PalabrasReservadas.buscarEtiqueta(t);
							if (tipo == null){
								buffer.append(t);
								token(t, 0);
								gestorErrores.error(Errores.AVISO,Errores.ETIQUETA_IGNORADA, yyval, t);
							}else{
								return token(t, tipo, true);
							}
          }
        case 121: break;
        case 105: 
          { return token(yytext(), Preprocesador.PD_NUM, true);
          }
        case 122: break;
        case 4: 
          { return token('.');
          }
        case 123: break;
        case 35: 
          { return token('\\');
          }
        case 124: break;
        case 45: 
          { char c = yycharat(0);
							boolean c2 = false;
							if(yylength()>1){ 
								char cc=yycharat(1);
								if(cc=='{' && yylength()>2){
									cc=yycharat(2);
								}
								if(interpola && (c == '$' || c == '@')){
									if(PalabrasReservadas.isPerlSpecialVar(cc) && sep!=cc){
										token(0);
										gestorErrores.error(Errores.AVISO,Errores.VARIABLE_IGNORADA, yyval, yytext().substring(0, 2));
									}
								}
								yypushback(yylength()-1);	
								c2 = (cc >= 'A' && cc <= 'Z') || (cc >= 'a' && cc <= 'z') || cc=='_';								
							}	
							if((c == sep && stack==0) || (interpola && c2 && (c == '$' || c == '@'))){
								if(tokenAux!=null){
									yyval=tokenAux;
									tokenAux=null;
									yypushback(1);
									yyval.setValor(buffer.toString());
									return yyval.getTipo();								
								}else if(c == sep){
									sepN--;
									token(analisisTipo);
									if(sepN>0 && sepBlock!=null){
										yybegin(DELIMITADOR_DOBLE);
									}else {
										if(sepN==0){
											yybegin(estadoReturn);
										}
										return yyval.getTipo();
									}
									
								}else{
									if(flag==0){
										flag++;
										yypushback(1);return token(Parser.EXP_SEP);
									}else{
										flag=0;
									}
									isVar=false;
									yybegin(ANALISIS_VAR);return token(c);
								}
							}else{
								if(sepBlock!=null){
									if(c == sepBlock){
										stack++;
									}else if(c == sep && stack!=0){
										stack--;							
									}								
								}
								if(tokenAux==null){
									token(Parser.TEXTO);
									tokenAux=yyval;
									buffer.setLength(0);
								}
								buffer.append(yytext());						
							}
          }
        case 125: break;
        case 30: 
          { return token('{');
          }
        case 126: break;
        case 77: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QR);
          }
        case 127: break;
        case 20: 
          { return token('/');
          }
        case 128: break;
        case 21: 
          { return token('|');
          }
        case 129: break;
        case 57: 
          { analizar(Parser.SEP, REX_MOD, 1, '"', true);return token(Parser.SEP);
          }
        case 130: break;
        case 78: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QQ);
          }
        case 131: break;
        case 47: 
          { isVar=true;return token(Parser.VAR);
          }
        case 132: break;
        case 41: 
          { yybegin(YYINITIAL);
							tokenAux.setValor(buffer.toString());
							if(!tokenAux.getValor().trim().isEmpty()){
								yyval=tokenAux;
								return tokenAux.getTipo();
							}
          }
        case 133: break;
        case 55: 
          { if(yylength()>1){yypushback(1);return token(Parser.TEXTO);}yybegin(ANALISIS_ACCESO_INDEX);return token(yycharat(0));
          }
        case 134: break;
        case 31: 
          { return token('}');
          }
        case 135: break;
        case 64: 
          { return token(Parser.DOS_PUNTOS);
          }
        case 136: break;
        case 54: 
          { yybegin(ANALISIS_ACCESO);if(isVar)return token(yycharat(0));
          }
        case 137: break;
        case 76: 
          { return token(Parser.AMBITO);
          }
        case 138: break;
        case 22: 
          { return token('~');
          }
        case 139: break;
        case 98: 
          { return token(Parser.NUM_CMP);
          }
        case 140: break;
        case 10: 
          { yybegin(VAR);return token('$');
          }
        case 141: break;
        case 37: 
          { return token(Parser.VAR);
          }
        case 142: break;
        case 12: 
          { yybegin(VAR);return token('%');
          }
        case 143: break;
        case 70: 
          { return token(Parser.MENOS_IGUAL);
          }
        case 144: break;
        case 99: 
          { return token(Parser.DESP_D_IGUAL);
          }
        case 145: break;
        case 17: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.Q);
          }
        case 146: break;
        case 28: 
          { return token('[');
          }
        case 147: break;
        case 9: 
          { yybegin(PD);token("", Parser.COMENTARIO, true);
							tokenAux=yyval;buffer.setLength(0);
          }
        case 148: break;
        case 89: 
          { return token(Parser.OR_IGUAL);
          }
        case 149: break;
        case 85: 
          { return token(Parser.MULTI_IGUAL);
          }
        case 150: break;
        case 82: 
          { return token(Parser.LAND);
          }
        case 151: break;
        case 29: 
          { return token(']');
          }
        case 152: break;
        case 63: 
          { return token(Parser.DECIMAL);
          }
        case 153: break;
        case 56: 
          { analizar(Parser.SEP, REX_MOD, 2, null, true);return token(Parser.M_REX);
          }
        case 154: break;
        case 23: 
          { return token('^');
          }
        case 155: break;
        case 74: 
          { return token(Parser.NUM_GE);
          }
        case 156: break;
        case 3: 
          { return token(Parser.ENTERO);
          }
        case 157: break;
        case 44: 
          { if(yycharat(0) == sepBlock){
								yybegin(ANALISIS);
								yyval.setValor(""+sep+sepBlock); 
								return yyval.getTipo();}else{error();
							}
          }
        case 158: break;
        case 69: 
          { return token(Parser.FLECHA);
          }
        case 159: break;
        case 13: 
          { return token(':');
          }
        case 160: break;
        case 1: 
          { error();
          }
        case 161: break;
        case 62: 
          { yybegin(YYINITIAL);return token(Parser.REX_MOD);
          }
        case 162: break;
        case 34: 
          { return token(';');
          }
        case 163: break;
        case 14: 
          { analizar('\'', YYINITIAL, 1, '\'', false);return token('\'');
          }
        case 164: break;
        case 87: 
          { return token(Parser.DIV_IGUAL);
          }
        case 165: break;
        case 67: 
          { return token(Parser.MAS_IGUAL);
          }
        case 166: break;
        case 88: 
          { return token(Parser.LOR);
          }
        case 167: break;
        case 79: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, false);return token(Parser.QW);
          }
        case 168: break;
        case 7: 
          { return token('<');
          }
        case 169: break;
        case 40: 
          { buffer.append(yytext());
          }
        case 170: break;
        case 102: 
          { return token(Parser.DLOR_IGUAL);
          }
        case 171: break;
        case 83: 
          { return token(Parser.AND_IGUAL);
          }
        case 172: break;
        case 50: 
          { yybegin(ANALISIS);yypushback(1);error();
          }
        case 173: break;
        case 25: 
          { return token('=');
          }
        case 174: break;
        case 72: 
          { return token(Parser.NUM_LE);
          }
        case 175: break;
        case 53: 
          { yybegin(ANALISIS_ACCESO_INDEX_STR);return token(yycharat(0));
          }
        case 176: break;
        case 16: 
          { analizar('`',  YYINITIAL, 1, '`',  true); return token('`');
          }
        case 177: break;
        case 61: 
          { yybegin(YYINITIAL);yypushback(1);
          }
        case 178: break;
        case 8: 
          { return token('>');
          }
        case 179: break;
        case 33: 
          { return token('?');
          }
        case 180: break;
        case 84: 
          { return token(Parser.POW);
          }
        case 181: break;
        case 93: 
          { return token(Parser.NUM_NE);
          }
        case 182: break;
        case 52: 
          { return token('@');
          }
        case 183: break;
        case 97: 
          { return token(Parser.DESP_I_IGUAL);
          }
        case 184: break;
        case 90: 
          { return token(Parser.SMART_EQ);
          }
        case 185: break;
        case 86: 
          { return token(Parser.DLOR);
          }
        case 186: break;
        case 18: 
          { yybegin(FUN);return token('&');
          }
        case 187: break;
        case 92: 
          { yybegin(REX_T);return token(Parser.STR_NO_REX);
          }
        case 188: break;
        case 91: 
          { return token(Parser.XOR_IGUAL);
          }
        case 189: break;
        case 109: 
          { yybegin(YYINITIAL);
          }
        case 190: break;
        case 58: 
          { analizar(Parser.SEP, REX_MOD, 1, '/', true);return token(Parser.SEP);
          }
        case 191: break;
        case 60: 
          { analizar(Parser.SEP, REX_MOD, 3, null, false);return token(Parser.Y_REX);
          }
        case 192: break;
        case 75: 
          { return token(Parser.MOD_IGUAL);
          }
        case 193: break;
        case 71: 
          { return token(Parser.DESP_I);
          }
        case 194: break;
        case 48: 
          { yypushback(1);yybegin(ANALISIS_ACCESO);
          }
        case 195: break;
        case 24: 
          { return token('!');
          }
        case 196: break;
        case 68: 
          { return token(Parser.MENOS_MENOS);
          }
        case 197: break;
        case 2: 
          { String txt = yytext(); 
						int tipo = PalabrasReservadas.buscarId(txt, Parser.ID);
						if(tipo==Parser.SUB) yybegin(VAR);
						return token(txt, tipo);
          }
        case 198: break;
        case 107: 
          { return token(Parser.LINEA_JAVA);
          }
        case 199: break;
        case 43: 
          { yybegin(ANALISIS);
							sepN--;
							sep=yycharat(0);
							switch(sep){
								case '(': sepBlock='('; sep=')'; break;
								case '{': sepBlock='{'; sep='}'; break;
								case '[': sepBlock='['; sep=']'; break;
								case '\'': interpola=false; break;
								default: sepBlock=null;
							}
							return token(analisisTipo);
          }
        case 200: break;
        case 38: 
          { return token('#');
          }
        case 201: break;
        case 36: 
          { yypushback(1);yybegin(YYINITIAL);
          }
        case 202: break;
        case 51: 
          { return token('$');
          }
        case 203: break;
        case 94: 
          { yybegin(REX_T);return token(Parser.STR_REX);
          }
        case 204: break;
        case 39: 
          { return token(Parser.ID);
          }
        case 205: break;
        case 110: 
          { yybegin(IGNORAR);
          }
        case 206: break;
        case 101: 
          { return token(Parser.POW_IGUAL);
          }
        case 207: break;
        case 73: 
          { return token(Parser.DESP_D);
          }
        case 208: break;
        case 103: 
          { return token(Parser.LOR_IGUAL);
          }
        case 209: break;
        case 81: 
          { return token(Parser.X_IGUAL);
          }
        case 210: break;
        case 80: 
          { analizar(Parser.SEP, YYINITIAL, 2, null, true);return token(Parser.QX);
          }
        case 211: break;
        case 11: 
          { yybegin(VAR);return token('@');
          }
        case 212: break;
        case 96: 
          { if(yylength()==3) yypushback(1);
							if(tokenAux==null){
								token(Parser.TEXTO);
								tokenAux=yyval;buffer.setLength(0);
							}
							buffer.append(yytext());
          }
        case 213: break;
        case 95: 
          { return token(Parser.NUM_EQ);
          }
        case 214: break;
        case 26: 
          { return token('(');
          }
        case 215: break;
        case 108: 
          { return token(Parser.IMPORT_JAVA);
          }
        case 216: break;
        case 27: 
          { return token(')');
          }
        case 217: break;
        case 65: 
          { return token(Parser.CONCAT_IGUAL);
          }
        case 218: break;
        case 15: 
          { analizar('"',  YYINITIAL, 1, '"',  true); return token('"');
          }
        case 219: break;
        case 42: 
          { 
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
